{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":245,\"hp\":34,\"max_hp\":48,\"strength\":345,\"defense\":381,\"dexterity\":388,\"agility\":337,\"charisma\":471,\"intelligence\":80,\"hacking_chance_mult\":2.1400616457078394,\"hacking_speed_mult\":1.948112863852181,\"hacking_money_mult\":1.7646354530676887,\"hacking_grow_mult\":1.7646354530676887,\"hacking_exp\":8972964.815200256,\"strength_exp\":85179.69470249633,\"defense_exp\":86128.44470249633,\"dexterity_exp\":96510.88021403624,\"agility_exp\":93999.01272469854,\"charisma_exp\":702949.0134649707,\"intelligence_exp\":5784.356960358803,\"hacking_mult\":2.248232034345437,\"strength_mult\":2.1147762771763827,\"defense_mult\":2.3262539048940214,\"dexterity_mult\":2.317059225428036,\"agility_mult\":2.027426822249532,\"charisma_mult\":2.043262103552061,\"hacking_exp_mult\":4.593998999452831,\"strength_exp_mult\":1.958126182570725,\"defense_exp_mult\":1.958126182570725,\"dexterity_exp_mult\":1.958126182570725,\"agility_exp_mult\":1.958126182570725,\"charisma_exp_mult\":1.958126182570725,\"company_rep_mult\":2.5847265609933574,\"faction_rep_mult\":1.9581261825707243,\"money\":21282994084.028435,\"city\":\"Aevum\",\"location\":\"Bachman & Associates\",\"jobs\":{\"Bachman & Associates\":\"Security Guard\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Bladeburners\",\"Slum Snakes\",\"CyberSec\",\"Tetrads\",\"Tian Di Hui\",\"Speakers for the Dead\",\"The Syndicate\",\"Ishima\",\"New Tokyo\",\"Chongqing\",\"NiteSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting II\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":10}],\"numPeopleKilled\":30,\"karma\":-4301.85,\"crime_money_mult\":2.447657728213405,\"crime_success_mult\":1.7027184196267169,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.7027184196267169,\"hacknet_node_money_mult\":1.547925836024288,\"hacknet_node_purchase_cost_mult\":0.5942465677524607,\"hacknet_node_ram_cost_mult\":0.5942465677524607,\"hacknet_node_core_cost_mult\":0.5942465677524607,\"hacknet_node_level_cost_mult\":0.5942465677524607,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":4,\"moneyLost\":19700000,\"rank\":412.48589449411713,\"maxRank\":412.48589449411713,\"skillPoints\":6,\"totalSkillPoints\":137,\"teamSize\":1,\"teamLost\":32,\"hpLost\":222,\"storedCycles\":3,\"randomEventCounter\":348,\"actionTimeToComplete\":40,\"actionTimeCurrent\":11,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Investigation\",\"type\":3}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1152932449,\"popEst\":1480249909.1304111,\"comms\":24,\"chaos\":1.4842320000001121}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1022431262,\"popEst\":1375044539.1675181,\"comms\":54,\"chaos\":1.80350728344196}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":2221221551,\"popEst\":2297381405.6655226,\"comms\":30,\"chaos\":8.468895131288653}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":2051223397,\"popEst\":1467158482.671677,\"comms\":91,\"chaos\":1.5524999999991707}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":2675374027,\"popEst\":747290554.8500395,\"comms\":91,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":826201864,\"popEst\":683350600.0028611,\"comms\":123,\"chaos\":0.19650000000010914}}},\"city\":\"Sector-12\",\"skills\":{\"Hyperdrive\":3,\"Overclock\":6,\"Datamancer\":1,\"Cyber's Edge\":1,\"Blade's Intuition\":4,\"Cloak\":8,\"Digital Observer\":3},\"skillMultipliers\":{\"successChanceAll\":1.12,\"successChanceStealth\":1.44,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1.12,\"successChanceEstimate\":1.05,\"actionTime\":0.94,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1.02,\"money\":1,\"expGain\":1.3},\"staminaBonus\":0.2,\"maxStamina\":107.52978964309843,\"stamina\":70.30222224372311,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":20,\"maxLevel\":20,\"autoLevel\":true,\"baseDifficulty\":122.89333778428474,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":237,\"failures\":12,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":435.16583333330595,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":268.8082423829548,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":561.530624999975,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":192.1315225436258,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":632.5924999999688,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":8,\"maxLevel\":8,\"autoLevel\":true,\"baseDifficulty\":434.9488952871417,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":44,\"failures\":35,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":304.4437500000641,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":7,\"maxLevel\":7,\"autoLevel\":true,\"baseDifficulty\":544.9679721963831,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":30,\"failures\":13,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":323.32812500006355,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":597.1748989265882,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":402.85916666683966,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":751.1102486572314,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":317.64208333342054,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":900.2537556391227,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":160.06854166666292,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1639.360839035839,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":212.335000000131,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":true,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Undercover Operation\",\"type\":3}},\"automateThreshHigh\":80,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Field Analysis\",\"type\":7}},\"automateThreshLow\":60,\"consoleHistory\":[\"help\",\"log\",\"help log\",\"help automate\",\"automate stamina 100 high\",\"automate contract Tracking high\",\"automate stamina 50 low\",\"automate general 'Field Analysis' low\",\"automate status\",\"automate stamina 20 low\",\"automate stamina 40 high\",\"automate en\",\"automate stamina 40 low\",\"automate stamina 60 high\",\"help\",\"automate help\",\"help automate\",\"automate en\",\"automate status\",\"automate stamina 40 high\",\"automate stamina 20 low\",\"automate general 'Recruitment' low\",\"automate stamina 80 high\",\"automate stamina 50 low\",\"automate stamina 60 low\",\"automate operations 'Investigation' high\",\"help\",\"automate en\",\"automate general 'Field Analysis' low\",\"automate operations 'Undercover Operation' high\",\"automate en\"],\"consoleLogs\":[\"[1/19 16:01:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:02:20] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[1/19 16:02:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:02:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:03:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:03:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:04:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:04:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:05:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:05:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:06:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:06:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:07:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:07:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:08:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:08:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:09:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:09:59] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:10:29] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:10:57] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[1/19 16:11:20] Undercover Operation successfully completed! Gained 4.228 rank\",\"[1/19 16:12:03] Undercover Operation successfully completed! Gained 4.200 rank\",\"[1/19 16:12:46] Undercover Operation successfully completed! Gained 4.665 rank\",\"[1/19 16:13:30] Undercover Operation failed! Lost 0.401 rank. Took 15 damage.\",\"[1/19 16:14:14] Undercover Operation successfully completed! Gained 4.692 rank\",\"[1/19 16:14:58] Undercover Operation successfully completed! Gained 4.448 rank\",\"[1/19 16:15:25] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[1/19 16:15:42] Undercover Operation successfully completed! Gained 4.464 rank\",\"[1/19 16:16:28] Undercover Operation successfully completed! Gained 5.376 rank\",\"[1/19 16:17:14] Undercover Operation failed! Lost 0.475 rank. Took 13 damage.\",\"[1/19 16:18:00] Undercover Operation successfully completed! Gained 5.410 rank\",\"[1/19 16:18:46] Undercover Operation successfully completed! Gained 5.336 rank\",\"[1/19 16:19:31] Undercover Operation successfully completed! Gained 5.170 rank\",\"[1/19 16:20:16] Undercover Operation successfully completed! Gained 5.251 rank\",\"[1/19 16:21:03] Undercover Operation failed! Lost 0.531 rank. Took 14 damage.\",\"[1/19 16:21:50] Undercover Operation successfully completed! Gained 6.052 rank\",\"[1/19 16:22:37] Undercover Operation failed! Lost 0.507 rank. Took 16 damage.\",\"[1/19 16:23:24] Undercover Operation successfully completed! Gained 5.656 rank\",\"[1/19 16:24:06] Intelligence indicates that the Synthoid population of Aevum just changed significantly\",\"[1/19 16:24:11] Undercover Operation successfully completed! Gained 5.201 rank\",\"[1/19 16:24:58] Undercover Operation failed! Lost 0.560 rank. Took 14 damage.\",\"[1/19 16:25:45] Undercover Operation successfully completed! Gained 5.411 rank\",\"[1/19 16:26:31] Undercover Operation failed! Lost 0.540 rank. Took 13 damage.\",\"[1/19 16:27:17] Undercover Operation successfully completed! Gained 5.811 rank\",\"[1/19 16:28:05] Undercover Operation failed! Lost 0.520 rank. Took 15 damage.\",\"[1/19 16:28:49] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[1/19 16:28:53] Undercover Operation failed! Lost 0.521 rank. Took 14 damage.\",\"[1/19 16:29:41] Undercover Operation successfully completed! Gained 6.659 rank\",\"[1/19 16:30:29] Undercover Operation successfully completed! Gained 5.975 rank\",\"[1/19 16:31:17] Undercover Operation failed! Lost 0.618 rank. Took 15 damage.\",\"[1/19 16:32:05] Undercover Operation successfully completed! Gained 6.016 rank\",\"[1/19 16:32:53] Undercover Operation successfully completed! Gained 6.616 rank\",\"[1/19 16:33:41] Undercover Operation successfully completed! Gained 6.217 rank\",\"[1/19 16:34:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:34:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:35:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:35:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:36:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:36:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:36:42] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[1/19 16:37:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:37:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:38:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:38:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:39:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:39:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:40:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:40:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:41:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:41:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:42:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:42:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:43:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:43:46] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:44:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:44:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:45:11] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:45:41] Field analysis completed. Gained 0.1 rank, 91.9 hacking exp, and 39.2 charisma exp\",\"[1/19 16:46:00] Intelligence indicates that a large number of Synthoids migrated from Sector-12 to some other city\",\"[1/19 16:46:42] Undercover Operation successfully completed! Gained 6.005 rank\",\"[1/19 16:47:29] Undercover Operation successfully completed! Gained 6.114 rank\",\"[1/19 16:48:18] Undercover Operation successfully completed! Gained 6.979 rank\",\"[1/19 16:49:07] Undercover Operation failed! Lost 0.655 rank. Took 15 damage.\",\"[1/19 16:49:56] Undercover Operation successfully completed! Gained 7.320 rank\",\"[1/19 16:50:45] Undercover Operation successfully completed! Gained 6.888 rank\",\"[1/19 16:51:34] Undercover Operation successfully completed! Gained 6.644 rank\",\"[1/19 16:52:23] Undercover Operation failed! Lost 0.611 rank. Took 15 damage.\",\"[1/19 16:53:12] Undercover Operation successfully completed! Gained 6.529 rank\",\"[1/19 16:54:01] Undercover Operation successfully completed! Gained 7.169 rank\",\"[1/19 16:54:50] Undercover Operation failed! Lost 0.634 rank. Took 16 damage.\",\"[1/19 16:55:04] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[1/19 16:55:39] Undercover Operation failed! Lost 0.652 rank. Took 14 damage.\",\"[1/19 16:56:28] Undercover Operation successfully completed! Gained 6.891 rank\",\"> automate en\",\"[1/19 16:56:46] Bladeburner automation enabled\",\"> automate en\",\"[1/19 16:56:57] Bladeburner automation enabled\",\"[1/19 16:57:43] Investigation failed! Lost 0.314 rank. \",\"[1/19 16:58:23] Investigation failed! Lost 0.322 rank. \",\"[1/19 16:59:03] Investigation successfully completed! Gained 3.293 rank\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":231,\"defense\":254,\"dexterity\":254,\"agility\":222,\"charisma\":305,\"intelligence\":1,\"hp\":35,\"max_hp\":35,\"hacking_exp\":555793.132138062,\"strength_exp\":101877.91405012507,\"defense_exp\":102826.66405012507,\"dexterity_exp\":103692.16405012507,\"agility_exp\":103952.41405012507,\"charisma_exp\":713755.0843996335,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000001,\"strength_mult\":1.3662,\"defense_mult\":1.50282,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.3097700000000003,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":5.249078047434377,\"hacking_speed_mult\":3.8919136671799452,\"hacking_money_mult\":40.36599566999999,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.5812499999999998,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Ishima\",\"currentTaskMaxTime\":0,\"currentTaskTime\":4570200,\"earningsForSleeves\":{\"hack\":541593.109155202,\"str\":1974550.2397026382,\"def\":11977.936950000138,\"dex\":11829.14269799998,\"agi\":11788.734497999938,\"cha\":58206.71649999811,\"money\":0},\"earningsForPlayer\":{\"hack\":541593.109155202,\"str\":1974550.2397026382,\"def\":11977.936950000138,\"dex\":11829.14269799998,\"agi\":11788.734497999938,\"cha\":58206.71649999811,\"money\":-550153323.4375},\"earningsForTask\":{\"hack\":3793.980093750221,\"str\":2890.651500000148,\"def\":2890.651500000148,\"dex\":2890.651500000148,\"agi\":2890.651500000148,\"cha\":2890.651500000148,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.16603125000000005,\"str\":0.1265,\"def\":0.1265,\"dex\":0.1265,\"agi\":0.1265,\"cha\":0.1265,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":229,\"defense\":253,\"dexterity\":253,\"agility\":221,\"charisma\":305,\"intelligence\":1,\"hp\":35,\"max_hp\":35,\"hacking_exp\":552196.1321380571,\"strength_exp\":99045.41405012507,\"defense_exp\":99994.16405012507,\"dexterity_exp\":101442.66405012507,\"agility_exp\":101702.91405012507,\"charisma_exp\":710202.084399643,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000001,\"strength_mult\":1.3662,\"defense_mult\":1.50282,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.3097700000000003,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.5812499999999998,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"The Syndicate\",\"currentTaskMaxTime\":0,\"currentTaskTime\":4560200,\"earningsForSleeves\":{\"hack\":541050.1557714524,\"str\":14361.63365000134,\"def\":1974028.0289525532,\"dex\":11632.575149999662,\"agi\":11224.169149999265,\"cha\":60998.726499998076,\"money\":0},\"earningsForPlayer\":{\"hack\":541050.1557714524,\"str\":14361.63365000134,\"def\":1974028.0289525532,\"dex\":11632.575149999662,\"agi\":11224.169149999265,\"cha\":60998.726499998076,\"money\":-525354673.4375},\"earningsForTask\":{\"hack\":3785.67853125022,\"str\":2884.3265000001466,\"def\":2884.3265000001466,\"dex\":2884.3265000001466,\"agi\":2884.3265000001466,\"cha\":2884.3265000001466,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.16603125000000005,\"str\":0.1265,\"def\":0.1265,\"dex\":0.1265,\"agi\":0.1265,\"cha\":0.1265,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":229,\"defense\":253,\"dexterity\":252,\"agility\":221,\"charisma\":305,\"intelligence\":1,\"hp\":35,\"max_hp\":35,\"hacking_exp\":551636.1321380563,\"strength_exp\":98602.66405012507,\"defense_exp\":99551.41405012507,\"dexterity_exp\":101069.41405012507,\"agility_exp\":101352.91405012507,\"charisma_exp\":709642.0843996446,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000001,\"strength_mult\":1.3662,\"defense_mult\":1.5028200000000003,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.30977,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.5812499999999998,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"New Tokyo\",\"currentTaskMaxTime\":0,\"currentTaskTime\":4536200,\"earningsForSleeves\":{\"hack\":542954.6836014509,\"str\":10266.626249999872,\"def\":11526.000799999756,\"dex\":1818358.7804525523,\"agi\":11946.048649999238,\"cha\":66949.54650001426,\"money\":0},\"earningsForPlayer\":{\"hack\":542954.6836014509,\"str\":10266.626249999872,\"def\":11526.000799999756,\"dex\":1818358.7804525523,\"agi\":11946.048649999238,\"cha\":66949.54650001426,\"money\":-493256973.4375},\"earningsForTask\":{\"hack\":3765.7547812502185,\"str\":2869.1465000001426,\"def\":2869.1465000001426,\"dex\":2869.1465000001426,\"agi\":2869.1465000001426,\"cha\":2869.1465000001426,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.16603125000000005,\"str\":0.1265,\"def\":0.1265,\"dex\":0.1265,\"agi\":0.1265,\"cha\":0.1265,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":226,\"defense\":249,\"dexterity\":249,\"agility\":218,\"charisma\":304,\"intelligence\":1,\"hp\":34,\"max_hp\":34,\"hacking_exp\":542596.132138044,\"strength_exp\":91455.41405012507,\"defense_exp\":92404.16405012507,\"dexterity_exp\":93922.16405012507,\"agility_exp\":94301.66405012507,\"charisma_exp\":700602.0843996684,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000003,\"strength_mult\":1.3662,\"defense_mult\":1.50282,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.3097700000000003,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.5812499999999998,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Chongqing\",\"currentTaskMaxTime\":0,\"currentTaskTime\":4530200,\"earningsForSleeves\":{\"hack\":545767.3770039304,\"str\":5782.958450000657,\"def\":5946.538750000713,\"dex\":9273.322449999856,\"agi\":1813266.3550525904,\"cha\":62542.15149999812,\"money\":0},\"earningsForPlayer\":{\"hack\":545767.3770039304,\"str\":5782.958450000657,\"def\":5946.538750000713,\"dex\":9273.322449999856,\"agi\":1813266.3550525904,\"cha\":62542.15149999812,\"money\":-493151723.4375},\"earningsForTask\":{\"hack\":3760.773843750218,\"str\":2865.3515000001416,\"def\":2865.3515000001416,\"dex\":2865.3515000001416,\"agi\":2865.3515000001416,\"cha\":2865.3515000001416,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.16603125000000005,\"str\":0.1265,\"def\":0.1265,\"dex\":0.1265,\"agi\":0.1265,\"cha\":0.1265,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":226,\"defense\":249,\"dexterity\":249,\"agility\":218,\"charisma\":304,\"intelligence\":1,\"hp\":34,\"max_hp\":34,\"hacking_exp\":541678.0821380427,\"strength_exp\":90822.91405012507,\"defense_exp\":91771.66405012507,\"dexterity_exp\":93289.66405012507,\"agility_exp\":93669.16405012507,\"charisma_exp\":699802.0843996702,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000001,\"strength_mult\":1.3662,\"defense_mult\":1.5028200000000003,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.3097700000000003,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.58125,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"NiteSec\",\"currentTaskMaxTime\":0,\"currentTaskTime\":3392000,\"earningsForSleeves\":{\"hack\":1052465.2969595443,\"str\":7010.170550000702,\"def\":7418.829050001136,\"dex\":10221.309150001154,\"agi\":11112.78815000072,\"cha\":2631770.1084837005,\"money\":0},\"earningsForPlayer\":{\"hack\":1052465.2969595443,\"str\":7010.170550000702,\"def\":7418.829050001136,\"dex\":10221.309150001154,\"agi\":11112.78815000072,\"cha\":2631770.1084837005,\"money\":-352729673.4375},\"earningsForTask\":{\"hack\":4223.835000000274,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":1,\"gainRatesForTask\":{\"hack\":0.24904687500000003,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":94,\"strength\":222,\"defense\":245,\"dexterity\":245,\"agility\":214,\"charisma\":303,\"intelligence\":1,\"hp\":34,\"max_hp\":34,\"hacking_exp\":526004.7321373399,\"strength_exp\":83359.41405012505,\"defense_exp\":84308.16405012505,\"dexterity_exp\":85826.16405012505,\"agility_exp\":86205.66405012505,\"charisma_exp\":689423.6843996978,\"intelligence_exp\":0,\"hacking_mult\":1.2133800000000001,\"strength_mult\":1.3662,\"defense_mult\":1.5028200000000003,\"dexterity_mult\":1.4968800000000002,\"agility_mult\":1.3097700000000003,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.6603125000000003,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.6698000000000002,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.58125,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":1,\"currentTaskLocation\":\"Bachman & Associates\",\"currentTaskMaxTime\":0,\"currentTaskTime\":106000,\"earningsForSleeves\":{\"hack\":3120367.373309982,\"str\":5819.056000000722,\"def\":6391.15405000133,\"dex\":6227.905750001157,\"agi\":5860.2159500007665,\"cha\":814487.3433998958,\"money\":0},\"earningsForPlayer\":{\"hack\":3120367.373309982,\"str\":5819.056000000722,\"def\":6391.15405000133,\"dex\":6227.905750001157,\"agi\":5860.2159500007665,\"cha\":814487.3433998958,\"money\":-378763028.4375},\"earningsForTask\":{\"hack\":22.879106249999968,\"str\":69.72680000000008,\"def\":69.72680000000008,\"dex\":69.72680000000008,\"agi\":69.72680000000008,\"cha\":34.86340000000004,\"money\":37895},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0.04316812500000001,\"str\":0.13156,\"def\":0.13156,\"dex\":0.13156,\"agi\":0.13156,\"cha\":0.06578,\"money\":71.5},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":6,\"lastUpdate\":1642640354483,\"totalPlaytime\":2933189800,\"playtimeSinceLastAug\":6495400,\"playtimeSinceLastBitnode\":117800800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":2478253.449816072,\"gang\":0,\"hacking\":48727701595,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-17600000,\"infiltration\":0,\"sleeves\":-107400045.625,\"stock\":0,\"total\":21282993084.028435,\"work\":13281.203673088366,\"servers\":-27033600000,\"other\":-288600000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":96997790.19782504,\"casino\":0,\"class\":-4434688,\"codingcontract\":112500000,\"corporation\":0,\"crime\":2478253.449816072,\"gang\":0,\"hacking\":349282103193.521,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-19700000,\"infiltration\":0,\"sleeves\":-9741509395.625,\"stock\":0,\"total\":28891364719.88334,\"work\":13281.203673088366,\"servers\":-186302342545.68866,\"other\":-1442100000,\"augmentations\":-123092641169.17514}},\"scriptProdSinceLastAug\":48727701595,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422}],\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":16318.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2783.409999999656,\"pid\":2938,\"ramUsage\":26.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///11b7040d-fbec-4272-a391-4a94e0fcea70\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[30,\"go\"],\"dataMap\":{},\"filename\":\"solo.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2193873.7800106243,\"onlineMoneyMade\":11844624819,\"onlineRunningTime\":948.4100000000788,\"pid\":5230,\"ramUsage\":13.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///accf1dbc-8687-4052-894c-1a0585de623d\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"solo.js\",\"url\":\"blob:file:///d663ec76-4723-41fb-b064-d5f36c4bfa16\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6316,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":9302,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\",\"moduleSequenceNumber\":75534,\"dependents\":[]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\",\"moduleSequenceNumber\":75535,\"dependents\":[]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nfunction canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction matchWeakenTarget(a, target) {\\r\\n    let epsilon = 0.1;\\r\\n    let targetMin = target - epsilon;\\r\\n    let targetMax = target + epsilon;\\r\\n\\r\\n    return a > targetMin && a < targetMax;\\r\\n}\\r\\n\\r\\nfunction assessHack(hostNames) {\\r\\n    let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort);\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\");\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\");\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\");\\r\\n\\r\\n    let fundThres = 0.9;\\r\\n    let targetServer = ns.getServer(hackableHosts[0]);\\r\\n    let targetFunds = targetServer.moneyMax * fundThres;\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetFunds / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s [%2.0f%% | %s]\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetFunds, \\\"($0.000a)\\\"),\\r\\n        fundThres * 100,\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    const hostSet = new Set([\\\"home\\\"]);\\r\\n    let hostQueue = [\\\"home\\\"];\\r\\n    let currentHost;\\r\\n    while ((currentHost = hostQueue.shift())) {\\r\\n        let newHosts = ns.scan(currentHost);\\r\\n\\r\\n        for (const newHost of newHosts) {\\r\\n            if (!hostSet.has(newHost)) {\\r\\n                hostQueue.push(newHost);\\r\\n                hostSet.add(newHost);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let hostNames = Array.from(hostSet);\\r\\n    //assessHack(hostNames)\\r\\n\\r\\n    let serverName = ns.args[0];\\r\\n    let targetServer = ns.getServer(serverName);\\r\\n    assessHack([targetServer.hostname]);\\r\\n}\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///24171303-bfaf-4fc3-af08-11c06193012b\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"482a9beb35dd25b989f01392d4ab4a49e02be0cd92ad83fe35cbb3ce92bb8677\",\"moduleSequenceNumber\":75536,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///4f9bae27-9def-435e-bf82-5f1566fcd1ca\"}],\"ramUsage\":11.25,\"server\":\"home\",\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"moduleSequenceNumber\":75821,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n\\t\\tthis.print(ns)\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hosts = mapHosts();\\r\\n    let ccts = [];\\r\\n    for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n        let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n        if (ls.length === 0) continue;\\r\\n\\r\\n        ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n    }\\r\\n\\r\\n    sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n    for (const cct of ccts) {\\r\\n        cct.solve(ns);\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///c27c11ba-e724-4306-821d-ed811bab1965\",\"moduleSequenceNumber\":172},{\"filename\":\"cct.js\",\"url\":\"blob:file:///5f1ad755-c297-4ac5-8dab-89e2e4579433\",\"moduleSequenceNumber\":30972}],\"ramUsage\":27,\"server\":\"home\",\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"moduleSequenceNumber\":75538,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction listServers(ns, hostnames) {\\r\\n    let hackableHosts = hostnames.sort((a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6dGB %5.2f\\\",\\r\\n            hostname,\\r\\n            ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"),\\r\\n            ns.getServerRequiredHackingLevel(hostname),\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            ns.getServerMaxRam(hostname),\\r\\n            Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    let hostnames = allHosts()\\r\\n\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    listServers(ns, hostnames);\\r\\n}\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///f046ddc4-a1ca-45f2-a2b1-94b03aa53916\"}],\"ramUsage\":2.7,\"server\":\"home\",\"_hash\":\"f794cb5c9400e1bd7590de9d4c74f655abc7a9f0983d213a5828b9fb77b56e2e\",\"moduleSequenceNumber\":75567,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var debug = false;\\r\\n\\r\\nfunction fltEq(a, b) {\\r\\n    let epsilon = 0.05;\\r\\n    return a > b - epsilon && a < b + epsilon;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doWeaken(ns, _hostname, _targetname, ramAllowance) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let weakenThreads = Math.min(\\r\\n        Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread),\\r\\n        Math.floor(ramAllowance / weakenRam)\\r\\n    );\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        let estSecLevelAfterWeaken = Math.max(\\r\\n            target.minDifficulty,\\r\\n            target.hackDifficulty - weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n        ns.tprintf(\\\"Weaken Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s\\\",\\r\\n            target.hostname,\\r\\n            target.hackDifficulty,\\r\\n            estSecLevelAfterWeaken,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            host.hostname,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let currentMoney = Math.max(1.0, target.moneyAvailable);\\r\\n    let targetGrowMult = highMoney / currentMoney;\\r\\n    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let growThreads = fullGrowThreads + 1,\\r\\n        weakenThreads,\\r\\n        growRamCycle,\\r\\n        growSecIncrease;\\r\\n\\r\\n    do {\\r\\n        growThreads -= 1;\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        growRamCycle = growThreads * growRam + weakenThreads * weakenRam;\\r\\n    } while (growRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Grow Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(currentMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)\\\",\\r\\n            ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(target.moneyMax, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(highMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult,\\r\\n            (growThreads / fullGrowThreads) * 100,\\r\\n            growThreads,\\r\\n            fullGrowThreads\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            growRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHackAndWeaken(ns, _hostname, _targetname) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let hackThreads = fullHackThreads + 1,\\r\\n        weakenThreads,\\r\\n        hackRamCycle;\\r\\n\\r\\n    do {\\r\\n        hackThreads -= 1;\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n    } while (hackRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Hack Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance, tspacer) {\\r\\n    /*//////////// ALGO ////////////\\r\\n        if hackRamCycle is greater than ramAllowance\\r\\n        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio\\r\\n        while hackRamCycle > ramAllowance\\r\\n        recompute everything up to hackRamCycle\\r\\n        if hackRamCycle > ramAllowance\\r\\n            reduce targetHackAmount by .1% of original targetHackAmount\\r\\n    //////////////////////////////*/\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    if (debug) {\\r\\n        ns.tprintf(\\\"Hack Process: \\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(target.moneyAvailable - hackAmount, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramAllowance) {\\r\\n        let failRatio = ramAllowance / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount);\\r\\n        if (debug)\\r\\n            ns.tprintf(\\\"  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)\\\", failRatio * 100, failRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    let cycles = 0;\\r\\n    while (hackRamCycle > ramAllowance) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n        cycles++;\\r\\n    }\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        if (cycles > 0)\\r\\n            ns.tprintf(\\r\\n                \\\"  targetHackAmount ratio: %.0f%%; Cycles: %d\\\",\\r\\n                (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100,\\r\\n                cycles\\r\\n            );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            hackWeakenThreads,\\r\\n            growWeakenThreads,\\r\\n            (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f\\\",\\r\\n            target.hackDifficulty,\\r\\n            target.hackDifficulty + hackSecIncrease + growSecIncrease,\\r\\n            ns.hackAnalyzeSecurity(1),\\r\\n            weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n    }\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tgrow = ns.getGrowTime(target.hostname);\\r\\n    let thack = ns.getHackTime(target.hostname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, hackWeakenThreads, target.hostname, 0); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, growWeakenThreads, target.hostname, tGrowWeakenOffset); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname, tGrowOffset); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname, tHackOffset); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreads(ns, _hostname, _targetname, highMoney, lowMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n    return [hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreadsSmart(ns, _hostname, _targetname, ramAllowance, tspacer) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyMax * 0.9;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let targetCycles = Math.floor(tweakenFullCycle / tCycleSpacer);\\r\\n    let ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n\\r\\n    // dont force a cycle into less than 16GB\\r\\n    while (ramFit < 16) {\\r\\n        targetCycles--;\\r\\n        ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramFit) {\\r\\n        let crunchRatio = ramFit / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (crunchRatio * 1.1), targetHackAmount);\\r\\n        if (debug) ns.tprintf(\\\"  ramFit / hackRamCycle = %.0f%% (%.0f%%)\\\", crunchRatio * 100, crunchRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    while (hackRamCycle > ramFit) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n        let dobreak = false;\\r\\n        if (targetGrowMult < 1) {\\r\\n            targetGrowMult = 1.0000001;\\r\\n            dobreak = true;\\r\\n        }\\r\\n\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n        if (dobreak) break;\\r\\n    }\\r\\n\\r\\n    //if (debug) {\\r\\n    ns.tprintf(\\r\\n        \\\"  Calling Hack (%.4f%% of Max) with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s over %d Cycles\\\",\\r\\n        (hackAmount / target.moneyMax) * 100,\\r\\n        hackThreads,\\r\\n        hackThreads * hackRam,\\r\\n        growThreads,\\r\\n        growThreads * growRam,\\r\\n        hackWeakenThreads,\\r\\n        growWeakenThreads,\\r\\n        (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n        hackRamCycle,\\r\\n        ns.tFormat(tweaken),\\r\\n        targetCycles\\r\\n    );\\r\\n    //}\\r\\n\\r\\n    return [targetCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction launchHGW(\\r\\n    ns,\\r\\n    hostname,\\r\\n    targetname,\\r\\n    tspacer,\\r\\n    tag,\\r\\n    hackWeakenThreads,\\r\\n    growWeakenThreads,\\r\\n    hackThreads,\\r\\n    growThreads\\r\\n) {\\r\\n    let tweaken = ns.getWeakenTime(targetname);\\r\\n    let tgrow = ns.getGrowTime(targetname);\\r\\n    let thack = ns.getHackTime(targetname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, hackWeakenThreads, targetname, 0, tag); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, growWeakenThreads, targetname, tGrowWeakenOffset, tag); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", hostname, growThreads, targetname, tGrowOffset, tag); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", hostname, hackThreads, targetname, tHackOffset, tag); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let ramOverride = ns.args[1];\\r\\n    let _hostname = ns.getHostname();\\r\\n    let _targetname = ns.args[0];\\r\\n    if (!_targetname) _targetname = \\\"lexo-corp\\\";\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let lowThresholdFactor = 0.94;\\r\\n    let highThresholdFactor = 1;\\r\\n    let lowMoney = target.moneyMax * lowThresholdFactor;\\r\\n    let highMoney = target.moneyMax * highThresholdFactor;\\r\\n\\r\\n    if (!ns.fileExists(\\\"grow.js\\\", host.hostname)) await ns.scp(\\\"grow.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"weaken.js\\\", host.hostname)) await ns.scp(\\\"weaken.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"hack.js\\\", host.hostname)) await ns.scp(\\\"hack.js\\\", \\\"home\\\", host.hostname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let ramAllowance = host.maxRam - host.ramUsed;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 48;\\r\\n\\r\\n    if (ramOverride) {\\r\\n        if (ramOverride < 1) {\\r\\n            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0;\\r\\n            if (debug)\\r\\n                ns.tprintf(\\r\\n                    \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n                    ramFraction,\\r\\n                    ramOverride,\\r\\n                    ramAllowance\\r\\n                );\\r\\n            ramAllowance = ramFraction;\\r\\n        } else {\\r\\n            if (debug) ns.tprintf(\\\"Overriding availble host RAM max to %.2f\\\", ramOverride);\\r\\n            ramAllowance = Math.min(ramOverride, ramAllowance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", ramAllowance);\\r\\n\\r\\n    // Weaken to minimum security\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.hackDifficulty > target.minDifficulty) {\\r\\n        doWeaken(ns, host.hostname, target.hostname, ramAllowance);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldHackDifficulty = target.hackDifficulty;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\\"  Lowered Security from %.2f to %.2f\\\", oldHackDifficulty, target.hackDifficulty);\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Grow to high threshold money\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.moneyAvailable < highMoney) {\\r\\n        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldMoney = target.moneyAvailable;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\r\\n                \\\"  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)\\\",\\r\\n                target.hostname,\\r\\n                ns.nFormat(oldMoney, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n                (target.moneyAvailable / target.moneyMax) * 100,\\r\\n                target.hackDifficulty,\\r\\n                target.minDifficulty\\r\\n            );\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Hack the world\\r\\n    let tspacer = 200;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads;\\r\\n    [hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads] = calcHGWThreadsSmart(\\r\\n        ns,\\r\\n        host.hostname,\\r\\n        target.hostname,\\r\\n        ramAllowance,\\r\\n        tspacer\\r\\n    );\\r\\n    while (true) {\\r\\n        for (let i = 0; i < hgwCycles; i++) {\\r\\n            if (i !== 0) await ns.sleep(tCycleSpacer);\\r\\n            launchHGW(\\r\\n                ns,\\r\\n                host.hostname,\\r\\n                target.hostname,\\r\\n                tspacer,\\r\\n                i,\\r\\n                hackWeakenThreads,\\r\\n                growWeakenThreads,\\r\\n                hackThreads,\\r\\n                growThreads\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let sleepTimer = tweakenFullCycle - hgwCycles * tCycleSpacer + tCycleSpacer;\\r\\n        if (sleepTimer > 0) await ns.sleep(sleepTimer);\\r\\n\\r\\n        // while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname, 400, \\\"9\\\")) {\\r\\n        //     await ns.sleep(50)\\r\\n        //     if (debug) {\\r\\n        //         let oldMoney = target.moneyAvailable\\r\\n        //         let oldSec = target.hackDifficulty\\r\\n        //         target = ns.getServer(target.hostname)\\r\\n\\r\\n        //         if (oldMoney != target.moneyAvailable)\\r\\n        //             ns.tprintf(\\\"  Hack: %s available money changed from %s to %s (%.2f%% of Max)\\\",\\r\\n        //                 target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)\\r\\n\\r\\n        //         if (oldSec != target.hackDifficulty)\\r\\n        //             ns.tprintf(\\\"  Hack: %s security changed from %.2f to %.2f (min: %.2f)\\\",\\r\\n        //                 target.hostname, oldSec, target.hackDifficulty, target.minDifficulty)\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"dispatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":12,\"server\":\"home\",\"_hash\":\"5f497832fdb533ac5996f4b7912cf8234acdd40fd8e44db2c1713b86709b6b8e\",\"moduleSequenceNumber\":75540,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function calcHackRate(ns, hostname, targetname, simMinutes = 2) {\\r\\n    let env = new SuperHackEnv(ns, targetname, [hostname]);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    //ns.tprintf(\\\"Running fastSim on %s=>%s\\\", env.hostname, env.targetname)\\r\\n    let income = env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    //     env.hostname,\\r\\n    //     env.targetname,\\r\\n    //     env.ramAllowance,\\r\\n    //     ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n    // );\\r\\n\\r\\n    return income;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts()\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcHackRate(ns, host.hostname, targetname, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"super_hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys();\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n            await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n            let targetname = targetnames.shift();\\r\\n            ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n            ns.exec(attackScript, hostname, 1, targetname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///c46f9dc5-48df-4167-b8f1-8fbc6d96b036\",\"moduleSequenceNumber\":116657},{\"filename\":\"util.js\",\"url\":\"blob:file:///e49764c4-8a01-4d59-bff4-e3e600838b13\",\"moduleSequenceNumber\":116653},{\"filename\":\"eff.js\",\"url\":\"blob:file:///e93fb61c-dcb8-464e-8ce5-648a49669b09\",\"moduleSequenceNumber\":117583}],\"ramUsage\":18,\"server\":\"home\",\"_hash\":\"deca27d53fa75b3fb893f3efb941a97068eb3c26e73668b8710896e640f1781e\",\"moduleSequenceNumber\":75541,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"moduleSequenceNumber\":75542,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let favorToRep = function (f) {\\r\\n        function fma(a, b, c) {\\r\\n            return a * b + c;\\r\\n        }\\r\\n        const ex = fma(f - 1, Math.log(51.0) - Math.log(50.0), Math.log(51.0));\\r\\n        const raw = fma(500.0, Math.exp(ex), -25000.0);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    };\\r\\n\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log((r + 25000) / 25500) / Math.log(1.02) + 1;\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n\\r\\n    for (let faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(150);\\r\\n        const currentRep =\\r\\n            ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n\\r\\n        const fGain = repToFavor(currentRep);\\r\\n\\r\\n        if (favor > 150) continue;\\r\\n\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///5d3ac79f-0e5c-498e-8aab-54d5e559baf9\",\"moduleSequenceNumber\":4398}],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"04341c97a4a67c1392a728df7896aa6866c240d584c64972c20e7a19fb1bd555\",\"moduleSequenceNumber\":75543,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75705,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostName) {\\r\\n    let server = ns.getServer(hostName);\\r\\n\\r\\n    if (server.hasAdminRights) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!server.sshPortOpen && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.ftpPortOpen && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.httpPortOpen && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.smtpPortOpen && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.sqlPortOpen && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostName);\\r\\n    }\\r\\n\\r\\n    server = ns.getServer(hostName);\\r\\n    if (server.openPortCount >= server.numOpenPortsRequired) {\\r\\n        ns.nuke(hostName);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\",\"filename\":\"gsutil.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"aac5784890703b060a612aba7fa260dea62e594c9ccede0dd98309a01e30a5f3\",\"moduleSequenceNumber\":75545,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75766,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 50;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"Weaken\\\",\\r\\n    GW: \\\"Grow and Weaken\\\",\\r\\n    HW: \\\"Hack and Weaken\\\",\\r\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\r\\n};\\r\\n\\r\\nexport class HackEnv {\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostname = \\\"\\\", ramAllowance = -1, highMoney = -1, lowMoney = -1, tspacer = TSPACER) {\\r\\n        this.targetname = targetname;\\r\\n        this.hostname = hostname === \\\"\\\" ? ns.getHostname() : hostname;\\r\\n        this.ramAllowance =\\r\\n            ramAllowance === -1\\r\\n                ? ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)\\r\\n                : ramAllowance < 1\\r\\n                ? (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) * ramAllowance\\r\\n                : ramAllowance;\\r\\n        this.highMoney = highMoney === -1 ? ns.getServerMaxMoney(this.targetname) : highMoney;\\r\\n        this.lowMoney = lowMoney === -1 ? ns.getServerMaxMoney(this.targetname) * 0.5 : lowMoney;\\r\\n        this.tspacer = tspacer; // CONST\\r\\n        this.useAllRam = true;\\r\\n\\r\\n        this.cores = ns.getServer(this.hostname).cpuCores;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.ramPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    async prep(ns) {\\r\\n        if (!ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getWeakenTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getGrowTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getHackTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (debug) {\\r\\n            switch (this.state) {\\r\\n                case HackState.W:\\r\\n                    ns.tprintf(\\r\\n                        \\\"WEAKEN: %s:%s => Lowered Security from %.2f to %.2f (min: %.2f)\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns),\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.GW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Grow %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HW:\\r\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Hack %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HGW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total RAM %.2f/%.2f; Total Cycles %d/%d\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle,\\r\\n                        this.ramPerCycle * this.cycleTotal,\\r\\n                        this.cycleTotal,\\r\\n                        this.cycleMax\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                default:\\r\\n                    // Do Nothing\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    printRamOverride(ns) {\\r\\n        let maxRam = ns.getServerMaxRam(this.hostname);\\r\\n        let ramFraction = maxRam / this.ramAllowance;\\r\\n        ns.tprintf(\\r\\n            \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n            this.ramAllowance,\\r\\n            (this.ramAllowance / maxRam) * 100,\\r\\n            maxRam\\r\\n        );\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = Math.ceil(secDiff / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n\\r\\n        if (this.ramPerCycle > this.ramAllowance || this.useAllRam) {\\r\\n            this.weakenThreads = Math.floor(this.ramAllowance / this.weakenRam);\\r\\n            this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        let growThreadsFull = this.growThreads;\\r\\n        if (this.useAllRam) this.growThreads = Math.floor(this.ramAllowance / this.growRam);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        let useAllRamState = this.useAllRam;\\r\\n        this.useAllRam = true;\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n        this.useAllRam = useAllRamState;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        let setCycle = function () {\\r\\n            if (this.cycleTotal <= 0) return 0;\\r\\n            let ramCycleAllowance = Math.floor((this.ramAllowance / this.cycleTotal) * 100) / 100;\\r\\n            if (ramCycleAllowance < 16) return 0;\\r\\n\\r\\n            this.hackThreads = Math.floor(ramCycleAllowance / this.hackRam);\\r\\n            this.hackThreadStep = Math.floor(this.hackThreads * 0.01);\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.ramPerCycle =\\r\\n                this.hackThreads * this.hackRam +\\r\\n                this.growThreads * this.growRam +\\r\\n                this.weakenThreadsHack * this.weakenRam +\\r\\n                this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n            let failcycles = 0;\\r\\n\\r\\n            if (this.ramPerCycle > ramCycleAllowance) {\\r\\n                let hackThreadRam =\\r\\n                    ramCycleAllowance *\\r\\n                    (this.hackThreads /\\r\\n                        (this.hackThreads + this.growThreads + this.weakenThreadsHack + this.weakenThreadsGrow));\\r\\n                \\r\\n                this.hackThreads = Math.floor(hackThreadRam / this.hackRam) + 1\\r\\n            }\\r\\n\\r\\n            while (this.ramPerCycle > ramCycleAllowance) {\\r\\n                failcycles++;\\r\\n                this.hackThreads--;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.ramPerCycle =\\r\\n                    this.hackThreads * this.hackRam +\\r\\n                    this.growThreads * this.growRam +\\r\\n                    this.weakenThreadsHack * this.weakenRam +\\r\\n                    this.weakenThreadsGrow * this.weakenRam;\\r\\n            }\\r\\n\\r\\n            //ns.tprintf(\\\"failcycles: %d\\\", failcycles)\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            let cycleIncome = (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\r\\n\\r\\n            return cycleIncome;\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n\\r\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n        // returns 0\\r\\n        let cycleMax;\\r\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n            this.cycleTotal = cycleMax;\\r\\n            cycleIncomes[cycleMax] = setCycle();\\r\\n\\r\\n            if (cycleIncomes[cycleMax] > 0) break;\\r\\n        }\\r\\n        cycleMax++;\\r\\n\\r\\n        // find local maximum of cycleIncomes\\r\\n        // target center value,\\r\\n        //  if value to left of target is larger than target, recenter target to left of current target\\r\\n        //  if value to right of target is larger than target, recenter target to right of current target\\r\\n        //  if values to left and right of target are both less than target, keep target\\r\\n        let cycleMin = 0;\\r\\n        let cycleTarget = 0;\\r\\n        while (true) {\\r\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget - 1;\\r\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                this.cycleTotal = cycleTarget;\\r\\n                cycleIncomes[cycleTarget] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget + 1;\\r\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\r\\n                cycleMin = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\r\\n                cycleMax = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        this.cycleTotal = cycleTarget;\\r\\n        setCycle();\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreads, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, growOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsGrow, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, hackOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n            ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname, cycleOffsetTime); // hack weaken, Start 1st (0ms offset), finish 2nd\\r\\n            ns.exec(\\r\\n                WEAKENNS,\\r\\n                this.hostname,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.targetname,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime\\r\\n            ); // grow weaken, Start 2nd, finish 4th\\r\\n            ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, cycleOffsetTime + growOffsetTime); // Start 3rd, finish 3rd\\r\\n            ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, cycleOffsetTime + hackOffsetTime); // Start 4th, finish 1st\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        let ps = ns.ps(this.hostname);\\r\\n        for (let psInfo of ps) {\\r\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n}\",\"filename\":\"hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"0dea34f2d6d06431e687275b137a68bb85f33bfef2f2f76bf97673dded4cc3f0\",\"moduleSequenceNumber\":75547,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack_me.js\",\"url\":\"blob:file:///3e3f1a7a-ad1b-4eab-8bb8-da836063a816\",\"moduleSequenceNumber\":1533}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":75548,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, allHosts } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n    for (let hostname of allHosts()) {\\r\\n        if (hostname === \\\"home\\\") continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n\\tfor (let ps of ns.ps(\\\"home\\\")) {\\r\\n\\t\\tif (ps.filename === \\\"ka.js\\\" || ps.filename === \\\"clock.js\\\")\\r\\n\\t\\t\\tcontinue\\r\\n    \\tns.kill(ps.pid)\\r\\n\\t}\\r\\n}\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"ka.js\",\"url\":\"blob:file:///ebee3a98-03a1-4c59-9c67-711a4761cef4\"}],\"ramUsage\":3,\"server\":\"home\",\"_hash\":\"c40b1517138d1fdaecb947feb5f5efdce507af5e0d6ea51141442ab63b12abc5\",\"moduleSequenceNumber\":75767,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    filenames.map(function (name) {\\r\\n        if (name.length > maxFileLength) maxFileLength = name.length;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s [RAM: %5.2fGB] %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///b60120a0-e195-43ac-98bc-bb9472b139ef\",\"moduleSequenceNumber\":1400}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"moduleSequenceNumber\":75550,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts, doBuyAndSoftenAll } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    if (stats.agility_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_exp_mult\\\", stats.agility_exp_mult);\\r\\n    if (stats.agility_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_mult\\\", stats.agility_mult);\\r\\n    if (stats.bladeburner_analysis_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_analysis_mult\\\", stats.bladeburner_analysis_mult);\\r\\n    if (stats.bladeburner_max_stamina_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_max_stamina_mult\\\", stats.bladeburner_max_stamina_mult);\\r\\n    if (stats.bladeburner_stamina_gain_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_stamina_gain_mult\\\", stats.bladeburner_stamina_gain_mult);\\r\\n    if (stats.bladeburner_success_chance_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_success_chance_mult\\\", stats.bladeburner_success_chance_mult);\\r\\n    if (stats.charisma_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_exp_mult\\\", stats.charisma_exp_mult);\\r\\n    if (stats.charisma_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_mult\\\", stats.charisma_mult);\\r\\n    if (stats.company_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"company_rep_mult\\\", stats.company_rep_mult);\\r\\n    if (stats.crime_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_money_mult\\\", stats.crime_money_mult);\\r\\n    if (stats.crime_success_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_success_mult\\\", stats.crime_success_mult);\\r\\n    if (stats.defense_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_exp_mult\\\", stats.defense_exp_mult);\\r\\n    if (stats.defense_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_mult\\\", stats.defense_mult);\\r\\n    if (stats.dexterity_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_exp_mult\\\", stats.dexterity_exp_mult);\\r\\n    if (stats.dexterity_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_mult\\\", stats.dexterity_mult);\\r\\n    if (stats.faction_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"faction_rep_mult\\\", stats.faction_rep_mult);\\r\\n    if (stats.hacking_chance_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_chance_mult\\\", stats.hacking_chance_mult);\\r\\n    if (stats.hacking_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_exp_mult\\\", stats.hacking_exp_mult);\\r\\n    if (stats.hacking_grow_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_grow_mult\\\", stats.hacking_grow_mult);\\r\\n    if (stats.hacking_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_money_mult\\\", stats.hacking_money_mult);\\r\\n    if (stats.hacking_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_mult\\\", stats.hacking_mult);\\r\\n    if (stats.hacking_speed_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_speed_mult\\\", stats.hacking_speed_mult);\\r\\n    if (stats.hacknet_node_core_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_core_cost_mult\\\", stats.hacknet_node_core_cost_mult);\\r\\n    if (stats.hacknet_node_level_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_level_cost_mult\\\", stats.hacknet_node_level_cost_mult);\\r\\n    if (stats.hacknet_node_money_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_money_mult\\\", stats.hacknet_node_money_mult);\\r\\n    if (stats.hacknet_node_purchase_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_purchase_cost_mult\\\", stats.hacknet_node_purchase_cost_mult);\\r\\n    if (stats.hacknet_node_ram_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_ram_cost_mult\\\", stats.hacknet_node_ram_cost_mult);\\r\\n    if (stats.strength_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_exp_mult\\\", stats.strength_exp_mult);\\r\\n    if (stats.strength_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_mult\\\", stats.strength_mult);\\r\\n    if (stats.work_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"work_money_mult\\\", stats.work_money_mult);\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = ns.getFactionRep(faction) >= this.rep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n            ? \\\"OWNED\\\"\\r\\n            : this.purchaseable\\r\\n            ? \\\"PURCHASEABLE\\\"\\r\\n            : \\\"\\\";\\r\\n        this.str = `${this.faction}: ${this.name} - ${ns.nFormat(this.price, \\\"$0.000a\\\")} [${ns.nFormat(\\r\\n            this.rep,\\r\\n            \\\"0.000a\\\"\\r\\n        )}] ${installedStr}`;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        return true;\\r\\n        if (this.stats.company_rep_mult) return true;\\r\\n        if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" || this.name === \\\"CashRoot Starter Kit\\\" || this.name === \\\"PCMatrix\\\")\\r\\n            return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    doBuyAndSoftenAll();\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n    let incomePerSec = player.money / (player.playtimeSinceLastAug / 1000);\\r\\n\\r\\n    ns.tprintf(`Income: ${ns.nFormat(incomePerSec, \\\"$0.000a\\\")}/s`);\\r\\n\\r\\n    let allFactions = [\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"The Covenant\\\",\\r\\n        \\\"ECorp\\\",\\r\\n        \\\"MegaCorp\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"Clarke Incorporated\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Four Sigma\\\",\\r\\n        \\\"KuaiGong International\\\",\\r\\n        \\\"Fulcrum Secret Technologies\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Sector-12\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"Speakers for the Dead\\\",\\r\\n        \\\"The Dark Army\\\",\\r\\n        \\\"The Syndicate\\\",\\r\\n        \\\"Silhouette\\\",\\r\\n        \\\"Tetrads\\\",\\r\\n        \\\"Slum Snakes\\\",\\r\\n        \\\"Netburners\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"CyberSec\\\",\\r\\n        // \\\"Bladeburners\\\",\\r\\n        // \\\"Church of the Machine God\\\"\\r\\n    ];\\r\\n\\r\\n    let checkFactions = player.factions.concat(ns.checkFactionInvitations())\\r\\n    let sortedFactions = checkFactions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    //let sortedFactions = allFactions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n\\r\\n    let allPurchaseableAugs = [];\\r\\n    for (let faction of sortedFactions) {\\r\\n    //for (let faction of allFactions) {\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, ns.getFactionRep(faction));\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n\\r\\n    for (let aug of allPurchaseableAugs) {\\r\\n        if (ns.args[0])\\r\\n            ns.purchaseAugmentation(aug.faction, aug.name)\\r\\n        ns.tprintf(\\\"%s\\\", aug);\\r\\n    }\\r\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///e146edb2-92e8-4260-8bb1-aa56b2b9cebc\"}],\"ramUsage\":46.9,\"server\":\"home\",\"_hash\":\"24a0c053112b9a248482866c6633bf845edd1ac3d9f8a884d354e5c1d86e2369\",\"moduleSequenceNumber\":75942,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    ns.tprintf(\\\"HELLO PUSHER #3\\\");\\r\\n}\",\"filename\":\"pusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"1cf7271a574913b375ae86f15f8c0f6d35f1bca22e0a039b2bddb19a6ffe39fc\",\"moduleSequenceNumber\":75552,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, mapHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    for (const hostName of allHosts()) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    await doBackdoors(ns);\\r\\n}\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///ddd41388-fefd-42c8-9ca8-8171c394b599\"}],\"ramUsage\":8.4,\"server\":\"home\",\"_hash\":\"0970d4484663f0afa74b5cbdf735a0acd1a80d1fe0f7c8d5d58a92513dd4d0a2\",\"moduleSequenceNumber\":75553,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer, serverIsHackable, serverMaxMoneySortDesc, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hostnames = allHosts();\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    let hackableHosts = hostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0)\\r\\n        .sort(serverMaxMoneySortDesc);\\r\\n    let rootHostsNoPurchased = hostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => (hostname.indexOf(\\\"pserv\\\") === -1 && hostname !== \\\"home\\\"));\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.js\\\", \\\"home\\\");\\r\\n\\r\\n    let roundRobin = 0;\\r\\n    for (const hostname of rootHostsNoPurchased) {\\r\\n        let execMaxArgs = [\\\"hack_me.js\\\", hostname, hackableHosts[roundRobin % hackableHosts.length]];\\r\\n        ns.tprintf(\\\"%s %s %s\\\", \\\"exec_maxjns\\\", \\\"home\\\", execMaxArgs.toString());\\r\\n\\r\\n        while (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") < ns.getScriptRam(\\\"exec_max.js\\\"))\\r\\n            await ns.sleep(500);\\r\\n\\r\\n        ns.exec(\\\"exec_maxjns\\\", \\\"home\\\", 1, ...execMaxArgs);\\r\\n        roundRobin += 1;\\r\\n    }\\r\\n\\r\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n    let ramSlice = homeRam / hackableHosts.length;\\r\\n    let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam);\\r\\n\\r\\n    if (hackMeHomeThreads <= 0) return;\\r\\n    for (const hostName of hackableHosts) {\\r\\n        ns.exec(\\\"hack_me.js\\\", \\\"home\\\", 1, hostName, ramSlice);\\r\\n    }\\r\\n}\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///03f54a7c-0c10-4fa3-a059-7a9733c9774c\",\"moduleSequenceNumber\":1521},{\"filename\":\"starter.js\",\"url\":\"blob:file:///14c5a908-7133-4001-bc5f-af8461b2566d\",\"moduleSequenceNumber\":1529}],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"1c52e2e782f18832fed1d8c762765990cfb35fb902803f608e7718213e8ab3ad\",\"moduleSequenceNumber\":75554,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nconst debug = false;\\r\\n\\r\\n// TODO: Manage multiple target/host combos from a single manager\\r\\n// TODO: Incorporate sim into deciding to use GW/HW vs HGW\\r\\n// TODO: Incorporate eff's bucket/target search algorithm\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!ns.args[0]) {\\r\\n        ns.tprintf(\\\"ERROR: No target server defined\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new SuperHackEnv(ns, ns.args[0], [ns.getHostname()]);\\r\\n    await env.init(ns);\\r\\n\\r\\n    if (debug) env.printRamOverride(ns);\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", env.ramAllowance);\\r\\n\\r\\n    env.simEnabled = false;\\r\\n    if (env.simEnabled) {\\r\\n        while (env.simTime < 1000 * 60 * 2) {\\r\\n            env.refresh(ns);\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"Time Elapsed: %s; Income %s | %s/s\\\",\\r\\n            ns.tFormat(env.simTime),\\r\\n            ns.nFormat(env.simIncome, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n        );\\r\\n    } else {\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(2000);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///c46f9dc5-48df-4167-b8f1-8fbc6d96b036\",\"moduleSequenceNumber\":680},{\"filename\":\"super_hack_adv.js\",\"url\":\"blob:file:///871a5b58-18d2-4dca-9216-879723f10b91\",\"moduleSequenceNumber\":3995}],\"ramUsage\":13.2,\"server\":\"home\",\"_hash\":\"4cdcb47e9e9f525919d63cc1a6707c5cfa70e6b10aa8c212fa06a2989b57dd02\",\"moduleSequenceNumber\":75555,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (ns.getPlayer().numPeopleKilled < 30) {\\r\\n        await ns.sleep(ns.commitCrime(\\\"homicide\\\") + 200)\\r\\n    }\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///db33d1e4-4a66-472e-ba6f-0a9ad1fd1fc6\"}],\"ramUsage\":7.1,\"server\":\"home\",\"_hash\":\"fcd9ca7533b2b3d20ef0f0c7d9b24ad45e45a7ddd188fbfcb6bdd03d81a93862\",\"moduleSequenceNumber\":77931,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns;\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts() {\\r\\n    return Object.keys(mapHosts());\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortDesc(a, b) {\\r\\n    return ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a)\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortAsc(a, b) {\\r\\n    return ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b)\\r\\n}\\r\\n\\r\\nexport function doProgramBuys() {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\n\\r\\nexport function doBuyAndSoftenAll() {\\r\\n    doProgramBuys()\\r\\n    for (const hostname of allHosts()) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function cleanLogs() {\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n    ns.disableLog(\\\"exec\\\")\\r\\n    ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    ns.disableLog(\\\"scan\\\")\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"eb9b09f1f42974716f082472001c2b71b905feeca87d0a31227a04f4a271ce3e\",\"moduleSequenceNumber\":75557,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75643,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, canExecuteOnServer, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nfunction calcIncome(ns, target, allHostnames, simMinutes = 2) {\\r\\n    return new SuperHackEnv(ns, target, allHostnames.filter(canExecuteOnServer)).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n\\r\\n    let orderedTargetArr = allHostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((x) => ns.getServerMaxMoney(x) > 1)\\r\\n        .map((x) => [x, calcIncome(ns, x, allHostnames, ns.args[0])])\\r\\n        .sort((a, b) => b[1] - a[1]);\\r\\n\\r\\n    for (const [target, income] of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", target, ns.nFormat(income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n\\r\\n    if (ns.args[1]) {\\r\\n\\r\\n        let env = new SuperHackEnv(ns, orderedTargetArr[0][0], allHostnames.filter(canExecuteOnServer));\\r\\n        //let env = new SuperHackEnv(ns, orderedTargetArr[0][0], [\\\"home\\\"])\\r\\n        await env.init(ns);\\r\\n\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(2000);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"solo.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///accf1dbc-8687-4052-894c-1a0585de623d\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"solo.js\",\"url\":\"blob:file:///d663ec76-4723-41fb-b064-d5f36c4bfa16\"}],\"ramUsage\":13.6,\"server\":\"home\",\"_hash\":\"6b542b58223b4cf656b8a9886014f79e882c6066ffbf6b7a3e43c35981b4e645\",\"moduleSequenceNumber\":75600,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { setns, doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n}\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///af963e1c-9d27-47a3-a503-55d3a756ff68\"},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///497b890c-2a12-4bcb-a0e7-08d4ad462a98\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"moduleSequenceNumber\":75822,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 100;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"W\\\",\\r\\n    GW: \\\"GW\\\",\\r\\n    HW: \\\"HW\\\",\\r\\n    HGW: \\\"HGW\\\",\\r\\n};\\r\\n\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction stdFormat(ns, offset = 0, showms = true) {\\r\\n    let date = new Date(new Date().getTime() + offset);\\r\\n\\r\\n    if (showms) {\\r\\n        let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    } else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Host {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.maxThreads = Math.floor(\\r\\n            (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) / this.threadSize\\r\\n        );\\r\\n        this.reservedScriptCalls = [];\\r\\n\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            let homeram = ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n\\r\\n    getReservedThreadCount() {\\r\\n        let reservedThreadCount = 0;\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            reservedThreadCount += scriptCall.threads;\\r\\n        }\\r\\n\\r\\n        return reservedThreadCount;\\r\\n    }\\r\\n\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, offset: offset });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    tryReserveThreadsExtended(ns, script, threads, args) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, args: args });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    executeScripts(ns, target) {\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            if (\\\"args\\\" in scriptCall) ns.exec(scriptCall.script, this.hostname, scriptCall.threads, ...scriptCall.args);\\r\\n            else ns.exec(scriptCall.script, this.hostname, scriptCall.threads, target, scriptCall.offset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class SuperHackEnv {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n\\r\\n        this.cores = 1; // Simplify\\r\\n\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n\\r\\n        this.updateHosts(ns, hostnames);\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n\\r\\n        // Debug Info\\r\\n        this.bst = Date.now();\\r\\n        this.currentTime = this.bst;\\r\\n        this.batchID = 0;\\r\\n        this.dataFile = false ? `${this.bst}_${this.targetname}.txt` : false;\\r\\n    }\\r\\n\\r\\n    updateHosts(ns, hostnames) {\\r\\n        if (hostnames)\\r\\n            this.hosts = hostnames\\r\\n                .map((x) => new Host(ns, x, this.threadSize), this)\\r\\n                .filter((x) => x.maxThreads > 0)\\r\\n                .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n\\r\\n        this.maxThreads = 0;\\r\\n        this.hosts.map((x) => (this.maxThreads += x.maxThreads), this);\\r\\n\\r\\n        // if (debug) {\\r\\n        //     ns.print(ns.sprintf(\\\"Max Threads: %d\\\", this.maxThreads));\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) await host.prep(ns, force);\\r\\n\\r\\n        if (this.dataFile) {\\r\\n            await ns.write(\\r\\n                this.dataFile,\\r\\n                \\\"Target Name, UID, Batch ID, Offset Time, Start Time, \\\" +\\r\\n                    \\\"End Time, Operation Time, Real Time Start, Real Time End, \\\" +\\r\\n                    \\\"Real Time Operation, Diff, Exp Gain\\\\n\\\",\\r\\n                \\\"w\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getHackTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s WEAKEN: %s => Lowered Security from %.2f to %.2f (min: %.2f); Total Threads %s\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns) ? this.getServerSecurityLevel(ns) : 0,\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                            ? ns.getServerMinSecurityLevel(this.targetname)\\r\\n                            : 0,\\r\\n                        this.threadsPerCycle\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s GROW-WEAKEN: %s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s HACK-WEAKEN: %s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s HACK-GROW-WEAKEN: %s => Cycle Complete; %s Available; Hacked %s/%s (%.2f%%/%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        ((this.hackTotal * this.cycleTotal) / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            default:\\r\\n                // Do Nothing\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) + 100 >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = this.maxThreads;\\r\\n\\r\\n        this.threadsPerCycle = this.weakenThreads;\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        let growThreadsFull = this.calcGrowThreads(ns);\\r\\n        this.growThreads = this.maxThreads;\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n        let setCycle = function (cycleTotal) {\\r\\n            if (cycleTotal <= 0) return [0, 0, 0, Number.MAX_VALUE, 0, 0, 0, 0, 0];\\r\\n            this.cycleTotal = cycleTotal;\\r\\n            let cycleThreadAllowance = Math.floor((this.maxThreads / this.cycleTotal) * 100) / 100;\\r\\n\\r\\n            this.hackThreads = cycleThreadAllowance;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.threadsPerCycle =\\r\\n                this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n            // attempt to estimate the optimal number of hack threads by reducing the hack thread count\\r\\n            // by the current ratio of hack threads to grow + weaken threads. Overestimate a little bit\\r\\n            // and let the reducer take care of the extra.\\r\\n            // if (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n            //     this.hackThreads = cycleThreadAllowance * (this.hackThreads / this.threadsPerCycle);\\r\\n            // }\\r\\n\\r\\n            while (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n                this.hackThreads--;\\r\\n\\r\\n                if (this.hackThreads <= 0) return [0, 0, 0, Number.MAX_VALUE];\\r\\n\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.threadsPerCycle =\\r\\n                    this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n            }\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            return [\\r\\n                (this.hackTotal * this.cycleTotal) / this.cycleBatchTime,\\r\\n                this.hackTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleBatchTime,\\r\\n                this.threadsPerCycle,\\r\\n                cycleThreadAllowance,\\r\\n                this.hackThreads,\\r\\n                cycleThreadAllowance * (this.hackThreads / this.threadsPerCycle),\\r\\n            ];\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n        let cycleTarget = 0;\\r\\n\\r\\n        if (true) {\\r\\n            // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n            // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n            // returns 0\\r\\n            let cycleMax;\\r\\n            for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n                cycleIncomes[cycleMax] = setCycle(cycleMax);\\r\\n\\r\\n                if (cycleIncomes[cycleMax][0] > 0) break;\\r\\n            }\\r\\n            cycleMax++;\\r\\n\\r\\n            // find local maximum of cycleIncomes\\r\\n            // target center value,\\r\\n            //  if value to left of target is larger than target, recenter target to left of current target\\r\\n            //  if value to right of target is larger than target, recenter target to right of current target\\r\\n            //  if values to left and right of target are both less than target, keep target\\r\\n            let cycleMin = 0;\\r\\n            while (true) {\\r\\n                cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n                if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n                if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                    cycleIncomes[cycleTarget - 1] = setCycle(cycleTarget - 1);\\r\\n                }\\r\\n                if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                    cycleIncomes[cycleTarget] = setCycle(cycleTarget);\\r\\n                }\\r\\n                if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                    cycleIncomes[cycleTarget + 1] = setCycle(cycleTarget + 1);\\r\\n                }\\r\\n\\r\\n                if (cycleIncomes[cycleTarget][0] < cycleIncomes[cycleTarget + 1][0]) {\\r\\n                    cycleMin = cycleTarget;\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (cycleIncomes[cycleTarget][0] < cycleIncomes[cycleTarget - 1][0]) {\\r\\n                    cycleMax = cycleTarget;\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                break;\\r\\n            }\\r\\n        } else {\\r\\n            for (let cycle = 0; cycle < cycleIncomes.length; cycle++) {\\r\\n                cycleIncomes[cycle] = setCycle(cycle);\\r\\n            }\\r\\n\\r\\n            cycleTarget = cycleIncomes.sort((a, b) => b[0] - a[0])[0][2];\\r\\n        }\\r\\n\\r\\n        setCycle(cycleTarget);\\r\\n\\r\\n        // for (let cycle = 0; cycle < cycleIncomes.length; cycle++) {\\r\\n        //     if (cycleIncomes[cycle] !== undefined && cycleIncomes[cycle][0] > 0) {\\r\\n        //         let hackPercent = (cycleIncomes[cycle][1] / this.highMoney) * 100;\\r\\n        //         let totalHackPercent = hackPercent * cycle;\\r\\n        //         ns.tprintf(\\r\\n        //             \\\"%s => Cycle: %d --- Income: %s/s, Total: %s | %.2f%% | %.2f%%, Threads: %d | %d | %d (%d/%d), Hack Threads %d | est %s %s\\\",\\r\\n        //             this.targetname,\\r\\n        //             cycle,\\r\\n        //             ns.nFormat(cycleIncomes[cycle][0], \\\"($0.000a)\\\"),\\r\\n        //             ns.nFormat(cycleIncomes[cycle][1], \\\"($0.000a)\\\"),\\r\\n        //             hackPercent,\\r\\n        //             totalHackPercent,\\r\\n        //             cycleIncomes[cycle][4],\\r\\n        //             cycleIncomes[cycle][4] * cycle,\\r\\n        //             this.maxThreads,\\r\\n        //             cycleIncomes[cycle][5],\\r\\n        //             cycleIncomes[cycle][5] * cycle,\\r\\n        //             cycleIncomes[cycle][6],\\r\\n        //             cycleIncomes[cycle][7],\\r\\n        //             (cycle === cycleTarget)?\\\"WINNER\\\":\\\"\\\"\\r\\n        //         );\\r\\n        //     } else ns.tprintf(`${this.targetname} => Cycle: ${cycle} --- XX`);\\r\\n        // }\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    reserveThreadsForExecution(ns, script, threads, offset = 0) {\\r\\n        let unallocatedThreads = threads;\\r\\n        for (const host of this.hosts) {\\r\\n            unallocatedThreads -= host.tryReserveThreads(ns, script, unallocatedThreads, offset);\\r\\n            if (unallocatedThreads === 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", threads - unallocatedThreads, threads, script)\\r\\n        );\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    reserveCycle(ns, cycleOffsetTime, batchID) {\\r\\n        // Target Name, UID, Batch ID, Offset Time, Start Time, End Time, Operation Time, Real Time Start, Real Time End, Real Time Operation, Diff, Exp Gain\\r\\n        let weakenHackOffsetTime = 0;\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        let weakenArgsHack = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + weakenHackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + weakenHackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.weakenTime + weakenHackOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"0WH\\\",\\r\\n        ];\\r\\n\\r\\n        let weakenArgsGrow = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + weakenGrowOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + weakenGrowOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.weakenTime + weakenGrowOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"1WG\\\",\\r\\n        ];\\r\\n\\r\\n        let growArgs = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + growOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + growOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.growTime + growOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"2G\\\",\\r\\n        ];\\r\\n\\r\\n        let hackArgs = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + hackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + hackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.hackTime + hackOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"3H\\\",\\r\\n        ];\\r\\n\\r\\n        let totalThreads = this.weakenThreadsHack + this.weakenThreadsGrow + this.hackThreads + this.growThreads;\\r\\n        let whReserved = false;\\r\\n        let wgReserved = false;\\r\\n        let hReserved = false;\\r\\n        let gReserved = false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let freeThreads = host.maxThreads - host.getReservedThreadCount();\\r\\n            if (!whReserved && freeThreads >= this.weakenThreadsHack) {\\r\\n                freeThreads -= this.weakenThreadsHack;\\r\\n                whReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!wgReserved && freeThreads >= this.weakenThreadsGrow) {\\r\\n                freeThreads -= this.weakenThreadsGrow;\\r\\n                wgReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!hReserved && freeThreads >= this.hackThreads) {\\r\\n                freeThreads -= this.hackThreads;\\r\\n                hReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!gReserved && freeThreads >= this.growThreads) {\\r\\n                freeThreads -= this.growThreads;\\r\\n                gReserved = true;\\r\\n            }\\r\\n\\r\\n            if (whReserved && wgReserved && hReserved && gReserved) break;\\r\\n        }\\r\\n\\r\\n        if (!whReserved || !wgReserved || !hReserved || !gReserved) return false;\\r\\n\\r\\n        whReserved = false;\\r\\n        wgReserved = false;\\r\\n        hReserved = false;\\r\\n        gReserved = false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let freeThreads = host.maxThreads - host.getReservedThreadCount();\\r\\n            if (!whReserved && freeThreads >= this.weakenThreadsHack) {\\r\\n                weakenArgsHack[8] = weakenArgsHack[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, WEAKENNS, this.weakenThreadsHack, weakenArgsHack);\\r\\n                freeThreads -= this.weakenThreadsHack;\\r\\n                whReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!wgReserved && freeThreads >= this.weakenThreadsGrow) {\\r\\n                weakenArgsGrow[8] = weakenArgsGrow[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, WEAKENNS, this.weakenThreadsGrow, weakenArgsGrow);\\r\\n                freeThreads -= this.weakenThreadsGrow;\\r\\n                wgReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!hReserved && freeThreads >= this.hackThreads) {\\r\\n                hackArgs[8] = hackArgs[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, HACKNS, this.hackThreads, hackArgs);\\r\\n                freeThreads -= this.hackThreads;\\r\\n                hReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!gReserved && freeThreads >= this.growThreads) {\\r\\n                growArgs[8] = growArgs[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, GROWNS, this.growThreads, growArgs);\\r\\n                freeThreads -= this.growThreads;\\r\\n                gReserved = true;\\r\\n            }\\r\\n\\r\\n            if (whReserved && wgReserved && hReserved && gReserved) break;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    execute(ns) {\\r\\n        for (const host of this.hosts) {\\r\\n            host.executeScripts(ns, this.targetname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            ns.print(ns.sprintf(\\\"WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true)));\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state\\r\\n        ]);\\r\\n\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreads);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s WEAKEN: %s => Weaken %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.weakenThreads,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            ns.print(ns.sprintf(\\\"GROW-WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true)));\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state\\r\\n        ]);\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, growOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsGrow);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s GROW-WEAKEN: %s => Grow %d; Weaken %d; Total Threads %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.growThreads,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.threadsPerCycle,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"HACK-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                    ns.tFormat(this.simTime, true),\\r\\n                    ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n                )\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state\\r\\n        ]);\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, hackOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-WEAKEN: %s => Hack %d; Weaken %d; Total Threads %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.weakenThreadsHack,\\r\\n                this.threadsPerCycle,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime + this.tspacer;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"HACK-GROW-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                    ns.tFormat(this.simTime, true),\\r\\n                    ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n                )\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (true) {\\r\\n            this.currentTime = Date.now() - this.bst;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n                this.reserveCycle(ns, cycleOffsetTime, this.batchID++);\\r\\n            }\\r\\n        } else {\\r\\n            let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n            let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n            let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n            for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n                let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n                this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack, cycleOffsetTime);\\r\\n                this.reserveThreadsForExecution(\\r\\n                    ns,\\r\\n                    WEAKENNS,\\r\\n                    this.weakenThreadsGrow,\\r\\n                    cycleOffsetTime + weakenGrowOffsetTime\\r\\n                );\\r\\n                this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, cycleOffsetTime + hackOffsetTime);\\r\\n                this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, cycleOffsetTime + growOffsetTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.cycleBatchTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state\\r\\n        ]);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d/%d; Total Cycles %d/%d; Time +%s:+%s [%s:%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.growThreads,\\r\\n                this.weakenThreadsHack,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.threadsPerCycle,\\r\\n                this.threadsPerCycle * this.cycleTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleMax,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stFormat(ns, this.cycleBatchTime),\\r\\n                stdFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.cycleBatchTime)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let ps = ns.ps(host.hostname);\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                    return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n\\r\\n    optimalHackPercent(ns) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        this.simTarget.moneyAvailable = this.simTarget.moneyMax;\\r\\n        this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n        this.updateForHGW(ns);\\r\\n\\r\\n        return this.hackTotal / ns.getServerMaxMoney(this.targetname);\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13.2,\"server\":\"home\",\"_hash\":\"88659dafb63fbc677d8e063df21ff44f0169cf78f669e0497142a164901ca544\",\"moduleSequenceNumber\":75561,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    // do full weaken\\r\\n\\r\\n    // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n\\r\\n    let hackScript = \\\"hack.js\\\";\\r\\n    let weakenScript = \\\"weaken.js\\\";\\r\\n    let targetname = \\\"n00dles\\\";\\r\\n    let hostname = \\\"home\\\";\\r\\n    let hostRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n    if (hostname === \\\"home\\\") {\\r\\n        hostRam -= 64;\\r\\n    }\\r\\n    let hostCores = ns.getServer(hostname).cores;\\r\\n    let hackRam = ns.getScriptRam(hackScript);\\r\\n    let weakenRam = ns.getScriptRam(weakenScript);\\r\\n    let startTime = ns.getTimeSinceLastAug();\\r\\n\\r\\n    while (ns.getServerSecurityLevel(targetname) - 0.1 > ns.getServerMinSecurityLevel(targetname)) {\\r\\n        while (ns.scriptRunning(weakenScript, hostname)) {\\r\\n            await ns.sleep(20);\\r\\n        }\\r\\n\\r\\n        let weakenThreads = Math.floor(hostRam / weakenRam);\\r\\n        ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        let curTime = ns.getTimeSinceLastAug() - startTime;\\r\\n        ns.print(`${curTime}: Weakening on ${weakenThreads} threads`);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        while (ns.scriptRunning(weakenScript, hostname)) {\\r\\n            await ns.sleep(20);\\r\\n        }\\r\\n\\r\\n        // Hack Info\\r\\n        let hackThreads = Math.floor(hostRam / hackRam);\\r\\n        let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        let weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n        let weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n\\r\\n        while (hackRamCycle > hostRam) {\\r\\n            hackThreads--;\\r\\n            hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n            weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n            hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n        }\\r\\n\\r\\n        ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.exec(hackScript, hostname, hackThreads, targetname);\\r\\n        let curTime = ns.getTimeSinceLastAug() - startTime;\\r\\n        ns.print(`${curTime}: Hacking on ${hackThreads}/${weakenThreads} threads`);\\r\\n    }\\r\\n}\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///ca6973b8-e85c-46f2-b8b6-fd0e99539b59\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///54148373-0464-423a-8c7f-a00f415fa95f\"},{\"filename\":\"exp.js\",\"url\":\"blob:file:///ba693b0a-cf82-4e17-aa46-41e86d371556\"}],\"ramUsage\":14.25,\"server\":\"home\",\"_hash\":\"92d02ffdfff9ba71bbf66c1547499d3e29a3e4e5ecae8b181c6d55f62fa3239b\",\"moduleSequenceNumber\":75562,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nvar DEBUG_OUTPUT = false;\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    // do full weaken\\r\\n\\r\\n    // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n\\r\\n    const hackScript = \\\"hack.js\\\";\\r\\n    const growScript = \\\"grow.js\\\";\\r\\n    const weakenScript = \\\"weaken.js\\\";\\r\\n    const targetname = ns.args[0];\\r\\n    const hostname = \\\"home\\\";\\r\\n    const hostCores = ns.getServer(hostname).cores;\\r\\n    const hackRam = ns.getScriptRam(hackScript);\\r\\n    const growRam = ns.getScriptRam(growScript);\\r\\n    const weakenRam = ns.getScriptRam(weakenScript);\\r\\n    const tspacer = 50;\\r\\n\\r\\n    let hostRam = ns.getServerMaxRam(hostname);\\r\\n    if (hostname === \\\"home\\\") {\\r\\n        hostRam -= 64;\\r\\n    }\\r\\n\\r\\n    let hostRamAvailable = function () {\\r\\n        return hostRam - ns.getServerUsedRam(hostname);\\r\\n    };\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: Attacking ${targetname}`);\\r\\n\\r\\n    // Full Weaken\\r\\n    while (ns.getServerSecurityLevel(targetname) - 0.1 > ns.getServerMinSecurityLevel(targetname)) {\\r\\n        let weakenThreads = Math.floor(hostRamAvailable() / weakenRam);\\r\\n\\r\\n        let waitPID = ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.print(\\r\\n            `${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ` +\\r\\n                `Weakening on ${weakenThreads} threads for ${ns.tFormat(ns.getWeakenTime(targetname))}`\\r\\n        );\\r\\n\\r\\n        while (ns.getRunningScript(waitPID)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ${targetname} fully weakened`);\\r\\n\\r\\n    // Full Grow\\r\\n    while (ns.getServerMoneyAvailable(targetname) + 1000 < ns.getServerMaxMoney(targetname)) {\\r\\n        const weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n\\r\\n        let growThreads = Math.floor(hostRamAvailable() / growRam);\\r\\n        let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n\\r\\n        let weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let cycleRam = growThreads * growRam + weakenThreads * weakenRam;\\r\\n\\r\\n        while (cycleRam > hostRamAvailable()) {\\r\\n            growThreads--;\\r\\n            growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n            weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n            cycleRam = growThreads * growRam + weakenThreads * weakenRam;\\r\\n        }\\r\\n\\r\\n        ns.print(\\r\\n            `${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ` +\\r\\n                `Growing on ${growThreads}/${weakenThreads} threads ` +\\r\\n                `for ${ns.tFormat(ns.getWeakenTime(targetname))}`\\r\\n        );\\r\\n\\r\\n        let waitPID = ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.exec(growScript, hostname, growThreads, targetname);\\r\\n\\r\\n        while (ns.getRunningScript(waitPID)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ${targetname} available money maxed out`);\\r\\n\\r\\n    let bst = Date.now();\\r\\n    const dataOut = `${bst}_${targetname}.txt`;\\r\\n\\r\\n    if (DEBUG_OUTPUT) {\\r\\n        await ns.write(\\r\\n            dataOut,\\r\\n            \\\"Target Name, UID, Batch ID, Offset Time, Start Time, End Time, Operation Time, Real Time Start, Real Time End, Real Time Operation, Diff, Exp Gain\\\\n\\\",\\r\\n            \\\"w\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // return true if no processes are finishing within startbuf and endbuf\\r\\n    let isProcessStartSafe = function (ps, startbuf, endbuf) {\\r\\n        for (const processInfo of ps) {\\r\\n            let psEndTime = processInfo.args[3];\\r\\n            if (psEndTime > startbuf && psEndTime < endbuf) return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    };\\r\\n\\r\\n    let env = new SuperHackEnv(ns, targetname, [hostname]);\\r\\n    let optimalHackPercent = env.optimalHackPercent(ns);\\r\\n    let optimalLevelCheck = ns.getPlayer().hacking;\\r\\n    const optimalTimerReset = 30 * 1000;\\r\\n    let optimalTimer = optimalTimerReset;\\r\\n    let batchID = 0;\\r\\n    const batchSleep = 20;\\r\\n    // BATCH!\\r\\n    while (true) {\\r\\n        await ns.sleep(batchSleep);\\r\\n\\r\\n        if ((optimalTimer -= batchSleep <= 0)) {\\r\\n            optimalTimer = optimalTimerReset;\\r\\n            if (optimalLevelCheck != ns.getPlayer().hacking) {\\r\\n                optimalLevelCheck = ns.getPlayer().hacking;\\r\\n                optimalHackPercent = env.optimalHackPercent(ns);\\r\\n                ns.print(`Optimal Hack Percent set to ${(optimalHackPercent * 100).toFixed(2)}%`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let currentTime = Date.now() - bst;\\r\\n\\r\\n        // collect all running HGW threads\\r\\n        let ps = ns.ps(hostname);\\r\\n\\r\\n        // if any processes are going to finish in the next 150 ms, wait 150 ms and try again\\r\\n        if (!isProcessStartSafe(ps, currentTime, currentTime + 150)) continue;\\r\\n\\r\\n        // The state of the player when both weakens are called (in the next 0 and 50 ms) should not change,\\r\\n        // so getting weaken time unmodified should be fine\\r\\n        let weakenTime = Math.ceil(ns.getWeakenTime(targetname));\\r\\n        let weakenHackOffsetTime = 0;\\r\\n        let weakenGrowOffsetTime = tspacer * 2;\\r\\n\\r\\n        // If any ps are finishing between weakenTime - tspacer * 2 and weakenTime + tspacer * 3, wait 200ms and try again\\r\\n        // since this cycle's finish time will collide with a running cycle\\r\\n        if (!isProcessStartSafe(ps, currentTime + weakenTime - tspacer * 2, currentTime + weakenTime + tspacer * 3))\\r\\n            continue;\\r\\n\\r\\n        // calculate grow time when grow is supposed to start\\r\\n        let growPlayer = ns.getPlayer();\\r\\n        let growServer = ns.getServer(targetname);\\r\\n        let growTime, growOffsetTime, growStartTime;\\r\\n        let oldGrowStartTime = currentTime;\\r\\n\\r\\n        while (true) {\\r\\n            growTime = Math.ceil(ns.formulas.hacking.growTime(growServer, growPlayer));\\r\\n            growOffsetTime = weakenTime + tspacer - growTime;\\r\\n            growStartTime = currentTime + growOffsetTime;\\r\\n\\r\\n            // check if any ps finish between oldGrowStartTime and growStartTime\\r\\n            // if no, continue on\\r\\n            // if yes, recalculate player.hacking_exp and player.hacking based on the amount of experience\\r\\n            //   that will be received between oldGrowStartTime and growStartTime and then\\r\\n            //   recalculate growTime and growStartTime\\r\\n\\r\\n            let accumulatedExp = 0;\\r\\n            for (const processInfo of ps) {\\r\\n                let psEndTime = processInfo.args[3];\\r\\n                let psExp = processInfo.args[4];\\r\\n                if (psEndTime >= oldGrowStartTime && psEndTime < growStartTime) {\\r\\n                    accumulatedExp += psExp;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (accumulatedExp > 0) {\\r\\n                growPlayer.hacking_exp += accumulatedExp;\\r\\n            }\\r\\n\\r\\n            // check if our hacking level changed\\r\\n            let newHackingLvl = ns.formulas.skills.calculateSkill(\\r\\n                growPlayer.hacking_exp,\\r\\n                growPlayer.hacking_mult * ns.getBitNodeMultipliers().HackingLevelMultiplier\\r\\n            );\\r\\n\\r\\n            if (newHackingLvl === growPlayer.hacking) break;\\r\\n\\r\\n            growPlayer.hacking = newHackingLvl;\\r\\n        }\\r\\n\\r\\n        // if growStartTime is within +-tspacer of another process ending, wait 200ms and try again\\r\\n        if (!isProcessStartSafe(ps, growStartTime - tspacer, growStartTime + tspacer)) continue;\\r\\n\\r\\n        // calculate hack time when hack is supposed to start\\r\\n        let hackPlayer = ns.getPlayer();\\r\\n        let hackServer = ns.getServer(targetname);\\r\\n        let hackTime, hackOffsetTime, hackStartTime;\\r\\n        let oldHackStartTime = currentTime;\\r\\n\\r\\n        while (true) {\\r\\n            hackTime = Math.ceil(ns.formulas.hacking.hackTime(hackServer, hackPlayer));\\r\\n            hackOffsetTime = weakenTime - hackTime - tspacer;\\r\\n            hackStartTime = currentTime + hackOffsetTime;\\r\\n\\r\\n            // check if any ps finish between oldHackStartTime and hackStartTime\\r\\n            // if no, continue on\\r\\n            // if yes, recalculate player.hacking_exp and player.hacking based on the amount of experience\\r\\n            //   that will be received between oldHackStartTime and hackStartTime and then\\r\\n            //   recalculate hackTime and hackStartTime\\r\\n\\r\\n            let accumulatedExp = 0;\\r\\n            for (const processInfo of ps) {\\r\\n                let psEndTime = processInfo.args[3];\\r\\n                let psExp = processInfo.args[4];\\r\\n                if (psEndTime >= oldHackStartTime && psEndTime < hackStartTime) {\\r\\n                    accumulatedExp += psExp;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (accumulatedExp > 0) {\\r\\n                hackPlayer.hacking_exp += accumulatedExp;\\r\\n            }\\r\\n\\r\\n            // check if our hacking level changed\\r\\n            let newHackingLvl = ns.formulas.skills.calculateSkill(\\r\\n                hackPlayer.hacking_exp,\\r\\n                hackPlayer.hacking_mult * ns.getBitNodeMultipliers().HackingLevelMultiplier\\r\\n            );\\r\\n\\r\\n            if (newHackingLvl === hackPlayer.hacking) break;\\r\\n\\r\\n            hackPlayer.hacking = newHackingLvl;\\r\\n        }\\r\\n\\r\\n        // if hackStartTime is within +-tspacer of another process ending, wait 200ms and try again\\r\\n        if (!isProcessStartSafe(ps, hackStartTime - tspacer, hackStartTime + tspacer)) continue;\\r\\n\\r\\n        // calculate and launch a cycle\\r\\n        const weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n        const hackPercentPerThread = ns.formulas.hacking.hackPercent(hackServer, hackPlayer);\\r\\n        const targetMaxMoney = ns.getServerMaxMoney(targetname);\\r\\n\\r\\n        let hackThreads = optimalHackPercent / hackPercentPerThread;\\r\\n        let hackTotal = hackPercentPerThread * hackThreads * targetMaxMoney;\\r\\n\\r\\n        let growMult = targetMaxMoney / (targetMaxMoney - hackTotal);\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(targetname, growMult, hostCores));\\r\\n\\r\\n        let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        let weakenThreadsHack = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        let weakenThreadsGrow = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let cycleRam =\\r\\n            hackThreads * hackRam + growThreads * growRam + (weakenThreadsHack + weakenThreadsGrow) * weakenRam;\\r\\n\\r\\n        // check if there is ram available to run the cycle\\r\\n        if (hostRamAvailable() < cycleRam) continue;\\r\\n\\r\\n        let hackEXP = ns.formulas.hacking.hackExp(ns.getServer(targetname), ns.getPlayer());\\r\\n\\r\\n        // args are targetname, offset, ms since aug when process will start, ms since aug when process will end, exp gain\\r\\n        let weakenArgsHack = [\\r\\n            targetname,\\r\\n            weakenHackOffsetTime,\\r\\n            currentTime + weakenHackOffsetTime,\\r\\n            currentTime + weakenTime + weakenHackOffsetTime,\\r\\n            hackEXP * weakenThreadsHack,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"0WH\\\",\\r\\n        ];\\r\\n\\r\\n        let weakenArgsGrow = [\\r\\n            targetname,\\r\\n            weakenGrowOffsetTime,\\r\\n            currentTime + weakenGrowOffsetTime,\\r\\n            currentTime + weakenTime + weakenGrowOffsetTime,\\r\\n            hackEXP * weakenThreadsGrow,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"1WG\\\",\\r\\n        ];\\r\\n\\r\\n        let growArgs = [\\r\\n            targetname,\\r\\n            growOffsetTime,\\r\\n            currentTime + growOffsetTime,\\r\\n            currentTime + growTime + growOffsetTime,\\r\\n            hackEXP * growThreads,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"2G\\\",\\r\\n        ];\\r\\n\\r\\n        let hackArgs = [\\r\\n            targetname,\\r\\n            hackOffsetTime,\\r\\n            currentTime + hackOffsetTime,\\r\\n            currentTime + hackTime + hackOffsetTime,\\r\\n            hackEXP * hackThreads,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"3H\\\",\\r\\n        ];\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Starting Batch Cycle; Hacking %s (%.2f%% of max)\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                targetname,\\r\\n                ns.nFormat(hackTotal, \\\"($0.000a)\\\"),\\r\\n                (hackTotal / ns.getServerMaxMoney(targetname)) * 100\\r\\n            )\\r\\n        );\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d; Time %s\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                targetname,\\r\\n                hackThreads,\\r\\n                growThreads,\\r\\n                weakenThreadsHack,\\r\\n                weakenThreadsGrow,\\r\\n                hackThreads + growThreads + weakenThreadsHack + weakenThreadsGrow,\\r\\n                ns.tFormat(weakenTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ns.exec(weakenScript, hostname, weakenThreadsHack, ...weakenArgsHack);\\r\\n        ns.exec(weakenScript, hostname, weakenThreadsGrow, ...weakenArgsGrow);\\r\\n        ns.exec(growScript, hostname, growThreads, ...growArgs);\\r\\n        ns.exec(hackScript, hostname, hackThreads, ...hackArgs);\\r\\n\\r\\n        batchID++;\\r\\n\\r\\n        // Allow space for interleaving batches\\r\\n        await ns.sleep(300 - batchSleep)\\r\\n    }\\r\\n}\",\"filename\":\"batcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///2f226438-6990-49fe-b4ac-2a6fded20228\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///265ce5f9-4fff-42e9-bfa7-12fdc96920fa\"},{\"filename\":\"batcher.js\",\"url\":\"blob:file:///f32b150c-3943-4540-bbce-b952d8b9c7e2\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"c545201841be9b6cbc443c4c032142175cb5abc7c6888ce319a7a9330a5ae41e\",\"moduleSequenceNumber\":75563,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const tableEl = hook0.parentElement.parentElement;\\r\\n\\r\\n    // Add Clock\\r\\n    const clockRoot = document.createElement(\\\"tr\\\");\\r\\n    clockRoot.className = \\\"MuiTableRow-root css-9k2whp\\\";\\r\\n    clockRoot.setAttribute(\\\"id\\\", \\\"extra-clock\\\");\\r\\n    tableEl.after(clockRoot);\\r\\n    const clockSub1 = document.createElement(\\\"th\\\");\\r\\n    clockSub1.className = \\\"jss13 MuiTableCell-root MuiTableCell-body MuiTableCell-sizeMedium css-hadb7u\\\";\\r\\n    clockSub1.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    clockRoot.appendChild(clockSub1);\\r\\n    const clockSub11 = document.createElement(\\\"p\\\");\\r\\n    clockSub11.className = \\\"jss17 MuiTypography-root MuiTypography-body1 css-fjpam8\\\";\\r\\n    clockSub11.innerText = \\\"clock\\\";\\r\\n    clockSub1.appendChild(clockSub11);\\r\\n\\r\\n    // Add Target & Income/s\\r\\n    const tInfoRoot = document.createElement(\\\"tr\\\");\\r\\n    tInfoRoot.className = \\\"MuiTableRow-root css-9k2whp\\\";\\r\\n    tInfoRoot.setAttribute(\\\"id\\\", \\\"extra-target-info\\\");\\r\\n    clockRoot.after(tInfoRoot);\\r\\n    const tInfoSub1 = document.createElement(\\\"th\\\");\\r\\n    tInfoSub1.className = \\\"jss13 MuiTableCell-root MuiTableCell-body MuiTableCell-sizeMedium css-hadb7u\\\";\\r\\n    tInfoSub1.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    tInfoRoot.appendChild(tInfoSub1);\\r\\n    const tInfoSub11 = document.createElement(\\\"p\\\");\\r\\n    tInfoSub11.className = \\\"jss17 MuiTypography-root MuiTypography-body1 css-fjpam8\\\";\\r\\n    tInfoSub11.innerText = \\\"tname\\\";\\r\\n    tInfoSub1.appendChild(tInfoSub11);\\r\\n    const tInfoSub2 = document.createElement(\\\"th\\\");\\r\\n    tInfoSub2.className =\\r\\n        \\\"jss13 MuiTableCell-root MuiTableCell-body MuiTableCell-alignRight MuiTableCell-sizeMedium css-7v1cxh\\\";\\r\\n    tInfoSub2.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    tInfoRoot.appendChild(tInfoSub2);\\r\\n    const tInfoSub21 = document.createElement(\\\"p\\\");\\r\\n    tInfoSub21.className = \\\"jss17 MuiTypography-root MuiTypography-body1 css-fjpam8\\\";\\r\\n    tInfoSub21.innerText = \\\"income\\\";\\r\\n    tInfoSub2.appendChild(tInfoSub21);\\r\\n\\r\\n    // Add Hack State & Countdown\\r\\n    const hackStateRoot = document.createElement(\\\"tr\\\");\\r\\n    hackStateRoot.className = \\\"MuiTableRow-root css-9k2whp\\\";\\r\\n    hackStateRoot.setAttribute(\\\"id\\\", \\\"extra-hack-state\\\");\\r\\n    tInfoRoot.after(hackStateRoot);\\r\\n    const hackStateSub1 = document.createElement(\\\"th\\\");\\r\\n    hackStateSub1.className = \\\"jss13 MuiTableCell-root MuiTableCell-body MuiTableCell-sizeMedium css-hadb7u\\\";\\r\\n    hackStateSub1.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    hackStateRoot.appendChild(hackStateSub1);\\r\\n    const hackStateSub11 = document.createElement(\\\"p\\\");\\r\\n    hackStateSub11.className = \\\"jss17 MuiTypography-root MuiTypography-body1 css-fjpam8\\\";\\r\\n    hackStateSub11.innerText = \\\"state\\\";\\r\\n    hackStateSub1.appendChild(hackStateSub11);\\r\\n    const hackStateSub2 = document.createElement(\\\"th\\\");\\r\\n    hackStateSub2.className =\\r\\n        \\\"jss13 MuiTableCell-root MuiTableCell-body MuiTableCell-alignRight MuiTableCell-sizeMedium css-7v1cxh\\\";\\r\\n    hackStateSub2.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    hackStateRoot.appendChild(hackStateSub2);\\r\\n    const hackStateSub21 = document.createElement(\\\"p\\\");\\r\\n    hackStateSub21.className = \\\"jss17 MuiTypography-root MuiTypography-body1 css-fjpam8\\\";\\r\\n    hackStateSub21.innerText = \\\"countdown\\\";\\r\\n    hackStateSub2.appendChild(hackStateSub21);\\r\\n\\r\\n    // Add Progress Bar\\r\\n    const barRoot = document.createElement(\\\"tr\\\");\\r\\n    barRoot.className = \\\"MuiTableRow-root css-9k2whp\\\";\\r\\n    barRoot.setAttribute(\\\"id\\\", \\\"extra-progress\\\");\\r\\n    hackStateRoot.after(barRoot);\\r\\n    const barSub1 = document.createElement(\\\"th\\\");\\r\\n    barSub1.className = \\\"jss14 MuiTableCell-root MuiTableCell-body MuiTableCell-sizeMedium css-hadb7u\\\";\\r\\n    barSub1.setAttribute(\\\"scope\\\", \\\"row\\\");\\r\\n    barSub1.setAttribute(\\\"colspan\\\", \\\"2\\\");\\r\\n    barSub1.setAttribute(\\\"style\\\", \\\"padding-bottom: 2px; position: relative; top: -3px;\\\");\\r\\n    barRoot.appendChild(barSub1);\\r\\n    const barSub2 = document.createElement(\\\"span\\\");\\r\\n    barSub2.className =\\r\\n        \\\"MuiLinearProgress-root MuiLinearProgress-colorPrimary MuiLinearProgress-determinate css-13u5e92\\\";\\r\\n    barSub2.setAttribute(\\\"role\\\", \\\"progressbar\\\");\\r\\n    barSub2.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n    barSub2.setAttribute(\\\"aria-valuemin\\\", \\\"0\\\");\\r\\n    barSub2.setAttribute(\\\"aria-valuemax\\\", \\\"100\\\");\\r\\n    barSub1.appendChild(barSub2);\\r\\n    const barSub3 = document.createElement(\\\"span\\\");\\r\\n    barSub3.className =\\r\\n        \\\"MuiLinearProgress-bar MuiLinearProgress-barColorPrimary MuiLinearProgress-bar1Determinate css-1yk0k18\\\";\\r\\n    barSub3.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n    barSub2.appendChild(barSub3);\\r\\n\\r\\n    ns.atExit(function () {\\r\\n        clockRoot.parentNode.removeChild(clockRoot);\\r\\n        barRoot.parentNode.removeChild(barRoot);\\r\\n        tInfoRoot.parentNode.removeChild(tInfoRoot);\\r\\n        hackStateRoot.parentNode.removeChild(hackStateRoot);\\r\\n    });\\r\\n\\r\\n    let port = ns.getPortHandle(1);\\r\\n    let startTime = 0;\\r\\n    let endTime = 1000;\\r\\n    let fullTime = 1000;\\r\\n    let target = \\\"\\\"\\r\\n    let income = \\\"\\\"\\r\\n    let state = \\\"\\\"\\r\\n    let countdown = \\\"\\\"\\r\\n    while (true) {\\r\\n        if (!port.empty()) {\\r\\n            let data = port.peek();\\r\\n            startTime = data[0].getTime();\\r\\n            endTime = new Date(startTime + data[1]).getTime();\\r\\n            fullTime = endTime - startTime;\\r\\n\\r\\n            let date = new Date();\\r\\n            let curTime = date.getTime();\\r\\n\\r\\n            // Update Clock\\r\\n            // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n            // clockSub11.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n            clockSub11.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            // Update Target & Income\\r\\n            tInfoSub11.innerText = data[2];\\r\\n            tInfoSub21.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n\\r\\n            // Update State & Countdown\\r\\n            hackStateSub11.innerText = data[4];\\r\\n            hackStateSub21.innerText = stFormat(ns, endTime - curTime, false);\\r\\n\\r\\n            // Update Progress\\r\\n            let tvalue = curTime - startTime;\\r\\n            let nvalue = (tvalue / fullTime) * 100;\\r\\n            let transform = 100 - nvalue;\\r\\n            let wholeValue = Math.floor(nvalue);\\r\\n            \\r\\n            if (startTime === 0 || wholeValue > 100) {\\r\\n                port.clear();\\r\\n                transform = 100;\\r\\n                wholeValue = 0;\\r\\n            }\\r\\n\\r\\n            barSub2.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n            barSub3.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n        } else {\\r\\n            let date = new Date();\\r\\n            clockSub11.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            tInfoSub11.innerText = \\\"NO TARGET\\\";\\r\\n            tInfoSub21.innerText = \\\"\\\";\\r\\n            hackStateSub11.innerText = \\\"\\\";\\r\\n            hackStateSub21.innerText = \\\"\\\";\\r\\n            barSub2.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n            barSub3.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///09585967-7210-4d7d-b026-38d17d125535\"}],\"ramUsage\":26.6,\"server\":\"home\",\"_hash\":\"ed7185777d3c3323589c642ce1d7ff8e77a6d8531b3b9c7ecabc7792dc363ac8\",\"moduleSequenceNumber\":85365,\"dependents\":[],\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h: show help text\\\");\\r\\n    ns.tprintf(\\\"  all  : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack : all hack\\\");\\r\\n    ns.tprintf(\\\"  str  : all str\\\");\\r\\n    ns.tprintf(\\\"  def  : all def\\\");\\r\\n    ns.tprintf(\\\"  dex  : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi  : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha  : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug  : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom  : all homicide\\\");\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n\\t\\treturn;\\r\\n    }\\r\\n\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///9507ee4b-5d28-44b8-8661-b6c3a2d302ff\"}],\"ramUsage\":21.6,\"server\":\"home\",\"_hash\":\"bc329d9f69aefe7a4d3b914632ff36613092b6f46e039751604af08b0067292a\",\"moduleSequenceNumber\":75566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"1642307985209_max-hardware.txt\",\"text\":\"Target Name, UID, Batch ID, Offset Time, Start Time, End Time, Operation Time, Real Time Start, Real Time End, Real Time Operation, Diff, Exp Gain\\nmax-hardware,000-3H-home,0,20945,20963,27962,6999,21033,28037,7004,-5,0\\nmax-hardware,000-0WH-home,0,0,18,28012,27994,87,28081,27994,0,0\\nmax-hardware,000-2G-home,0,5649,5667,28062,22395,5736,28134,22398,-3,0\\nmax-hardware,000-1WG-home,0,100,118,28112,27994,188,28182,27994,0,0\\nmax-hardware,001-3H-home,1,21145,21163,28162,6999,21232,28231,6999,0,0\\nmax-hardware,001-0WH-home,1,200,218,28212,27994,287,28281,27994,0,0\\nmax-hardware,001-2G-home,1,5849,5867,28262,22395,5937,28332,22395,0,0\\nmax-hardware,001-1WG-home,1,300,318,28312,27994,388,28382,27994,0,0\\nmax-hardware,002-3H-home,2,21345,21363,28362,6999,21433,28432,6999,0,0\\nmax-hardware,002-0WH-home,2,400,418,28412,27994,489,28483,27994,0,0\\nmax-hardware,002-2G-home,2,6049,6067,28462,22395,6137,28533,22396,-1,0\\nmax-hardware,002-1WG-home,2,500,518,28512,27994,588,28581,27993,1,0\\nmax-hardware,003-3H-home,3,21545,21563,28562,6999,21633,28634,7001,-2,0\\nmax-hardware,003-0WH-home,3,600,618,28612,27994,689,28683,27994,0,0\\nmax-hardware,003-2G-home,3,6249,6267,28662,22395,6337,28732,22395,0,0\\nmax-hardware,003-1WG-home,3,700,718,28712,27994,789,28782,27993,1,0\\nmax-hardware,004-3H-home,4,21745,21763,28762,6999,21833,28832,6999,0,0\\nmax-hardware,004-0WH-home,4,800,818,28812,27994,887,28882,27995,-1,0\\nmax-hardware,004-2G-home,4,6449,6467,28862,22395,6538,28933,22395,0,0\\nmax-hardware,004-1WG-home,4,900,918,28912,27994,987,28981,27994,0,0\\nmax-hardware,005-3H-home,5,21945,21963,28962,6999,22034,29033,6999,0,0\\nmax-hardware,005-0WH-home,5,1000,1018,29012,27994,1088,29082,27994,0,0\\nmax-hardware,005-2G-home,5,6649,6667,29062,22395,6736,29131,22395,0,0\\nmax-hardware,005-1WG-home,5,1100,1118,29112,27994,1187,29181,27994,0,0\\nmax-hardware,006-3H-home,6,22145,22163,29162,6999,22233,29236,7003,-4,0\\nmax-hardware,006-0WH-home,6,1200,1218,29212,27994,1289,29283,27994,0,0\\nmax-hardware,006-2G-home,6,6849,6867,29262,22395,6936,29332,22396,-1,0\\nmax-hardware,006-1WG-home,6,1300,1318,29312,27994,1389,29383,27994,0,0\\nmax-hardware,007-3H-home,7,22345,22363,29362,6999,22433,29433,7000,-1,0\\nmax-hardware,007-0WH-home,7,1400,1418,29412,27994,1488,29481,27993,1,0\\nmax-hardware,007-2G-home,7,7049,7067,29462,22395,7138,29532,22394,1,0\\nmax-hardware,007-1WG-home,7,1500,1518,29512,27994,1587,29582,27995,-1,0\\nmax-hardware,008-3H-home,8,22545,22563,29562,6999,22634,29632,6998,1,0\\nmax-hardware,008-0WH-home,8,1600,1618,29612,27994,1688,29681,27993,1,0\\nmax-hardware,008-2G-home,8,7249,7267,29662,22395,7337,29731,22394,1,0\\nmax-hardware,008-1WG-home,8,1700,1718,29712,27994,1788,29781,27993,1,0\\nmax-hardware,009-3H-home,9,22745,22763,29762,6999,22833,29832,6999,0,0\\nmax-hardware,009-0WH-home,9,1800,1818,29812,27994,1888,29882,27994,0,0\\nmax-hardware,009-2G-home,9,7449,7467,29862,22395,7537,29931,22394,1,0\\nmax-hardware,009-1WG-home,9,1900,1918,29912,27994,1989,29983,27994,0,0\\nmax-hardware,010-3H-home,10,22945,22963,29962,6999,23033,30032,6999,0,0\\nmax-hardware,010-0WH-home,10,2000,2018,30012,27994,2087,30081,27994,0,0\\nmax-hardware,010-2G-home,10,7649,7667,30062,22395,7737,30133,22396,-1,0\\nmax-hardware,010-1WG-home,10,2100,2118,30112,27994,2188,30182,27994,0,0\\nmax-hardware,011-3H-home,11,23145,23163,30162,6999,23233,30232,6999,0,0\\nmax-hardware,011-0WH-home,11,2200,2218,30212,27994,2288,30283,27995,-1,0\\nmax-hardware,011-2G-home,11,7849,7867,30262,22395,7936,30332,22396,-1,0\\nmax-hardware,011-1WG-home,11,2300,2318,30312,27994,2388,30382,27994,0,0\\nmax-hardware,012-3H-home,12,23345,23363,30362,6999,23434,30434,7000,-1,0\\nmax-hardware,012-0WH-home,12,2400,2418,30412,27994,2489,30483,27994,0,0\\nmax-hardware,012-2G-home,12,8049,8067,30462,22395,8137,30531,22394,1,0\\nmax-hardware,012-1WG-home,12,2500,2518,30512,27994,2589,30584,27995,-1,0\\nmax-hardware,013-3H-home,13,23545,23563,30562,6999,23633,30631,6998,1,0\\nmax-hardware,013-0WH-home,13,2600,2618,30612,27994,2689,30683,27994,0,0\\nmax-hardware,013-2G-home,13,8249,8267,30662,22395,8337,30732,22395,0,0\\nmax-hardware,013-1WG-home,13,2700,2718,30712,27994,2789,30783,27994,0,0\\nmax-hardware,014-3H-home,14,23745,23763,30762,6999,23833,30831,6998,1,0\\nmax-hardware,014-0WH-home,14,2800,2818,30812,27994,2888,30882,27994,0,0\\nmax-hardware,014-2G-home,14,8449,8467,30862,22395,8537,30932,22395,0,0\\nmax-hardware,014-1WG-home,14,2900,2918,30912,27994,2989,30982,27993,1,0\\nmax-hardware,015-3H-home,15,23945,23963,30962,6999,24034,31034,7000,-1,0\\nmax-hardware,015-0WH-home,15,3000,3018,31012,27994,3089,31082,27993,1,0\\nmax-hardware,015-2G-home,15,8649,8667,31062,22395,8737,31132,22395,0,0\\nmax-hardware,015-1WG-home,15,3100,3118,31112,27994,3188,31181,27993,1,0\\nmax-hardware,021-3H-home,21,20846,53112,60078,6966,53167,60136,6969,-3,0\\nmax-hardware,021-0WH-home,21,0,32266,60128,27862,32321,60182,27861,1,0\\nmax-hardware,021-2G-home,21,5623,37889,60178,22289,37945,60238,22293,-4,0\\nmax-hardware,021-1WG-home,21,100,32366,60228,27862,32421,60283,27862,0,0\\nmax-hardware,022-3H-home,22,21046,53312,60278,6966,53367,60332,6965,1,0\\nmax-hardware,022-0WH-home,22,200,32466,60328,27862,32521,60383,27862,0,0\\nmax-hardware,022-2G-home,22,5823,38089,60378,22289,38144,60434,22290,-1,0\\nmax-hardware,022-1WG-home,22,300,32566,60428,27862,32621,60483,27862,0,0\\nmax-hardware,023-3H-home,23,21246,53512,60478,6966,53567,60533,6966,0,0\\nmax-hardware,023-0WH-home,23,400,32666,60528,27862,32722,60584,27862,0,0\\nmax-hardware,023-2G-home,23,6023,38289,60578,22289,38345,60633,22288,1,0\\nmax-hardware,023-1WG-home,23,500,32766,60628,27862,32821,60682,27861,1,0\\nmax-hardware,024-3H-home,24,21446,53712,60678,6966,53767,60733,6966,0,0\\nmax-hardware,024-0WH-home,24,600,32866,60728,27862,32922,60783,27861,1,0\\nmax-hardware,024-2G-home,24,6223,38489,60778,22289,38545,60834,22289,0,0\\nmax-hardware,024-1WG-home,24,700,32966,60828,27862,33022,60884,27862,0,0\\nmax-hardware,025-3H-home,25,21646,53912,60878,6966,53967,60933,6966,0,0\\nmax-hardware,025-0WH-home,25,800,33066,60928,27862,33122,60984,27862,0,0\\nmax-hardware,025-2G-home,25,6423,38689,60978,22289,38745,61034,22289,0,0\\nmax-hardware,025-1WG-home,25,900,33166,61028,27862,33221,61082,27861,1,0\\nmax-hardware,026-3H-home,26,21846,54112,61078,6966,54168,61134,6966,0,0\\nmax-hardware,026-0WH-home,26,1000,33266,61128,27862,33321,61183,27862,0,0\\nmax-hardware,026-2G-home,26,6623,38889,61178,22289,38945,61233,22288,1,0\\nmax-hardware,026-1WG-home,26,1100,33366,61228,27862,33422,61285,27863,-1,0\\nmax-hardware,027-3H-home,27,22046,54312,61278,6966,54367,61333,6966,0,0\\nmax-hardware,027-0WH-home,27,1200,33466,61328,27862,33522,61383,27861,1,0\\nmax-hardware,027-2G-home,27,6823,39089,61378,22289,39145,61434,22289,0,0\\nmax-hardware,027-1WG-home,27,1300,33566,61428,27862,33621,61483,27862,0,0\\nmax-hardware,028-3H-home,28,22246,54512,61478,6966,54567,61532,6965,1,0\\nmax-hardware,028-0WH-home,28,1400,33666,61528,27862,33722,61585,27863,-1,0\\nmax-hardware,028-2G-home,28,7023,39289,61578,22289,39345,61634,22289,0,0\\nmax-hardware,028-1WG-home,28,1500,33766,61628,27862,33821,61683,27862,0,0\\nmax-hardware,029-3H-home,29,22446,54712,61678,6966,54767,61734,6967,-1,0\\nmax-hardware,029-0WH-home,29,1600,33866,61728,27862,33922,61784,27862,0,0\\nmax-hardware,029-2G-home,29,7223,39489,61778,22289,39544,61832,22288,1,0\\nmax-hardware,029-1WG-home,29,1700,33966,61828,27862,34021,61883,27862,0,0\\nmax-hardware,030-3H-home,30,22646,54912,61878,6966,54967,61933,6966,0,0\\nmax-hardware,030-0WH-home,30,1800,34066,61928,27862,34121,61983,27862,0,0\\nmax-hardware,030-2G-home,30,7423,39689,61978,22289,39744,62033,22289,0,0\\nmax-hardware,030-1WG-home,30,1900,34166,62028,27862,34221,62083,27862,0,0\\nmax-hardware,031-3H-home,31,22846,55112,62078,6966,55167,62133,6966,0,0\\nmax-hardware,031-0WH-home,31,2000,34266,62128,27862,34322,62184,27862,0,0\\nmax-hardware,031-2G-home,31,7623,39889,62178,22289,39944,62234,22290,-1,0\\nmax-hardware,031-1WG-home,31,2100,34366,62228,27862,34421,62283,27862,0,0\\nmax-hardware,032-3H-home,32,23046,55312,62278,6966,55367,62333,6966,0,0\\nmax-hardware,032-0WH-home,32,2200,34466,62328,27862,34521,62383,27862,0,0\\nmax-hardware,032-2G-home,32,7823,40089,62378,22289,40144,62434,22290,-1,0\\nmax-hardware,032-1WG-home,32,2300,34566,62428,27862,34621,62483,27862,0,0\\nmax-hardware,033-3H-home,33,23246,55512,62478,6966,55568,62534,6966,0,0\\nmax-hardware,033-0WH-home,33,2400,34666,62528,27862,34721,62583,27862,0,0\\nmax-hardware,033-2G-home,33,8023,40289,62578,22289,40346,62635,22289,0,0\\nmax-hardware,033-1WG-home,33,2500,34766,62628,27862,34822,62684,27862,0,0\\nmax-hardware,034-3H-home,34,23446,55712,62678,6966,55768,62733,6965,1,0\\nmax-hardware,034-0WH-home,34,2600,34866,62728,27862,34921,62783,27862,0,0\\nmax-hardware,034-2G-home,34,8223,40489,62778,22289,40544,62835,22291,-2,0\\nmax-hardware,034-1WG-home,34,2700,34966,62828,27862,35021,62917,27896,-34,0\\nmax-hardware,035-3H-home,35,23646,55912,62878,6966,55967,62933,6966,0,0\\nmax-hardware,035-0WH-home,35,2800,35066,62928,27862,35121,62983,27862,0,0\\nmax-hardware,035-2G-home,35,8423,40689,62978,22289,40744,63032,22288,1,0\\nmax-hardware,035-1WG-home,35,2900,35166,63028,27862,35223,63086,27863,-1,0\\nmax-hardware,036-3H-home,36,23846,56112,63078,6966,56168,63135,6967,-1,0\\nmax-hardware,036-0WH-home,36,3000,35266,63128,27862,35322,63184,27862,0,0\\nmax-hardware,036-2G-home,36,8623,40889,63178,22289,40945,63234,22289,0,0\\nmax-hardware,036-1WG-home,36,3100,35366,63228,27862,35422,63283,27861,1,0\\nmax-hardware,042-3H-home,42,20554,112932,119800,6868,113123,119995,6872,-4,0\\nmax-hardware,042-0WH-home,42,0,92378,119850,27472,92568,120041,27473,-1,0\\nmax-hardware,042-2G-home,42,5544,97922,119900,21978,98114,120095,21981,-3,0\\nmax-hardware,042-1WG-home,42,100,92478,119950,27472,92670,120141,27471,1,0\\nmax-hardware,043-3H-home,43,20754,113132,120000,6868,113323,120191,6868,0,0\\nmax-hardware,043-0WH-home,43,200,92578,120050,27472,92770,120242,27472,0,0\\nmax-hardware,043-2G-home,43,5744,98122,120100,21978,98314,120291,21977,1,0\\nmax-hardware,043-1WG-home,43,300,92678,120150,27472,92870,120343,27473,-1,0\\nmax-hardware,044-3H-home,44,20954,113332,120200,6868,113523,120391,6868,0,0\\nmax-hardware,044-0WH-home,44,400,92778,120250,27472,92969,120441,27472,0,0\\nmax-hardware,044-2G-home,44,5944,98322,120300,21978,98514,120492,21978,0,0\\nmax-hardware,044-1WG-home,44,500,92878,120350,27472,93069,120541,27472,0,0\\nmax-hardware,045-3H-home,45,21154,113532,120400,6868,113723,120590,6867,1,0\\nmax-hardware,045-0WH-home,45,600,92978,120450,27472,93170,120642,27472,0,0\\nmax-hardware,045-2G-home,45,6144,98522,120500,21978,98714,120693,21979,-1,0\\nmax-hardware,045-1WG-home,45,700,93078,120550,27472,93270,120743,27473,-1,0\\nmax-hardware,046-3H-home,46,21354,113732,120600,6868,113923,120792,6869,-1,0\\nmax-hardware,046-0WH-home,46,800,93178,120650,27472,93370,120842,27472,0,0\\nmax-hardware,046-2G-home,46,6344,98722,120700,21978,98916,120894,21978,0,0\\nmax-hardware,046-1WG-home,46,900,93278,120750,27472,93469,120942,27473,-1,0\\nmax-hardware,047-3H-home,47,21554,113932,120800,6868,114123,120991,6868,0,0\\nmax-hardware,047-0WH-home,47,1000,93378,120850,27472,93569,121040,27471,1,0\\nmax-hardware,047-2G-home,47,6544,98922,120900,21978,99115,121092,21977,1,0\\nmax-hardware,047-1WG-home,47,1100,93478,120950,27472,93670,121142,27472,0,0\\nmax-hardware,048-3H-home,48,21754,114132,121000,6868,114323,121191,6868,0,0\\nmax-hardware,048-0WH-home,48,1200,93578,121050,27472,93769,121241,27472,0,0\\nmax-hardware,048-2G-home,48,6744,99122,121100,21978,99314,121291,21977,1,0\\nmax-hardware,048-1WG-home,48,1300,93678,121150,27472,93870,121341,27471,1,0\\nmax-hardware,049-3H-home,49,21954,114332,121200,6868,114523,121391,6868,0,0\\nmax-hardware,049-0WH-home,49,1400,93778,121250,27472,93969,121441,27472,0,0\\nmax-hardware,049-2G-home,49,6944,99322,121300,21978,99516,121493,21977,1,0\\nmax-hardware,049-1WG-home,49,1500,93878,121350,27472,94070,121542,27472,0,0\\nmax-hardware,050-3H-home,50,22154,114532,121400,6868,114724,121591,6867,1,0\\nmax-hardware,050-0WH-home,50,1600,93978,121450,27472,94170,121643,27473,-1,0\\nmax-hardware,050-2G-home,50,7144,99522,121500,21978,99714,121693,21979,-1,0\\nmax-hardware,050-1WG-home,50,1700,94078,121550,27472,94269,121742,27473,-1,0\\nmax-hardware,051-3H-home,51,22354,114732,121600,6868,114923,121791,6868,0,0\\nmax-hardware,051-0WH-home,51,1800,94178,121650,27472,94370,121842,27472,0,0\\nmax-hardware,051-2G-home,51,7344,99722,121700,21978,99914,121892,21978,0,0\\nmax-hardware,051-1WG-home,51,1900,94278,121750,27472,94470,121942,27472,0,0\\nmax-hardware,052-3H-home,52,22554,114932,121800,6868,115123,121992,6869,-1,0\\nmax-hardware,052-0WH-home,52,2000,94378,121850,27472,94570,122041,27471,1,0\\nmax-hardware,052-2G-home,52,7544,99922,121900,21978,100114,122092,21978,0,0\\nmax-hardware,052-1WG-home,52,2100,94478,121950,27472,94671,122143,27472,0,0\\nmax-hardware,053-3H-home,53,22754,115132,122000,6868,115325,122193,6868,0,0\\nmax-hardware,053-0WH-home,53,2200,94578,122050,27472,94770,122241,27471,1,0\\nmax-hardware,053-2G-home,53,7744,100122,122100,21978,100314,122293,21979,-1,0\\nmax-hardware,053-1WG-home,53,2300,94678,122150,27472,94870,122342,27472,0,0\\nmax-hardware,054-3H-home,54,22954,115332,122200,6868,115524,122391,6867,1,0\\nmax-hardware,054-0WH-home,54,2400,94778,122250,27472,94970,122442,27472,0,0\\nmax-hardware,054-2G-home,54,7944,100322,122300,21978,100514,122491,21977,1,0\\nmax-hardware,054-1WG-home,54,2500,94878,122350,27472,95069,122541,27472,0,0\\nmax-hardware,055-3H-home,55,23154,115532,122400,6868,115723,122591,6868,0,0\\nmax-hardware,055-0WH-home,55,2600,94978,122450,27472,95169,122641,27472,0,0\\nmax-hardware,055-2G-home,55,8144,100522,122500,21978,100714,122692,21978,0,0\\nmax-hardware,055-1WG-home,55,2700,95078,122550,27472,95270,122741,27471,1,0\\nmax-hardware,056-3H-home,56,23354,115732,122600,6868,115924,122791,6867,1,0\\nmax-hardware,056-0WH-home,56,2800,95178,122650,27472,95370,122842,27472,0,0\\nmax-hardware,056-2G-home,56,8344,100722,122700,21978,100913,122892,21979,-1,0\\nmax-hardware,056-1WG-home,56,2900,95278,122750,27472,95470,122942,27472,0,0\\nmax-hardware,057-3H-home,57,23554,115932,122800,6868,116123,122991,6868,0,0\\nmax-hardware,057-0WH-home,57,3000,95378,122850,27472,95569,123041,27472,0,0\\nmax-hardware,057-2G-home,57,8544,100922,122900,21978,101114,123092,21978,0,0\\nmax-hardware,057-1WG-home,57,3100,95478,122950,27472,95670,123142,27472,0,0\\nmax-hardware,063-3H-home,63,20458,144618,151455,6837,144806,151652,6846,-9,0\\nmax-hardware,063-0WH-home,63,0,124160,151505,27345,124347,151692,27345,0,0\\nmax-hardware,063-2G-home,63,5519,129679,151555,21876,129867,151747,21880,-4,0\\nmax-hardware,063-1WG-home,63,100,124260,151605,27345,124449,151794,27345,0,0\\nmax-hardware,064-3H-home,64,20658,144818,151655,6837,145006,151843,6837,0,0\\nmax-hardware,064-0WH-home,64,200,124360,151705,27345,124548,151893,27345,0,0\\nmax-hardware,064-2G-home,64,5719,129879,151755,21876,130067,151943,21876,0,0\\nmax-hardware,064-1WG-home,64,300,124460,151805,27345,124648,151992,27344,1,0\\nmax-hardware,065-3H-home,65,20858,145018,151855,6837,145207,152043,6836,1,0\\nmax-hardware,065-0WH-home,65,400,124560,151905,27345,124748,152094,27346,-1,0\\nmax-hardware,065-2G-home,65,5919,130079,151955,21876,130267,152143,21876,0,0\\nmax-hardware,065-1WG-home,65,500,124660,152005,27345,124849,152236,27387,-42,0\\nmax-hardware,066-3H-home,66,21058,145218,152055,6837,145407,152244,6837,0,0\\nmax-hardware,066-0WH-home,66,600,124760,152105,27345,124947,152293,27346,-1,0\\nmax-hardware,066-2G-home,66,6119,130279,152155,21876,130467,152343,21876,0,0\\nmax-hardware,066-1WG-home,66,700,124860,152205,27345,125047,152392,27345,0,0\\nmax-hardware,067-3H-home,67,21258,145418,152255,6837,145605,152443,6838,-1,0\\nmax-hardware,067-0WH-home,67,800,124960,152305,27345,125148,152493,27345,0,0\\nmax-hardware,067-2G-home,67,6319,130479,152355,21876,130666,152543,21877,-1,0\\nmax-hardware,067-1WG-home,67,900,125060,152405,27345,125249,152594,27345,0,0\\nmax-hardware,068-3H-home,68,21458,145618,152455,6837,145807,152645,6838,-1,0\\nmax-hardware,068-0WH-home,68,1000,125160,152505,27345,125348,152693,27345,0,0\\nmax-hardware,068-2G-home,68,6519,130679,152555,21876,130867,152744,21877,-1,0\\nmax-hardware,068-1WG-home,68,1100,125260,152605,27345,125448,152793,27345,0,0\\nmax-hardware,069-3H-home,69,21658,145818,152655,6837,146007,152844,6837,0,0\\nmax-hardware,069-0WH-home,69,1200,125360,152705,27345,125548,152893,27345,0,0\\nmax-hardware,069-2G-home,69,6719,130879,152755,21876,131068,152944,21876,0,0\\nmax-hardware,069-1WG-home,69,1300,125460,152805,27345,125648,152994,27346,-1,0\\nmax-hardware,070-3H-home,70,21858,146018,152855,6837,146207,153044,6837,0,0\\nmax-hardware,070-0WH-home,70,1400,125560,152905,27345,125748,153093,27345,0,0\\nmax-hardware,070-2G-home,70,6919,131079,152955,21876,131267,153143,21876,0,0\\nmax-hardware,070-1WG-home,70,1500,125660,153005,27345,125849,153193,27344,1,0\\nmax-hardware,071-3H-home,71,22058,146218,153055,6837,146406,153243,6837,0,0\\nmax-hardware,071-0WH-home,71,1600,125760,153105,27345,125948,153293,27345,0,0\\nmax-hardware,071-2G-home,71,7119,131279,153155,21876,131467,153343,21876,0,0\\nmax-hardware,071-1WG-home,71,1700,125860,153205,27345,126048,153393,27345,0,0\\nmax-hardware,072-3H-home,72,22258,146418,153255,6837,146607,153445,6838,-1,0\\nmax-hardware,072-0WH-home,72,1800,125960,153305,27345,126148,153493,27345,0,0\\nmax-hardware,072-2G-home,72,7319,131479,153355,21876,131667,153543,21876,0,0\\nmax-hardware,072-1WG-home,72,1900,126060,153405,27345,126248,153593,27345,0,0\\nmax-hardware,073-3H-home,73,22458,146618,153455,6837,146806,153642,6836,1,0\\nmax-hardware,073-0WH-home,73,2000,126160,153505,27345,126348,153693,27345,0,0\\nmax-hardware,073-2G-home,73,7519,131679,153555,21876,131867,153743,21876,0,0\\nmax-hardware,073-1WG-home,73,2100,126260,153605,27345,126448,153793,27345,0,0\\nmax-hardware,074-3H-home,74,22658,146818,153655,6837,147006,153842,6836,1,0\\nmax-hardware,074-0WH-home,74,2200,126360,153705,27345,126549,153893,27344,1,0\\nmax-hardware,074-2G-home,74,7719,131879,153755,21876,132067,153942,21875,1,0\\nmax-hardware,074-1WG-home,74,2300,126460,153805,27345,126649,153993,27344,1,0\\nmax-hardware,075-3H-home,75,22858,147018,153855,6837,147207,154044,6837,0,0\\nmax-hardware,075-0WH-home,75,2400,126560,153905,27345,126748,154093,27345,0,0\\nmax-hardware,075-2G-home,75,7919,132079,153955,21876,132267,154143,21876,0,0\\nmax-hardware,075-1WG-home,75,2500,126660,154005,27345,126848,154193,27345,0,0\\nmax-hardware,076-3H-home,76,23058,147218,154055,6837,147407,154244,6837,0,0\\nmax-hardware,076-0WH-home,76,2600,126760,154105,27345,126948,154293,27345,0,0\\nmax-hardware,076-2G-home,76,8119,132279,154155,21876,132467,154342,21875,1,0\\nmax-hardware,076-1WG-home,76,2700,126860,154205,27345,127049,154393,27344,1,0\\nmax-hardware,077-3H-home,77,23258,147418,154255,6837,147606,154443,6837,0,0\\nmax-hardware,077-0WH-home,77,2800,126960,154305,27345,127148,154492,27344,1,0\\nmax-hardware,077-2G-home,77,8319,132479,154355,21876,132667,154543,21876,0,0\\nmax-hardware,077-1WG-home,77,2900,127060,154405,27345,127248,154593,27345,0,0\\nmax-hardware,078-3H-home,78,23458,147618,154455,6837,147806,154643,6837,0,0\\nmax-hardware,078-0WH-home,78,3000,127160,154505,27345,127348,154692,27344,1,0\\nmax-hardware,078-2G-home,78,8519,132679,154555,21876,132868,154743,21875,1,0\\nmax-hardware,078-1WG-home,78,3100,127260,154605,27345,127449,154793,27344,1,0\\nmax-hardware,084-3H-home,84,20363,176179,182984,6805,176347,183156,6809,-4,0\\nmax-hardware,084-0WH-home,84,0,155816,183034,27218,155985,183202,27217,1,0\\nmax-hardware,084-2G-home,84,5493,161309,183084,21775,161479,183257,21778,-3,0\\nmax-hardware,084-1WG-home,84,100,155916,183134,27218,156085,183303,27218,0,0\\nmax-hardware,085-3H-home,85,20563,176379,183184,6805,176548,183352,6804,1,0\\nmax-hardware,085-0WH-home,85,200,156016,183234,27218,156186,183404,27218,0,0\\nmax-hardware,085-2G-home,85,5693,161509,183284,21775,161679,183453,21774,1,0\\nmax-hardware,085-1WG-home,85,300,156116,183334,27218,156286,183503,27217,1,0\\nmax-hardware,086-3H-home,86,20763,176579,183384,6805,176748,183553,6805,0,0\\nmax-hardware,086-0WH-home,86,400,156216,183434,27218,156385,183603,27218,0,0\\nmax-hardware,086-2G-home,86,5893,161709,183484,21775,161878,183652,21774,1,0\\nmax-hardware,086-1WG-home,86,500,156316,183534,27218,156486,183703,27217,1,0\\nmax-hardware,087-3H-home,87,20963,176779,183584,6805,176948,183753,6805,0,0\\nmax-hardware,087-0WH-home,87,600,156416,183634,27218,156586,183804,27218,0,0\\nmax-hardware,087-2G-home,87,6093,161909,183684,21775,162078,183853,21775,0,0\\nmax-hardware,087-1WG-home,87,700,156516,183734,27218,156686,183903,27217,1,0\\nmax-hardware,088-3H-home,88,21163,176979,183784,6805,177147,183952,6805,0,0\\nmax-hardware,088-0WH-home,88,800,156616,183834,27218,156785,184002,27217,1,0\\nmax-hardware,088-2G-home,88,6293,162109,183884,21775,162278,184053,21775,0,0\\nmax-hardware,088-1WG-home,88,900,156716,183934,27218,156885,184102,27217,1,0\\nmax-hardware,089-3H-home,89,21363,177179,183984,6805,177349,184153,6804,1,0\\nmax-hardware,089-0WH-home,89,1000,156816,184034,27218,156986,184204,27218,0,0\\nmax-hardware,089-2G-home,89,6493,162309,184084,21775,162479,184253,21774,1,0\\nmax-hardware,089-1WG-home,89,1100,156916,184134,27218,157086,184303,27217,1,0\\nmax-hardware,090-3H-home,90,21563,177379,184184,6805,177548,184354,6806,-1,0\\nmax-hardware,090-0WH-home,90,1200,157016,184234,27218,157186,184404,27218,0,0\\nmax-hardware,090-2G-home,90,6693,162509,184284,21775,162679,184453,21774,1,0\\nmax-hardware,090-1WG-home,90,1300,157116,184334,27218,157286,184503,27217,1,0\\nmax-hardware,091-3H-home,91,21763,177579,184384,6805,177748,184553,6805,0,0\\nmax-hardware,091-0WH-home,91,1400,157216,184434,27218,157385,184602,27217,1,0\\nmax-hardware,091-2G-home,91,6893,162709,184484,21775,162879,184654,21775,0,0\\nmax-hardware,091-1WG-home,91,1500,157316,184534,27218,157486,184702,27216,2,0\\nmax-hardware,092-3H-home,92,21963,177779,184584,6805,177949,184753,6804,1,0\\nmax-hardware,092-0WH-home,92,1600,157416,184634,27218,157586,184803,27217,1,0\\nmax-hardware,092-2G-home,92,7093,162909,184684,21775,163079,184852,21773,2,0\\nmax-hardware,092-1WG-home,92,1700,157516,184734,27218,157686,184904,27218,0,0\\nmax-hardware,093-3H-home,93,22163,177979,184784,6805,178147,184953,6806,-1,0\\nmax-hardware,093-0WH-home,93,1800,157616,184834,27218,157785,185003,27218,0,0\\nmax-hardware,093-2G-home,93,7293,163109,184884,21775,163279,185053,21774,1,0\\nmax-hardware,093-1WG-home,93,1900,157716,184934,27218,157886,185102,27216,2,0\\nmax-hardware,094-3H-home,94,22363,178179,184984,6805,178349,185154,6805,0,0\\nmax-hardware,094-0WH-home,94,2000,157816,185034,27218,157986,185203,27217,1,0\\nmax-hardware,094-2G-home,94,7493,163309,185084,21775,163479,185252,21773,2,0\\nmax-hardware,094-1WG-home,94,2100,157916,185134,27218,158085,185303,27218,0,0\\nmax-hardware,095-3H-home,95,22563,178379,185184,6805,178549,185354,6805,0,0\\nmax-hardware,095-0WH-home,95,2200,158016,185234,27218,158187,185403,27216,2,0\\nmax-hardware,095-2G-home,95,7693,163509,185284,21775,163679,185453,21774,1,0\\nmax-hardware,095-1WG-home,95,2300,158116,185334,27218,158285,185502,27217,1,0\\nmax-hardware,096-3H-home,96,22763,178579,185384,6805,178748,185553,6805,0,0\\nmax-hardware,096-0WH-home,96,2400,158216,185434,27218,158385,185601,27216,2,0\\nmax-hardware,096-2G-home,96,7893,163709,185484,21775,163878,185652,21774,1,0\\nmax-hardware,096-1WG-home,96,2500,158316,185534,27218,158486,185703,27217,1,0\\nmax-hardware,097-3H-home,97,22963,178779,185584,6805,178948,185753,6805,0,0\\nmax-hardware,097-0WH-home,97,2600,158416,185634,27218,158585,185802,27217,1,0\\nmax-hardware,097-2G-home,97,8093,163909,185684,21775,164079,185853,21774,1,0\\nmax-hardware,097-1WG-home,97,2700,158516,185734,27218,158685,185902,27217,1,0\\nmax-hardware,098-3H-home,98,23163,178979,185784,6805,179148,185953,6805,0,0\\nmax-hardware,098-0WH-home,98,2800,158616,185834,27218,158786,186003,27217,1,0\\nmax-hardware,098-2G-home,98,8293,164109,185884,21775,164280,186053,21773,2,0\\nmax-hardware,098-1WG-home,98,2900,158716,185934,27218,158885,186102,27217,1,0\\nmax-hardware,099-3H-home,99,23363,179179,185984,6805,179349,186153,6804,1,0\\nmax-hardware,099-0WH-home,99,3000,158816,186034,27218,158986,186202,27216,2,0\\nmax-hardware,099-2G-home,99,8493,164309,186084,21775,164478,186253,21775,0,0\\nmax-hardware,099-1WG-home,99,3100,158916,186134,27218,159086,186303,27217,1,0\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"39.9.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":17789635470.5,\"moneyMax\":177896354705,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1386,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"30.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":25429477582,\"moneyMax\":254294775820,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1310,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"34.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":9237993470.5,\"moneyMax\":92379934705,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1104,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"72.4.1.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6344,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":292,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":81335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":81332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":19805987479.5,\"moneyMax\":198059874795,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1108,\"serverGrowth\":74}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"37.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":16328524149.5,\"moneyMax\":163285241495,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1107,\"serverGrowth\":94}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"88.9.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":8784576381,\"moneyMax\":87845763810,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":991,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"13.7.0.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6345,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":7364265570,\"moneyMax\":73642655700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1056,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"87.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":11437257829,\"moneyMax\":114372578290,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":965,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"34.5.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":10813156654,\"moneyMax\":108131566540,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1155,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"28.3.5.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6317,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1170,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":80004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":80005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":720457601,\"moneyMax\":7204576010,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1223,\"serverGrowth\":83}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"74.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1561,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"75.5.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":537341337.5,\"moneyMax\":5373413375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":961,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"86.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":415897855,\"moneyMax\":4158978550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1001,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"87.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":382658086,\"moneyMax\":3826580860,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":41}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"0.7.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6349,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":340008806,\"moneyMax\":3400088060,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"95.2.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6355,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":391333226.5,\"moneyMax\":3913332265,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"44.8.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":483201341,\"moneyMax\":4832013410,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"39.4.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6366,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":590641629,\"moneyMax\":5906416290,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"16.7.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6356,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":400211349.5,\"moneyMax\":4002113495,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"55.8.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6378,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":274887436,\"moneyMax\":2748874360,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"32.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":433634606,\"moneyMax\":4336346060,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"39.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":401238455,\"moneyMax\":4012384550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"42.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":531747484.5,\"moneyMax\":5317474845,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"41.4.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6369,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":453436186,\"moneyMax\":4534361860,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"43.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":466086849,\"moneyMax\":4660868490,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"10.0.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":369644088,\"moneyMax\":3696440880,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"38.5.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6380,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":388328729.5,\"moneyMax\":3883287295,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"64.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":731988486,\"moneyMax\":7319884860,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"73.9.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6384,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":784960696.5,\"moneyMax\":7849606965,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"69.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":562924034,\"moneyMax\":5629240340,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"36.0.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":696995496.5,\"moneyMax\":6969954965,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"5.4.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6381,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":522973622.5,\"moneyMax\":5229736225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-657325.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[132,49,178,90,62,35,191,22,85,128,78,13,100,67,32,178,75,197,88,124,40,66,79,80,178,99,175,121,117,71,122,165,5,43,151]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"16.6.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6377,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":395805525.5,\"moneyMax\":3958055255,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":698,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"19.4.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6363,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":335039426,\"moneyMax\":3350394260,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"6.9.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6365,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":341876201,\"moneyMax\":3418762010,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900670.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[127,151,118,82,79,195,81,12,8,108,72,180,49],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"71.6.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6351,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":117220479,\"moneyMax\":1172204790,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"37.1.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6352,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":92971930.5,\"moneyMax\":929719305,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":370,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"60.9.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6346,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":469875489.5,\"moneyMax\":4698754895,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":760,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"82.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6376,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"minDifficulty\":29,\"moneyAvailable\":174849324,\"moneyMax\":1748493240,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":475,\"serverGrowth\":41}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"53.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":265486797.5,\"moneyMax\":2654867975,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":552,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"94.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6360,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":164325378,\"moneyMax\":1643253780,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"15.5.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6383,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":87118818.5,\"moneyMax\":871188185,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":278,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"46.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":114216067.5,\"moneyMax\":1142160675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":320,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"69.1.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6350,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":49}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"18.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":37821178,\"moneyMax\":378211780,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":278,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"37.1.4.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6385,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"48.8.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6370,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"20.0.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6371,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1150000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"35.0.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6372,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1250000,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"48.0.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6357,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3750000,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.9.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6375,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1375000,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"37.3.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6362,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"53.4.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6353,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618807.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":93151322,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"19.7.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6373,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"47.6.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6374,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"6.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6364,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":112502776.73087019,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"94.8.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6361,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"63.8.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6359,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46.5,\"hackDifficulty\":46.5,\"minDifficulty\":16,\"moneyAvailable\":31142933.5,\"moneyMax\":311429335,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":189,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"79.5.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":28843528.5,\"moneyMax\":288435285,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":239,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"89.1.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6358,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"1.9.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6347,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":502,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"40.0.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6367,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1063,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"42.7.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":713,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"33.1.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6368,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":536,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"76.0.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6354,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"61.7.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6348,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"89.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6379,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":79498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":79557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":79502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":513,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"23.2.5.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6382,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":75914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":75940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":75918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"46.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"28.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"95.7.7.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"85.8.1.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6318,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"45.1.9.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6319,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"39.7.8.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6320,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"43.7.2.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6321,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"94.8.6.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6322,\"ramUsage\":1.75,\"server\":\"pserv-24\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-24\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"46.5.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6323,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"85.2.8.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6324,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"94.2.7.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6325,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"40.4.7.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6326,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"95.0.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6327,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"25.3.6.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6328,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"46.4.5.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6329,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"63.2.4.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6330,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"90.3.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6331,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"1.0.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6332,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"68.9.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6333,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"23.0.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6334,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"79.5.0.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6335,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"30.0.5.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6336,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"0.5.2.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6337,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"61.7.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6338,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"9.1.3.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6339,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"79.8.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6340,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"79.0.5.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",19683],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6341,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":549,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6342,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///949d077d-ee79-4687-97e2-d11eec0653e7\"}],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"19.4.8.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":6343,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.grow(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b5f28435-8f87-4b74-a56c-c8474989e1c0\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"moduleSequenceNumber\":92393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.weaken(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed5a36e2-b799-48dc-96cb-b64c13c5d315\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"moduleSequenceNumber\":92877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let writeData = !!ns.args[6];\\r\\n    let actualStart, actualFinish;\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    if (writeData) {\\r\\n        actualStart = Date.now() - Number(ns.args[7]);\\r\\n    }\\r\\n    await ns.hack(hostname);\\r\\n    if (writeData) {\\r\\n        actualFinish = Date.now() - Number(ns.args[7]);\\r\\n        let outstr = ns.sprintf(\\r\\n            \\\"%s,%03d-%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\\\",\\r\\n            ns.args[0], // targetname\\r\\n            ns.args[5],\\r\\n            ns.args[8], // batchID + Script Type\\r\\n            ns.args[5], // batchID\\r\\n            ns.args[1], // offset\\r\\n            ns.args[2], // est start time\\r\\n            ns.args[3], // est end time\\r\\n            Number(ns.args[3]) - Number(ns.args[2]), // est operation time\\r\\n            actualStart, // actual start\\r\\n            actualFinish, // actual end\\r\\n            actualFinish - actualStart, // actual operation time\\r\\n            (Number(ns.args[3]) - Number(ns.args[2])) - (actualFinish - actualStart), // difference between est and actual operation times\\r\\n            ns.args[4] // est exp\\r\\n        );\\r\\n\\r\\n        await ns.write(ns.args[6], outstr, \\\"a\\\");\\r\\n    }\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"moduleSequenceNumber\":92307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":279.33015294185117,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":35.667,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":2806.1690663714185}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":66.0925,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":10457.535205735165}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":6523.6698925537885}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":6440.871596676913}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":21.5234,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":7794.034455662552}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":11.8928,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":21.2902,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":29.7913,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":41.6926,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0.6245,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":1077.3356617814125}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"brute\":\"home; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; killall; run starter.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"eff\":\"run eff.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"solo\":\"run solo.js\",\"batch\":\"run batcher.js\",\"s5\":\"run solo.js 5 go; tail solo.js\",\"s10\":\"run solo.js 10 go; tail solo.js\",\"s20\":\"run solo.js 20 go; tail solo.js\",\"s30\":\"run solo.js 30 go; tail solo.js\",\"s60\":\"run solo.js 60 go; tail solo.js\",\"s480\":\"run solo.js 480 go; tail solo.js\",\"fav\":\"run favor.js\",\"start\":\"run buy_programs.js; run crawl.js; run solo.js 2 go; tail solo.js\",\"c\":\"run clock.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"IsSidebarOpened\":true}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642611049827","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642640354614"}}