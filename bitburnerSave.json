{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2186,\"hp\":35,\"max_hp\":35,\"strength\":291,\"defense\":253,\"dexterity\":407,\"agility\":253,\"charisma\":2,\"intelligence\":112,\"hacking_chance_mult\":2.8780070040468986,\"hacking_speed_mult\":3.129169518545453,\"hacking_money_mult\":9.12514118892599,\"hacking_grow_mult\":5.040010024038755,\"hacking_exp\":36809471.336709656,\"strength_exp\":310032,\"defense_exp\":310032,\"dexterity_exp\":310032,\"agility_exp\":310032,\"charisma_exp\":0,\"intelligence_exp\":16984.836078934728,\"hacking_mult\":12.232736847941759,\"strength_mult\":3.162791974664151,\"defense_mult\":2.7502538910123056,\"dexterity_mult\":4.4279087645298105,\"agility_mult\":2.7502538910123056,\"charisma_mult\":4.629687741853269,\"hacking_exp_mult\":17.79333299394368,\"strength_exp_mult\":3.8269782893436237,\"defense_exp_mult\":3.8269782893436237,\"dexterity_exp_mult\":3.8269782893436237,\"agility_exp_mult\":3.8269782893436237,\"charisma_exp_mult\":3.818828242986688,\"company_rep_mult\":5.520934545575039,\"faction_rep_mult\":3.8022965189910742,\"money\":375373692184.16284,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":768,\"hashes\":39.359829518510196,\"upgrades\":{\"Sell for Money\":307369,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Netburners\"],\"factionInvitations\":[\"Sector-12\",\"Slum Snakes\",\"CyberSec\",\"The Black Hand\",\"BitRunners\",\"The Syndicate\"],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":45},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":10},{\"lvl\":1,\"n\":6},{\"lvl\":1,\"n\":9},{\"lvl\":3,\"n\":12},{\"lvl\":3,\"n\":2},{\"lvl\":1,\"n\":3}],\"numPeopleKilled\":0,\"karma\":-146954.2000000002,\"crime_money_mult\":3.09289170932424,\"crime_success_mult\":3.09289170932424,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Netburners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":2.668999949091552,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":27.023968737577007,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":432823.7147425103,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":4014980.3079327294,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":32433400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":5.119925029296908,\"hacknet_node_money_mult\":5.5050778963772355,\"hacknet_node_purchase_cost_mult\":0.31948826424187154,\"hacknet_node_ram_cost_mult\":0.4176317179632308,\"hacknet_node_core_cost_mult\":0.4176317179632308,\"hacknet_node_level_cost_mult\":0.35498696026874615,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Ethical Hacking\",\"earnedRespect\":1838.2566251285411,\"hack\":48147,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":44,\"hack_exp\":57734630.24239701,\"str_exp\":0.13333333333333333,\"def_exp\":0.13333333333333333,\"dex_exp\":0.13333333333333333,\"agi_exp\":0.13333333333333333,\"cha_exp\":1557.9122317824394,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":6492526.380407469,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"g0\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":5417925.4207413215,\"hack\":101641,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":112175571.53168228,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203528.0950412097,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25889948.650640775,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17258.548905465872,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"g1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4936927.04170456,\"hack\":88328,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":675,\"hack_exp\":110069248.02804057,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":238418.90358231185,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25937583.706891846,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":23692.187756660984,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4901760.121122301,\"hack\":87477,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":104757125.27522211,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203341.91907715285,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25646404.184211288,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17235.246106810424,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4899462.115501422,\"hack\":87421,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":104682604.35178168,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203315.6220713384,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25616726.087438997,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17232.370153685835,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4890618.965560037,\"hack\":87201,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":103578102.46459387,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203306.29106119188,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25532348.070157528,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17232.370153685835,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4904173.526749099,\"hack\":87581,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":103372135.60305256,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203263.0284840109,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25763395.105015572,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17226.61824743665,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4887654.188522508,\"hack\":87158,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":561,\"hack_exp\":101833203.03651114,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":203253.69903126982,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":25578041.765384804,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":17226.61824743665,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":3058182.8305533645,\"hack\":42984,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":156,\"hack_exp\":62823456.944864236,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":68741.7272014855,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":6745289.499352678,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":3059627.189993339,\"hack\":43019,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":156,\"hack_exp\":62721235.30111004,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":68738.70728622017,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":6758129.6156296935,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":3056606.1927596605,\"hack\":42960,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":156,\"hack_exp\":62484982.08057421,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":68735.68737095485,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":6743819.552266363,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":3050188.836294286,\"hack\":42840,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":156,\"hack_exp\":61357615.75904671,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":68729.64754042421,\"hack_mult\":1.9759578300000002,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":6727103.241576048,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\"],\"name\":\"g11\"}}],\"wanted\":1,\"respect\":47064841.74254467,\"isHackingGang\":true,\"respectGainRate\":207.44782395078172,\"wantedGainRate\":-2.4424900260460736,\"moneyGainRate\":594992.6846211009,\"storedCycles\":1,\"storedTerritoryAndPowerCycles\":2,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":92,\"strength\":108,\"defense\":108,\"dexterity\":114,\"agility\":119,\"charisma\":1,\"intelligence\":1,\"hp\":20,\"max_hp\":20,\"hacking_exp\":57353.32968744946,\"strength_exp\":990072,\"defense_exp\":990072,\"dexterity_exp\":990072,\"agility_exp\":990072,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.2247200000000003,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1.4437500000000003,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":31.012985283975254,\"hacking_speed_mult\":18.34013176272983,\"hacking_money_mult\":15419.479616433073,\"hacking_grow_mult\":226.68743133544928,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":19.251515520748644,\"hacknet_node_purchase_cost_mult\":0.38054255625,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.5220062499999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":93759.52463985233,\"str\":223562.70555276555,\"def\":223562.70555276555,\"dex\":223562.70555276555,\"agi\":223562.70555276555,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":93759.52463985233,\"str\":223562.70555276555,\"def\":223562.70555276555,\"dex\":223562.70555276555,\"agi\":223562.70555276555,\"cha\":0,\"money\":731262650},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":98,\"strength\":115,\"defense\":115,\"dexterity\":120,\"agility\":126,\"charisma\":1,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":245993.3296881166,\"strength_exp\":1535963,\"defense_exp\":1535963,\"dexterity_exp\":1535963,\"agility_exp\":1535963,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.051386092639325,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":33438.718800002534,\"str\":307804.8576550215,\"def\":307804.8576550215,\"dex\":307804.8576550215,\"agi\":307804.8576550215,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":33438.718800002534,\"str\":307804.8576550215,\"def\":307804.8576550215,\"dex\":307804.8576550215,\"agi\":307804.8576550215,\"cha\":0,\"money\":1023246050},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":98,\"strength\":115,\"defense\":115,\"dexterity\":120,\"agility\":126,\"charisma\":1,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":245993.3296881166,\"strength_exp\":1535903,\"defense_exp\":1535903,\"dexterity_exp\":1535903,\"agility_exp\":1535903,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393246,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":33438.718800002534,\"str\":307785.44387902145,\"def\":307785.44387902145,\"dex\":307785.44387902145,\"agi\":307785.44387902145,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":33438.718800002534,\"str\":307785.44387902145,\"def\":307785.44387902145,\"dex\":307785.44387902145,\"agi\":307785.44387902145,\"cha\":0,\"money\":1022775800},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":98,\"strength\":115,\"defense\":115,\"dexterity\":120,\"agility\":126,\"charisma\":1,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":245993.3296881166,\"strength_exp\":1535849,\"defense_exp\":1535849,\"dexterity_exp\":1535849,\"agility_exp\":1535849,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393255,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":33438.718800002534,\"str\":307842.99257202144,\"def\":307842.99257202144,\"dex\":307842.99257202144,\"agi\":307842.99257202144,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":33438.718800002534,\"str\":307842.99257202144,\"def\":307842.99257202144,\"dex\":307842.99257202144,\"agi\":307842.99257202144,\"cha\":0,\"money\":1023671300},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":98,\"strength\":115,\"defense\":115,\"dexterity\":120,\"agility\":126,\"charisma\":1,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":245993.3296881166,\"strength_exp\":1535849,\"defense_exp\":1535849,\"dexterity_exp\":1535849,\"agility_exp\":1535849,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.095152230663667,\"hacking_speed_mult\":3.0513860926393255,\"hacking_money_mult\":67.09496647958107,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":33438.718800002534,\"str\":307695.99771802145,\"def\":307695.99771802145,\"dex\":307695.99771802145,\"agi\":307695.99771802145,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":33438.718800002534,\"str\":307695.99771802145,\"def\":307695.99771802145,\"dex\":307695.99771802145,\"agi\":307695.99771802145,\"cha\":0,\"money\":1021846550},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":98,\"strength\":115,\"defense\":115,\"dexterity\":120,\"agility\":126,\"charisma\":1,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":245993.3296881166,\"strength_exp\":1535825,\"defense_exp\":1535825,\"dexterity_exp\":1535825,\"agility_exp\":1535825,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.05,\"agility_mult\":1.1025,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":4.0951522306636665,\"hacking_speed_mult\":3.0513860926393246,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.5220937500000002,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"Mug\",\"currentTask\":3,\"currentTaskLocation\":\"19800\",\"currentTaskMaxTime\":4000,\"currentTaskTime\":2000,\"earningsForSleeves\":{\"hack\":33438.718800002534,\"str\":307705.30902002146,\"def\":307705.30902002146,\"dex\":307705.30902002146,\"agi\":307705.30902002146,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":33438.718800002534,\"str\":307705.30902002146,\"def\":307705.30902002146,\"dex\":307705.30902002146,\"agi\":307705.30902002146,\"cha\":0,\"money\":1022033300},\"earningsForTask\":{\"hack\":0,\"str\":51672,\"def\":51672,\"dex\":51672,\"agi\":51672,\"cha\":0,\"money\":170517600},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":0,\"money\":19800},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":3,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":9,\"lastUpdate\":1644249991831,\"totalPlaytime\":4542819400,\"playtimeSinceLastAug\":34489600,\"playtimeSinceLastBitnode\":291194200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":4950000000,\"corporation\":0,\"crime\":0,\"gang\":101984098334.04848,\"hacking\":7534287186,\"hacknet\":307369000000,\"hacknet_expenses\":-47201098935.884415,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":1023105600,\"stock\":0,\"total\":375372692184.16284,\"work\":0,\"servers\":0,\"other\":-286700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":23962500000,\"corporation\":0,\"crime\":328307731.25324696,\"gang\":-15004281400.117678,\"hacking\":26055600612.50226,\"hacknet\":1159180000000,\"hacknet_expenses\":-363194183242.6066,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":3374935650,\"stock\":0,\"total\":419989910894.3423,\"work\":0,\"servers\":-23216018709.024063,\"other\":-2870900000,\"augmentations\":-388626049747.6577}},\"scriptProdSinceLastAug\":7534287186,\"exploits\":[\"EditSaveFile\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1642730615920},{\"ID\":\"DEVMENU\",\"unlockedOn\":1642744104484},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1642744273812},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1642744333814},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1642744725024},{\"ID\":\"BYPASS\",\"unlockedOn\":1642744801529},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1642744981454},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1642744981461},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1642745701455},{\"ID\":\"SF6.1\",\"unlockedOn\":1642785770037},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1642788950040},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1642807972554},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1642816068703},{\"ID\":\"SF9.1\",\"unlockedOn\":1643235429747},{\"ID\":\"SF12.1\",\"unlockedOn\":1643323114293},{\"ID\":\"GANG\",\"unlockedOn\":1643331994294},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643355274307},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643359714297},{\"ID\":\"SF2.1\",\"unlockedOn\":1643416557483},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643613074511},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643779578015},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643788362347},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643788362355},{\"ID\":\"SF3.1\",\"unlockedOn\":1643790288945},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643950278393}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":51.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34448.410000059695,\"pid\":26,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///21fe138d-0f5d-4e7a-83c5-48979500fac8\",\"moduleSequenceNumber\":207208}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cct.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34419.41000006012,\"pid\":41,\"ramUsage\":27,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///4ccc42eb-7d63-447a-b903-e25071671fcf\",\"moduleSequenceNumber\":207014},{\"filename\":\"cct.js\",\"url\":\"blob:file:///e6c064c3-e247-49cb-a9b6-c163c507e248\",\"moduleSequenceNumber\":207215}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[30],\"dataMap\":{},\"filename\":\"smart_hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33376467.635453653,\"onlineMoneyMade\":7222467905,\"onlineRunningTime\":29423.01000007198,\"pid\":3086,\"ramUsage\":16.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///b53259e0-8481-4d63-9828-ba96271c75b1\",\"moduleSequenceNumber\":224887},{\"filename\":\"smart_hack_env.js\",\"url\":\"blob:file:///6e69e3fc-04f1-43d5-bebd-200b6b928ce2\",\"moduleSequenceNumber\":224897},{\"filename\":\"util.js\",\"url\":\"blob:file:///2cda0556-b32b-4ae9-8f0e-a7bf66d14729\",\"moduleSequenceNumber\":224887},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///bbc42443-b66d-4e91-a2ab-1e3b587996fd\",\"moduleSequenceNumber\":224902}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"leech.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29374.210000071802,\"pid\":3133,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///07887153-e30e-4bd3-9897-37e748611a95\",\"moduleSequenceNumber\":219309}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":224871,\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":224872,\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let targetServer = ns.getServer(ns.args[0]);\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetServer.moneyMax / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///09862175-bb93-45b5-a703-09e05c88aba8\",\"moduleSequenceNumber\":25017}],\"dependents\":[],\"ramUsage\":4.7,\"server\":\"home\",\"moduleSequenceNumber\":224873,\"_hash\":\"482a9beb35dd25b989f01392d4ab4a49e02be0cd92ad83fe35cbb3ce92bb8677\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///6552377a-258d-4ced-b3fe-783dbe72673d\",\"moduleSequenceNumber\":128}],\"dependents\":[],\"ramUsage\":11.25,\"server\":\"home\",\"moduleSequenceNumber\":224874,\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { mapHosts } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n        //this.print(ns);\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        const nums = cct.data.slice();\\r\\n        for (let i = 1; i < nums.length; i++) {\\r\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, Math.max(...nums));\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        const spiral = [];\\r\\n        const m = cct.data.length;\\r\\n        const n = cct.data[0].length;\\r\\n        let u = 0;\\r\\n        let d = m - 1;\\r\\n        let l = 0;\\r\\n        let r = n - 1;\\r\\n        let k = 0;\\r\\n        while (true) {\\r\\n            // Up\\r\\n            for (let col = l; col <= r; col++) {\\r\\n                spiral[k] = cct.data[u][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++u > d) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // Right\\r\\n            for (let row = u; row <= d; row++) {\\r\\n                spiral[k] = cct.data[row][r];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--r < l) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // Down\\r\\n            for (let col = r; col >= l; col--) {\\r\\n                spiral[k] = cct.data[d][col];\\r\\n                ++k;\\r\\n            }\\r\\n            if (--d < u) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // Left\\r\\n            for (let row = d; row >= u; row--) {\\r\\n                spiral[k] = cct.data[row][l];\\r\\n                ++k;\\r\\n            }\\r\\n            if (++l > r) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, spiral);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        const n = cct.data.length;\\r\\n        let i = 0;\\r\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n            reach = Math.max(i + cct.data[i], reach);\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, i === n ? 1 : 0);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        const intervals = cct.data.slice();\\r\\n        intervals.sort((a, b) => {\\r\\n            return a[0] - b[0];\\r\\n        });\\r\\n\\r\\n        const result = [];\\r\\n        let start = intervals[0][0];\\r\\n        let end = intervals[0][1];\\r\\n        for (const interval of intervals) {\\r\\n            if (interval[0] <= end) {\\r\\n                end = Math.max(end, interval[1]);\\r\\n            } else {\\r\\n                result.push([start, end]);\\r\\n                start = interval[0];\\r\\n                end = interval[1];\\r\\n            }\\r\\n        }\\r\\n        result.push([start, end]);\\r\\n\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        let maxCur = 0;\\r\\n        let maxSoFar = 0;\\r\\n        for (let i = 1; i < cct.data.length; ++i) {\\r\\n            maxCur = Math.max(0, (maxCur += cct.data[i] - cct.data[i - 1]));\\r\\n            maxSoFar = Math.max(maxCur, maxSoFar);\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, maxSoFar);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        let profit = 0;\\r\\n        for (let p = 1; p < cct.data.length; ++p) {\\r\\n            profit += Math.max(cct.data[p] - cct.data[p - 1], 0);\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, profit);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        let hold1 = Number.MIN_SAFE_INTEGER;\\r\\n        let hold2 = Number.MIN_SAFE_INTEGER;\\r\\n        let release1 = 0;\\r\\n        let release2 = 0;\\r\\n        for (const price of cct.data) {\\r\\n            release2 = Math.max(release2, hold2 + price);\\r\\n            hold2 = Math.max(hold2, release1 - price);\\r\\n            release1 = Math.max(release1, hold1 + price);\\r\\n            hold1 = Math.max(hold1, price * -1);\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, release2);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        const k = cct.data[0];\\r\\n        const prices = cct.data[1];\\r\\n\\r\\n        const len = prices.length;\\r\\n        if (len < 2) {\\r\\n            return parseInt(ans) === 0;\\r\\n        }\\r\\n        if (k > len / 2) {\\r\\n            let res = 0;\\r\\n            for (let i = 1; i < len; ++i) {\\r\\n                res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n            }\\r\\n\\r\\n            return parseInt(ans) === res;\\r\\n        }\\r\\n\\r\\n        const hold = [];\\r\\n        const rele = [];\\r\\n        hold.length = k + 1;\\r\\n        rele.length = k + 1;\\r\\n        for (let i = 0; i <= k; ++i) {\\r\\n            hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n            rele[i] = 0;\\r\\n        }\\r\\n\\r\\n        let cur;\\r\\n        for (let i = 0; i < len; ++i) {\\r\\n            cur = prices[i];\\r\\n            for (let j = k; j > 0; --j) {\\r\\n                rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, rele[k]);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        const n = cct.data[0]; // Number of rows\\r\\n        const m = cct.data[1]; // Number of columns\\r\\n        const currentRow = [];\\r\\n        currentRow.length = n;\\r\\n\\r\\n        for (let i = 0; i < n; i++) {\\r\\n            currentRow[i] = 1;\\r\\n        }\\r\\n        for (let row = 1; row < m; row++) {\\r\\n            for (let i = 1; i < n; i++) {\\r\\n                currentRow[i] += currentRow[i - 1];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, currentRow[n - 1]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        const obstacleGrid = [];\\r\\n        obstacleGrid.length = cct.data.length;\\r\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\r\\n            obstacleGrid[i] = cct.data[i].slice();\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\r\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\r\\n                if (obstacleGrid[i][j] == 1) {\\r\\n                    obstacleGrid[i][j] = 0;\\r\\n                } else if (i == 0 && j == 0) {\\r\\n                    obstacleGrid[0][0] = 1;\\r\\n                } else {\\r\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        let left = 0;\\r\\n        let right = 0;\\r\\n        const res = [];\\r\\n\\r\\n        for (let i = 0; i < cct.data.length; ++i) {\\r\\n            if (cct.data[i] === \\\"(\\\") {\\r\\n                ++left;\\r\\n            } else if (cct.data[i] === \\\")\\\") {\\r\\n                left > 0 ? --left : ++right;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function dfs(pair, index, left, right, s, solution, res) {\\r\\n            if (s.length === index) {\\r\\n                if (left === 0 && right === 0 && pair === 0) {\\r\\n                    for (let i = 0; i < res.length; i++) {\\r\\n                        if (res[i] === solution) {\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                    res.push(solution);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (s[index] === \\\"(\\\") {\\r\\n                if (left > 0) {\\r\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n                }\\r\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            } else if (s[index] === \\\")\\\") {\\r\\n                if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n                if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n            } else {\\r\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        dfs(0, 0, left, right, cct.data, \\\"\\\", res);\\r\\n\\r\\n        answerCCT(ns, cct, res);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        const num = cct.data[0];\\r\\n        const target = cct.data[1];\\r\\n\\r\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n            if (pos === num.length) {\\r\\n                if (target === evaluated) {\\r\\n                    res.push(path);\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            for (let i = pos; i < num.length; ++i) {\\r\\n                if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                    break;\\r\\n                }\\r\\n                const cur = parseInt(num.substring(pos, i + 1));\\r\\n\\r\\n                if (pos === 0) {\\r\\n                    helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n                } else {\\r\\n                    helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                    helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                    helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const result = [];\\r\\n        helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n\\r\\n        answerCCT(ns, cct, result);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        let fac = 2;\\r\\n        let n = cct.data;\\r\\n        while (n > (fac - 1) * (fac - 1)) {\\r\\n            while (n % fac === 0) {\\r\\n                n = Math.round(n / fac);\\r\\n            }\\r\\n            ++fac;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, n === 1 ? fac - 1 : n);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let hosts = mapHosts(ns);\\r\\n    while (true) {\\r\\n        let ccts = [];\\r\\n        for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n            let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n            if (ls.length === 0) continue;\\r\\n\\r\\n            ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n        }\\r\\n\\r\\n        sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n        for (const cct of ccts) {\\r\\n            cct.solve(ns);\\r\\n        }\\r\\n\\r\\n        await ns.sleep(60 * 1000)\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///16dca05f-9485-4221-86b5-3a668877a81b\",\"moduleSequenceNumber\":224887},{\"filename\":\"cct.js\",\"url\":\"blob:file:///65b0ac2b-3c21-4054-a487-55fd022fae7f\",\"moduleSequenceNumber\":225061}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":225061,\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction listServers(ns, hostnames) {\\r\\n    let hackableHosts = hostnames.sort((a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a));\\r\\n\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6dGB %8.2f\\\",\\r\\n            hostname,\\r\\n            ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"),\\r\\n            ns.getServerRequiredHackingLevel(hostname),\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            ns.getServerMaxRam(hostname),\\r\\n            Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let hostnames = allHosts(ns)\\r\\n\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n\\r\\n    listServers(ns, hostnames);\\r\\n}\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///6a96c4c6-6dce-4970-af6a-0cafd5049854\",\"moduleSequenceNumber\":224887},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///de180029-b105-4da9-b0c8-c41149ed0901\",\"moduleSequenceNumber\":224903}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":224903,\"_hash\":\"f794cb5c9400e1bd7590de9d4c74f655abc7a9f0983d213a5828b9fb77b56e2e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function calcHackRate(ns, hostname, targetname, simMinutes = 2) {\\r\\n    let env = new SuperHackEnv(ns, targetname, [hostname]);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    //ns.tprintf(\\\"Running fastSim on %s=>%s\\\", env.hostname, env.targetname)\\r\\n    let income = env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    //     env.hostname,\\r\\n    //     env.targetname,\\r\\n    //     env.ramAllowance,\\r\\n    //     ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n    // );\\r\\n\\r\\n    return income;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts(ns)\\r\\n        .filter(serverIsHackable.bind(null, ns))\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcHackRate(ns, host.hostname, targetname, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let allHostnames = allHosts(ns);\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"super_hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys(ns);\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer.bind(null, ns))\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n            await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n            let targetname = targetnames.shift();\\r\\n            ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n            ns.exec(attackScript, hostname, 1, targetname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///b1e8fedd-bb3c-4576-8e77-f028dc740123\",\"moduleSequenceNumber\":167684},{\"filename\":\"util.js\",\"url\":\"blob:file:///bf410739-e899-46b9-8a95-dda844715459\",\"moduleSequenceNumber\":167680},{\"filename\":\"eff.js\",\"url\":\"blob:file:///cf0828a5-144e-4fe3-9fec-cdbb3b233bc7\",\"moduleSequenceNumber\":171422}],\"dependents\":[],\"ramUsage\":22.1,\"server\":\"home\",\"moduleSequenceNumber\":224877,\"_hash\":\"deca27d53fa75b3fb893f3efb941a97068eb3c26e73668b8710896e640f1781e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":224878,\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n\\r\\n    for (let faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(75);\\r\\n        const currentRep =\\r\\n            ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n\\r\\n        if (favor > 75) continue;\\r\\n\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 75) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///e3d08e1f-58f4-46aa-b88d-55a8c0a0f749\",\"moduleSequenceNumber\":201651}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":224879,\"_hash\":\"04341c97a4a67c1392a728df7896aa6866c240d584c64972c20e7a19fb1bd555\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///74fbc846-8073-4350-bd7b-c88616dd071f\",\"moduleSequenceNumber\":224979}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":224979,\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a6797fd3-e87a-4182-a3e8-eace5461bb3d\",\"moduleSequenceNumber\":225051}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":225051,\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    for (let hostname of allHosts(ns)) {\\r\\n        if (hostname === \\\"home\\\") continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    for (let ps of ns.ps(\\\"home\\\")) {\\r\\n        if (\\r\\n            ps.filename === \\\"ka.js\\\" ||\\r\\n            ps.filename === \\\"clock.js\\\" ||\\r\\n            ps.filename === \\\"leech.js\\\" ||\\r\\n            ps.filename === \\\"hacknet.js\\\" ||\\r\\n            ps.filename === \\\"hacking_gang.js\\\" ||\\r\\n\\t\\t\\tps.filename === \\\"corp.js\\\" ||\\r\\n            ps.filename === \\\"cct.js\\\"\\r\\n        )\\r\\n            continue;\\r\\n        ns.kill(ps.pid);\\r\\n    }\\r\\n}\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///1a8ea822-2853-42f9-b621-1f0002515121\",\"moduleSequenceNumber\":224887},{\"filename\":\"ka.js\",\"url\":\"blob:file:///f9fd96f2-8cd8-4f70-9769-9be82091df74\",\"moduleSequenceNumber\":234976}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":234976,\"_hash\":\"c40b1517138d1fdaecb947feb5f5efdce507af5e0d6ea51141442ab63b12abc5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    scriptnames.map(function (name) {\\r\\n        let len = name.length + 2\\r\\n        if (len > maxFileLength) maxFileLength = len;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s %7.2fGB %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///70bf9fd8-d915-4e30-ae2c-8fa80af33842\",\"moduleSequenceNumber\":16610}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":224883,\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doBuyAndSoftenAll, doBackdoors, ALL_FACTIONS, stFormat } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    for (const [key, val] of Object.entries(stats)) {\\r\\n        ns.tprintf(\\\"%30s %s\\\", key, val);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        let factionRep =\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(faction);\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = factionRep >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep !== undefined && (ownedAugs.includes(dep) || installedAugs.includes(dep))) dep = undefined;\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n            ? \\\"OWNED\\\"\\r\\n            : this.purchaseable\\r\\n            ? \\\"PURCHASEABLE\\\"\\r\\n            : \\\"\\\";\\r\\n\\r\\n        if (ns.getPlayer().currentWorkFactionName === faction && installedStr === \\\"\\\") {\\r\\n            let repGainPerMs = (ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n            installedStr = stFormat(ns, (this.rep - factionRep) / repGainPerMs);\\r\\n        }\\r\\n        this.str = ns.sprintf(\\r\\n            \\\"%s: %s - %s [%s] %s\\\",\\r\\n            this.faction,\\r\\n            this.name,\\r\\n            ns.nFormat(this.price, \\\"$0.000a\\\"),\\r\\n            ns.nFormat(this.rep, \\\"0.000a\\\"),\\r\\n            installedStr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\") return false;\\r\\n        //return true;\\r\\n        // if (this.stats.company_rep_mult) return true;\\r\\n        // if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (this.stats.hacknet_node_core_cost_mult) return true;\\r\\n        if (this.stats.hacknet_node_level_cost_mult) return true;\\r\\n        if (this.stats.hacknet_node_money_mult) return true;\\r\\n        if (this.stats.hacknet_node_purchase_cost_mult) return true;\\r\\n        if (this.stats.hacknet_node_ram_cost_mult) return true;\\r\\n        if (\\r\\n            this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\"\\r\\n        )\\r\\n            return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    doBuyAndSoftenAll(ns);\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    let checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n    let sortedFactions = checkFactions.sort(\\r\\n        (a, b) =>\\r\\n            (ns.getPlayer().currentWorkFactionName === b ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(b) -\\r\\n            ((ns.getPlayer().currentWorkFactionName === a ? ns.getPlayer().workRepGained : 0) + ns.getFactionRep(a))\\r\\n    );\\r\\n    //let sortedFactions = ALL_FACTIONS.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (const faction of sortedFactions) {\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (augsToBuy.length === 0 && !topFaction) continue;\\r\\n\\r\\n        ns.tprintf(\\r\\n            \\\"%s (rep: %d):\\\",\\r\\n            faction,\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0) +\\r\\n                ns.getFactionRep(faction)\\r\\n        );\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n\\r\\n        topFaction = false;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        let checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            } else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency, need to loop multiple times until no more dependencies are found\\r\\n    while (true) {\\r\\n        let didDepMove = false;\\r\\n        for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n            let depName = allPurchaseableAugs[i].dep;\\r\\n            if (depName === undefined) continue;\\r\\n\\r\\n            // check to see if we've already re-organized this dep\\r\\n            if (i !== 0 && allPurchaseableAugs[i - 1].name === depName) continue;\\r\\n\\r\\n            let foundDep = false;\\r\\n            let j = i + 1;\\r\\n            while (j < allPurchaseableAugs.length) {\\r\\n                if (allPurchaseableAugs[j].name === depName) {\\r\\n                    let tmp = allPurchaseableAugs[j];\\r\\n                    // remove aug from current place\\r\\n                    allPurchaseableAugs.splice(j, 1);\\r\\n                    // place it before the main aug\\r\\n                    allPurchaseableAugs.splice(i, 0, tmp);\\r\\n                    foundDep = true;\\r\\n                    didDepMove = true;\\r\\n                    i++;\\r\\n                    break;\\r\\n                } else {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // if we dont have the dependency queued, remove this aug from the buy list\\r\\n            if (!foundDep) {\\r\\n                ns.tprintf(\\r\\n                    \\\"WARNING: Unable to find dependency %s:%s in the queue\\\",\\r\\n                    allPurchaseableAugs[i].name,\\r\\n                    allPurchaseableAugs[i].dep\\r\\n                );\\r\\n                allPurchaseableAugs.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!didDepMove) break;\\r\\n    }\\r\\n\\r\\n    // if (allPurchaseableAugs.length > 0) {\\r\\n    //     ns.tprintf(\\\"============================\\\");\\r\\n    //     let mult = 1;\\r\\n    //     let total = 0;\\r\\n    //     for (let aug of allPurchaseableAugs) {\\r\\n    //         //if (ns.args[0]) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n    //         ns.tprintf(\\r\\n    //             \\\"%40s - %9s %s\\\",\\r\\n    //             aug.name,\\r\\n    //             ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n    //             aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n    //         );\\r\\n    //         total += aug.price * mult;\\r\\n    //         mult *= 1.9;\\r\\n    //     }\\r\\n    //     ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    // }\\r\\n\\r\\n        let buysafe = ns.getPlayer().currentWorkFactionName !== sortedFactions[0];\\r\\n        if (!buysafe && ns.args[0]) {\\r\\n            ns.tprintf(\\\"WARNING: Unable to buy augmentations when actively working for the top faction\\\");\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"============================\\\");\\r\\n        let mult = 1;\\r\\n        let srcFile11 = ns.getOwnedSourceFiles().find((x) => x.n === 11);\\r\\n        let srcFile11Lvl = srcFile11 ? srcFile11.lvl : 0;\\r\\n        let multmult = 1.9 * [1, 0.96, 0.94, 0.93][srcFile11Lvl];\\r\\n        let total = Number.MAX_SAFE_INTEGER;\\r\\n        let startAug = 0;\\r\\n        let purchaseableAugs = allPurchaseableAugs.filter((a) => a.name !== \\\"The Red Pill\\\");\\r\\n        while (startAug < purchaseableAugs.length) {\\r\\n            total = 0;\\r\\n            mult = 1;\\r\\n            for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n                total += purchaseableAugs[augIdx].price * mult;\\r\\n                mult *= multmult;\\r\\n            }\\r\\n\\r\\n            if (total < ns.getPlayer().money) break;\\r\\n\\r\\n            startAug++;\\r\\n        }\\r\\n\\r\\n        total = 0;\\r\\n        mult = 1;\\r\\n        let startmoney = ns.getPlayer().money\\r\\n        for (const aug of purchaseableAugs.slice(startAug)) {\\r\\n            if (ns.args[0] && buysafe) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n            ns.tprintf(\\r\\n                \\\"%50s - %9s %s\\\",\\r\\n                aug.name,\\r\\n                ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n                aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n            );\\r\\n            total += aug.price * mult;\\r\\n            mult *= multmult;\\r\\n        }\\r\\n\\r\\n        // see how many Neuroflux Governors we can buy\\r\\n        let topFactionRep =\\r\\n            (ns.getPlayer().currentWorkFactionName === sortedFactions[0] ? ns.getPlayer().workRepGained : 0) +\\r\\n            ns.getFactionRep(sortedFactions[0]);\\r\\n        let ngPrice = ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\") * ((ns.args[0] && buysafe) ? 1 : mult);\\r\\n        let ngRepReq = ns.getAugmentationRepReq(\\\"NeuroFlux Governor\\\");\\r\\n        let nfCount = 1;\\r\\n        while (true) {\\r\\n            if (total + ngPrice < startmoney && ngRepReq <= topFactionRep) {\\r\\n                if (ns.args[0] && buysafe) {\\r\\n                    let result = ns.purchaseAugmentation(sortedFactions[0], \\\"NeuroFlux Governor\\\");\\r\\n                    if (!result)\\r\\n                        ns.tprintf(\\\"ERROR, could not buy Neuroflux governor\\\")\\r\\n                }\\r\\n                ns.tprintf(\\r\\n                    \\\"%50s - %9s %s\\\",\\r\\n                    \\\"NeuroFlux Governor +\\\" + nfCount.toString(),\\r\\n                    ns.nFormat(ngPrice, \\\"$0.000a\\\"),\\r\\n                    ns.nFormat(ngRepReq, \\\"0.000a\\\")\\r\\n                );\\r\\n                nfCount++;\\r\\n                total += ngPrice;\\r\\n                ngPrice = ngPrice * 1.14 * multmult;\\r\\n                ngRepReq *= 1.14;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"\\\\n%50s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/*\\r\\nNeuroFlux Governor +1 -   $1.111m 740.772 4\\r\\nNeuroFlux Governor +2 -   $2.238m 844.480 5  --  $2.407m Requires 844.480 faction reputation\\r\\nNeuroFlux Governor +3 -   $4.509m 962.707 6  --  $5.213m Requires 962.707 faction reputation\\r\\nNeuroFlux Governor +4 -   $9.082m 1.097k  7  --  $11.291m Requires 1.097k faction reputation\\r\\nNeuroFlux Governor +5 -  $18.295m 1.251k  8  --  $24.457m Requires 1.251k faction reputation\\r\\nNeuroFlux Governor +6 -  $36.854m 1.426k  9  --  $52.975m Requires 1.426k faction reputation\\r\\nNeuroFlux Governor +7 -  $74.238m 1.626k  10 --  $114.743m Requires 1.626k faction reputation\\r\\nNeuroFlux Governor +8 - $149.543m 1.854k  11 --  $248.534m Requires 1.854k faction reputation\\r\\nNeuroFlux Governor +9 - $301.236m 2.113k  12 --  $538.324m Requires 2.113k faction reputation\\r\\nNeuroFlux Governor +10 - $606.804m 2.409k 13 --  $1.166b Requires 2.409k faction reputation\\r\\nNeuroFlux Governor +11 -   $1.222b 2.746k 14 --  $2.526b Requires 2.746k faction reputation\\r\\nNeuroFlux Governor +12 -   $2.462b 3.131k 15 --  $5.470b Requires 3.131k faction reputation\\r\\nNeuroFlux Governor +13 -   $4.960b 3.569k 16 --  $11.849b Requires 3.569k faction reputation\\r\\n*/\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///e21c00f6-468f-4d6c-8dc7-f4fe3485bda4\",\"moduleSequenceNumber\":224887},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///b3617041-c4c6-4fda-bb30-86dc26cd4bce\",\"moduleSequenceNumber\":225048}],\"dependents\":[],\"ramUsage\":51.9,\"server\":\"home\",\"moduleSequenceNumber\":225048,\"_hash\":\"24a0c053112b9a248482866c6633bf845edd1ac3d9f8a884d354e5c1d86e2369\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, doBackdoors, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    for (const hostName of allHosts(ns)) {\\r\\n        softenServer(ns, hostName);\\r\\n    }\\r\\n\\r\\n    await doBackdoors(ns);\\r\\n}\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///ddd41388-fefd-42c8-9ca8-8171c394b599\"}],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":224885,\"_hash\":\"0970d4484663f0afa74b5cbdf735a0acd1a80d1fe0f7c8d5d58a92513dd4d0a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprintf(\\\"%s\\\", ns.heart.break());\\r\\n\\r\\n    ns.tprintf(\\\"%s\\\", ns.getAugmentationsFromFaction(\\\"Netburners\\\"));\\r\\n    ns.tprintf(\\\"%s\\\", ns.getOwnedAugmentations());\\r\\n    ns.tprintf(\\\"%s\\\", ns.getAugmentationPrice(\\\"NeuroFlux Governor\\\"));\\r\\n\\r\\n    let stats = ns.getAugmentationStats(\\\"NeuroFlux Governor\\\");\\r\\n    for (const [key, val] of Object.entries(stats)) {\\r\\n        ns.tprintf(\\\"%s %s\\\", key, val)\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///fb2aba74-bf81-4561-ac24-6bf709fc908d\",\"moduleSequenceNumber\":393}],\"dependents\":[],\"ramUsage\":19.1,\"server\":\"home\",\"moduleSequenceNumber\":224886,\"_hash\":\"fcd9ca7533b2b3d20ef0f0c7d9b24ad45e45a7ddd188fbfcb6bdd03d81a93862\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function llog(ns, str, ...args) {\\r\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\r\\n}\\r\\n\\r\\nexport function softenServer(ns, hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(ns, hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(ns, hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(ns, hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(ns, hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts(ns) {\\r\\n    return Object.keys(mapHosts(ns));\\r\\n}\\r\\n\\r\\nexport function doProgramBuys(ns) {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\n\\r\\nexport function doBuyAndSoftenAll(ns) {\\r\\n    doProgramBuys(ns)\\r\\n    for (const hostname of allHosts(ns)) {\\r\\n        softenServer(ns, hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function stdFormat(ns, offset = 0, showms = false) {\\r\\n    let date = new Date(new Date().getTime() + offset);\\r\\n\\r\\n    if (showms) {\\r\\n        let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    } else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n\\r\\n    let hosts = mapHosts(ns);\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function cleanLogs(ns) {\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    // ns.disableLog(\\\"sleep\\\")\\r\\n    // ns.disableLog(\\\"exec\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    // ns.disableLog(\\\"scan\\\")\\r\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\\r\\n\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\"\\r\\n];\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.05,\"server\":\"home\",\"moduleSequenceNumber\":224887,\"_hash\":\"eb9b09f1f42974716f082472001c2b71b905feeca87d0a31227a04f4a271ce3e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cbe48d6c-8954-47db-bff8-d225d99dabf9\",\"moduleSequenceNumber\":224976}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":224976,\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    doProgramBuys(ns);\\r\\n}\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///1268c264-d3b3-433f-8221-bd7b6e98a16b\",\"moduleSequenceNumber\":29521},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///4dc4649b-5357-42a0-b729-2d9d7ba2bd94\",\"moduleSequenceNumber\":30225}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":224889,\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var lastEl;\\r\\nvar roots = [];\\r\\n\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n\\r\\n    const newRootEl = hookRootEl.cloneNode(true);\\r\\n    newRootEl.children[0].firstChild.innerText = \\\"\\\";\\r\\n    newRootEl.children[1].firstChild.innerText = \\\"\\\";\\r\\n    newRootEl.children[1].firstChild.removeAttribute(\\\"id\\\");\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return newRootEl;\\r\\n}\\r\\n\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackRootEl = overviewEl.children[2];\\r\\n\\r\\n    const newRootEl = hackRootEl.cloneNode(true);\\r\\n    newRootEl.removeChild(newRootEl.childNodes.item(1));\\r\\n\\r\\n    const newEl = newRootEl.children[0].firstChild;\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return newEl;\\r\\n}\\r\\n\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackRootEl = overviewEl.children[2];\\r\\n\\r\\n    const newRootEl = hackRootEl.cloneNode(true);\\r\\n\\r\\n    const newEl1 = newRootEl.children[0].firstChild;\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n\\r\\n    const newEl2 = newRootEl.children[1].firstChild;\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\n\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackProgressEl = overviewEl.children[3];\\r\\n\\r\\n    const newRootEl = hackProgressEl.cloneNode(true);\\r\\n    const newSub1 = newRootEl.firstChild.firstChild;\\r\\n    const newSub2 = newRootEl.firstChild.firstChild.firstChild;\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let clockEl = addSingle();\\r\\n    let targetEl = addSingle();\\r\\n    let incomeEl = addSingle();\\r\\n    let [stateEl, countdownEl] = addDouble();\\r\\n    let [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n    addBottomLine();\\r\\n\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) root.parentNode.removeChild(root);\\r\\n    });\\r\\n\\r\\n    let port = ns.getPortHandle(1);\\r\\n    let startTime = 0;\\r\\n    let endTime = 1000;\\r\\n    let fullTime = 1000;\\r\\n    let target = \\\"\\\";\\r\\n    let income = \\\"\\\";\\r\\n    let state = \\\"\\\";\\r\\n    let countdown = \\\"\\\";\\r\\n    while (true) {\\r\\n        if (!port.empty()) {\\r\\n            let data = port.peek();\\r\\n            startTime = data[0].getTime();\\r\\n            endTime = new Date(startTime + data[1]).getTime();\\r\\n            fullTime = endTime - startTime;\\r\\n\\r\\n            let date = new Date();\\r\\n            let curTime = date.getTime();\\r\\n\\r\\n            // Update Clock\\r\\n            // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n            // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n            clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            // Update Target & Income\\r\\n            targetEl.innerText = data[2];\\r\\n            incomeEl.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n\\r\\n            // Update State & Countdown\\r\\n            stateEl.innerText = data[4];\\r\\n            countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n\\r\\n            // Update Progress\\r\\n            let tvalue = curTime - startTime;\\r\\n            let nvalue = (tvalue / fullTime) * 100;\\r\\n            let transform = 100 - nvalue;\\r\\n            let wholeValue = Math.floor(nvalue);\\r\\n\\r\\n            if (startTime === 0 || wholeValue > 100) {\\r\\n                port.clear();\\r\\n                transform = 100;\\r\\n                wholeValue = 0;\\r\\n            }\\r\\n\\r\\n            hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n            hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n        } else {\\r\\n            let date = new Date();\\r\\n            clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            targetEl.innerText = \\\"NO TARGET\\\";\\r\\n            incomeEl.innerText = \\\"\\\";\\r\\n            stateEl.innerText = \\\"\\\";\\r\\n            countdownEl.innerText = \\\"\\\";\\r\\n            hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n            hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///e7797fb4-ba9f-4f5f-aa01-c39a90af435e\",\"moduleSequenceNumber\":225050}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":225050,\"_hash\":\"98e9a9188b966bec872320b361943e6d79c4d0ad050814831ae6c98688d582d7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h     : show help text\\\");\\r\\n    ns.tprintf(\\\"  all   : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack  : all hack\\\");\\r\\n    ns.tprintf(\\\"  str   : all str\\\");\\r\\n    ns.tprintf(\\\"  def   : all def\\\");\\r\\n    ns.tprintf(\\\"  dex   : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi   : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha   : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug   : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom   : all homicide\\\");\\r\\n    ns.tprintf(\\\"  shock : all shock recovery\\\");\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(i, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"shock\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToShockRecovery(i);\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///ef9ad79f-7f82-4b39-9ab4-68017733eac7\",\"moduleSequenceNumber\":225049}],\"dependents\":[],\"ramUsage\":25.6,\"server\":\"home\",\"moduleSequenceNumber\":225049,\"_hash\":\"bc329d9f69aefe7a4d3b914632ff36613092b6f46e039751604af08b0067292a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, stFormat } from \\\"./util.js\\\";\\r\\n\\r\\nexport const HSUpgradeType = {\\r\\n    LEVEL: \\\"level\\\",\\r\\n    RAM: \\\"ram\\\",\\r\\n    CORES: \\\"cores\\\",\\r\\n    CACHE: \\\"cache\\\",\\r\\n    SERVER: \\\"server\\\",\\r\\n};\\r\\n\\r\\nclass HSUpgrade {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, id, type, _stats) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const prodMult = ns.getPlayer().hacknet_node_money_mult;\\r\\n        const coreCostMult = ns.getPlayer().hacknet_node_core_cost_mult;\\r\\n        const levelCostMult = ns.getPlayer().hacknet_node_level_cost_mult;\\r\\n        const ramCostMult = ns.getPlayer().hacknet_node_ram_cost_mult;\\r\\n\\r\\n        let stats;\\r\\n        if (_stats) stats = _stats;\\r\\n        else {\\r\\n            stats = ns.hacknet.getNodeStats(id);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n        }\\r\\n\\r\\n        this.id = id;\\r\\n        this.type = type;\\r\\n\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level + 1,\\r\\n                    0,\\r\\n                    stats.ram,\\r\\n                    stats.cores,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level,\\r\\n                    0,\\r\\n                    stats.ram * 2,\\r\\n                    stats.cores,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level,\\r\\n                    0,\\r\\n                    stats.ram,\\r\\n                    stats.cores + 1,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\r\\n                this.upgradeProductionTotal = stats.production;\\r\\n                this.cacheIncrease = stats.cache;\\r\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\r\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\r\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\r\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\r\\n    }\\r\\n\\r\\n    toString(ns, totalProduction) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\r\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n\\r\\n        return ns.sprintf(\\r\\n            \\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\",\\r\\n            this.id,\\r\\n            this.type,\\r\\n            ns.nFormat(this.upgradeCost, \\\"($0.000a)\\\"), // cost\\r\\n            ns.nFormat(this.upgradeProductionIncrease, \\\"(0.000a)\\\"), // hash increase\\r\\n            stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\r\\n            this.upgradeValue * 1000000000\\r\\n        );\\r\\n    }\\r\\n\\r\\n    buy(ns) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n        let effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\r\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        while (ns.getPlayer().money < this.upgradeCost) {\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        }\\r\\n\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                return ns.hacknet.upgradeRam(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                return ns.hacknet.upgradeCore(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                return ns.hacknet.upgradeCache(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.SERVER: {\\r\\n                return ns.hacknet.purchaseNode();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction generateNewServerValue(ns) {\\r\\n    let stats = {\\r\\n        ...ns.hacknet.getNodeStats(0),\\r\\n        cache: 1,\\r\\n        cores: 1,\\r\\n        hashCapacity: 64,\\r\\n        level: 1,\\r\\n        ram: 1,\\r\\n        timeOnline: 1,\\r\\n        totalProduction: 1,\\r\\n        production: ns.formulas.hacknetServers.hashGainRate(1, 0, 1, 1, ns.getPlayer().hacknet_node_money_mult),\\r\\n        totalCost: ns.hacknet.getPurchaseNodeCost(),\\r\\n    };\\r\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\r\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\r\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\r\\n\\r\\n    let bestUpgrade;\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = Object.keys(HSUpgradeType)\\r\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n\\r\\n        let newBestUpgrade = hashServerUpgrades[0];\\r\\n\\r\\n        switch (newBestUpgrade.type) {\\r\\n            case HSUpgradeType.CORES:\\r\\n                stats.cores += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.LEVEL:\\r\\n                stats.level += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.RAM:\\r\\n                stats.ram *= 2;\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        let newProduction = ns.formulas.hacknetServers.hashGainRate(\\r\\n            stats.level,\\r\\n            0,\\r\\n            stats.ram,\\r\\n            stats.cores,\\r\\n            ns.getPlayer().hacknet_node_money_mult\\r\\n        );\\r\\n        let newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\r\\n        let newValue = newProduction / newCost;\\r\\n\\r\\n        if (newValue < stats.totalValue) break;\\r\\n\\r\\n        stats.production = newProduction;\\r\\n        stats.totalCost = newCost;\\r\\n        stats.totalValue = newValue;\\r\\n        bestUpgrade = newBestUpgrade;\\r\\n\\r\\n        // ns.tprintf(\\r\\n        //     \\\"%s => Total Value: %s\\\",\\r\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\r\\n        //     stats.totalValue * 1000000000\\r\\n        // );\\r\\n\\r\\n        let checkStats = ns.hacknet.getNodeStats(0);\\r\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram) break;\\r\\n    }\\r\\n\\r\\n    if (bestUpgrade === undefined) return;\\r\\n\\r\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    bestUpgrade.upgradeValue = stats.totalValue;\\r\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\r\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\r\\n\\r\\n    return bestUpgrade;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n\\r\\n    let prodCalc = 0;\\r\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n        let stats = ns.hacknet.getNodeStats(idx);\\r\\n        stats.ramUsed = 0;\\r\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n            stats.level,\\r\\n            0,\\r\\n            stats.ram,\\r\\n            stats.cores,\\r\\n            ns.getPlayer().hacknet_node_money_mult\\r\\n        );\\r\\n\\r\\n        prodCalc += stats.production;\\r\\n    }\\r\\n\\r\\n    let prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\r\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\r\\n\\r\\n    if (ns.hacknet.numNodes() === 0) {\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    while (ns.hacknet.numNodes() === 0) {\\r\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n            ns.hacknet.purchaseNode();\\r\\n        } else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let buyServerUpgrade = generateNewServerValue(ns);\\r\\n\\r\\n    if (ns.args[0]) {\\r\\n        let hashServerUpgrades = [buyServerUpgrade];\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            let stats = ns.hacknet.getNodeStats(idx);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue); //.filter(a => (a.upgradeValue * 1000000000) > 1.5);\\r\\n\\r\\n        for (const upg of hashServerUpgrades) ns.tprintf(upg.toString(ns, totalProduction));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = [buyServerUpgrade];\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            let stats = ns.hacknet.getNodeStats(idx);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue); //.filter(a => (a.upgradeValue * 1000000000) > 0.15);\\r\\n        //hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n\\r\\n        if (hashServerUpgrades.length > 0) {\\r\\n            const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n            let numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            let effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%s | %s\\\",\\r\\n                    new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                    hashServerUpgrades[0].toString(ns, totalProduction)\\r\\n                )\\r\\n            );\\r\\n            while (effectiveMoneyAvailable < hashServerUpgrades[0].upgradeCost) {\\r\\n                numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n                effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n                while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                    ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n                await ns.sleep(1000);\\r\\n\\r\\n                // let studyCost = ns.hacknet.hashCost(\\\"Generate Coding Contract\\\");\\r\\n\\r\\n                // while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n                //     while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                //         ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        \\r\\n                //     // find the cheapest cache upgrade and attempt to buy it\\r\\n                //     let targetIdx = -1;\\r\\n                //     let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n                //     for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                //         let idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                //         if (idxCost < targetIdxCost) {\\r\\n                //             targetIdx = idx;\\r\\n                //             targetIdxCost = idxCost;\\r\\n                //         }\\r\\n                //     }\\r\\n        \\r\\n                //     if (ns.getPlayer().money > targetIdxCost) {\\r\\n                //         ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                //         continue;\\r\\n                //     }\\r\\n        \\r\\n                //     await ns.sleep(1000);\\r\\n                // }\\r\\n        \\r\\n                // while (ns.hacknet.numHashes() < studyCost) await ns.sleep(1000);\\r\\n        \\r\\n                // ns.hacknet.spendHashes(\\\"Generate Coding Contract\\\");\\r\\n        \\r\\n                // await ns.sleep(1000);\\r\\n            }\\r\\n\\r\\n            hashServerUpgrades[0].buy(ns);\\r\\n        } else {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        buyServerUpgrade = generateNewServerValue(ns);\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n\\r\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\")) ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        let studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\r\\n\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                let idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        while (ns.hacknet.numHashes() < studyCost) await ns.sleep(1000);\\r\\n\\r\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///99d96974-203b-41cf-8317-406c69f9719d\",\"moduleSequenceNumber\":224887},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///0360e999-3067-4ca6-94fb-cf3bd01cc93e\",\"moduleSequenceNumber\":224901}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":224901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\")) ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                let idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        while (ns.hacknet.numHashes() < studyCost) await ns.sleep(1000);\\r\\n\\r\\n        ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\",\"filename\":\"leech.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///41dbdc99-3d7b-4e7c-8e57-8c1610ce659a\",\"moduleSequenceNumber\":234981}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":234981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share()\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///65463fec-292a-420d-91a4-b3b7bff43319\",\"moduleSequenceNumber\":50797}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":224894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n\\r\\n    let dynamic = true;\\r\\n    let crime = \\\"shoplift\\\";\\r\\n    if (ns.args[0]) {\\r\\n        crime = ns.args[0];\\r\\n        dynamic = false\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        if (dynamic) {\\r\\n            if (ns.getCrimeChance(\\\"mug\\\") > .7)\\r\\n                crime = \\\"mug\\\"\\r\\n            if (ns.getCrimeChance(\\\"homicide\\\") > .7)\\r\\n                crime = \\\"homicide\\\"\\r\\n        }\\r\\n\\r\\n        // (!ns.getPlayer().factions.includes(\\\"NiteSec\\\")) {\\r\\n        await ns.sleep(ns.commitCrime(crime) + 200);\\r\\n\\r\\n        // let allFactions = ns.getPlayer().factions.concat(ns.checkFactionInvitations());\\r\\n        // if (allFactions.includes(\\\"NiteSec\\\")) {\\r\\n        //     ns.joinFaction(\\\"NiteSec\\\")\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///8359b3c3-ac23-4de7-ad5d-2f5668ccd3c3\",\"moduleSequenceNumber\":28464}],\"dependents\":[],\"ramUsage\":14.6,\"server\":\"home\",\"moduleSequenceNumber\":224895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            let name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Combat\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%3s:  %10s  %s  %s  %s %10s %s\\\",\\r\\n                    member.name,\\r\\n                    member.str_exp.toFixed(2),\\r\\n                    member.str_mult.toFixed(2),\\r\\n                    member.str_asc_mult.toFixed(2),\\r\\n                    ascmem !== undefined ? ascmem.str : 0,\\r\\n                    member.str_asc_points.toFixed(2),\\r\\n                    member.upgrades\\r\\n                )\\r\\n            );\\r\\n\\r\\n            if (ascmem !== undefined && ascmem.str > 2) {\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"Ascending %s %.2f => %.2f hack multiplier\\\",\\r\\n                        member.name,\\r\\n                        member.str_asc_mult,\\r\\n                        member.str_asc_mult * ascmem.str\\r\\n                    )\\r\\n                );\\r\\n\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) =>\\r\\n                Object.assign(\\r\\n                    { name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) },\\r\\n                    ns.gang.getEquipmentStats(_name)\\r\\n                )\\r\\n            )\\r\\n            .filter(\\r\\n                (eq) =>\\r\\n                    eq.str !== undefined ||\\r\\n                    eq.dex !== undefined ||\\r\\n                    eq.agi !== undefined ||\\r\\n                    eq.def !== undefined ||\\r\\n                    eq.cha !== undefined\\r\\n            )\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.str !== undefined ? eq.str : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n\\r\\n        let newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money > buy.equipment.price) {\\r\\n                let result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(\\r\\n                        ns.sprintf(\\r\\n                            \\\"Buying %s:%s for %s\\\",\\r\\n                            buy.member.name,\\r\\n                            buy.equipment.name,\\r\\n                            ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")\\r\\n                        )\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(10000);\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        break;\\r\\n    }\\r\\n\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\r\\n            \\\"%22s %3s %3s %9s %s\\\",\\r\\n            task.name,\\r\\n            task.baseMoney,\\r\\n            task.difficulty,\\r\\n            task.baseRespect,\\r\\n            task.baseWanted\\r\\n        );\\r\\n    }\\r\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///98a00153-c685-442d-991d-b81045bc7cd1\",\"moduleSequenceNumber\":22273}],\"dependents\":[],\"ramUsage\":31.6,\"server\":\"home\",\"moduleSequenceNumber\":224896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { stFormat, stdFormat } from \\\"./util.js\\\";\\r\\n\\r\\nexport const TSPACER = 400;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\n// {targetname: {hack stat, production lookup table}}\\r\\nconst CYCLE_PRODUCTION_LOOKUP = {};\\r\\n\\r\\nfunction getCycleProductionLookup(ns, env) {\\r\\n    if (\\r\\n        CYCLE_PRODUCTION_LOOKUP[env.targetname] &&\\r\\n        CYCLE_PRODUCTION_LOOKUP[env.targetname].hack === ns.getPlayer().hacking\\r\\n    ) {\\r\\n        return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n    }\\r\\n\\r\\n    // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n    let cycleProductionLookup = new Array(env.maxThreads + 1).fill(null);\\r\\n\\r\\n    let hackThreads = Math.min(env.maxThreads, Math.floor(1 / env.hackPercentPerThread));\\r\\n\\r\\n    while (hackThreads > 0) {\\r\\n        hackThreads--;\\r\\n        let hackTotal = env.hackPercentPerThread * hackThreads * env.highMoney;\\r\\n        let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n\\r\\n        let growMult = Math.max(env.highMoney / (env.highMoney - hackTotal), 1);\\r\\n        let growThreads = env.calcGrowThreads(ns, growMult, true);\\r\\n\\r\\n        if (hackThreads + growThreads > env.maxThreads) {\\r\\n            //ns.tprintf(\\\"h %d | g %d\\\", hackThreads, growThreads)\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n\\r\\n        let weakenHackThreads = Math.ceil(hackSecIncrease / env.weakenAmountPerThread);\\r\\n        let weakenGrowThreads = Math.ceil(growSecIncrease / env.weakenAmountPerThread);\\r\\n\\r\\n        let totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n\\r\\n        if (totalThreads > env.maxThreads) continue;\\r\\n\\r\\n        if (cycleProductionLookup[totalThreads] !== null) {\\r\\n            // do nothing\\r\\n        } else {\\r\\n            cycleProductionLookup[totalThreads] = {\\r\\n                totalThreads: totalThreads,\\r\\n                hackTotal: hackTotal,\\r\\n                hackThreads: hackThreads,\\r\\n                growThreads: growThreads,\\r\\n                weakenHackThreads: weakenHackThreads,\\r\\n                weakenGrowThreads: weakenGrowThreads,\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Fill in the blanks\\r\\n    const zeroThread = {\\r\\n        totalThreads: 0,\\r\\n        hackTotal: 0,\\r\\n        hackThreads: 0,\\r\\n        growThreads: 0,\\r\\n        weakenHackThreads: 0,\\r\\n        weakenGrowThreads: 0,\\r\\n    };\\r\\n    let fillDict = zeroThread;\\r\\n    for (let idx = 0; idx < cycleProductionLookup.length; idx++) {\\r\\n        if (cycleProductionLookup[idx] === null) cycleProductionLookup[idx] = fillDict;\\r\\n        else fillDict = cycleProductionLookup[idx];\\r\\n    }\\r\\n\\r\\n    let endTime = new Date().getTime();\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Calculated %20s:%d in %4dms | %d values | %4d\\\",\\r\\n    //     env.targetname,\\r\\n    //     ns.getPlayer().hacking,\\r\\n    //     endTime - startTime,\\r\\n    //     env.maxThreads,\\r\\n    //     Math.floor(1 / env.hackPercentPerThread)\\r\\n    // );\\r\\n\\r\\n    CYCLE_PRODUCTION_LOOKUP[env.targetname] = { hack: ns.getPlayer().hacking, prod: cycleProductionLookup };\\r\\n    return CYCLE_PRODUCTION_LOOKUP[env.targetname].prod;\\r\\n}\\r\\n\\r\\nclass Host {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.reservedScriptCalls = [];\\r\\n        this.getMaxThreads(ns);\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n\\r\\n    getReservedThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a + b.threads, 0);\\r\\n    }\\r\\n\\r\\n    getAvailableThreads() {\\r\\n        return this.reservedScriptCalls.reduce((a, b) => a - b.threads, this.maxThreads);\\r\\n    }\\r\\n\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset, length, batchId) {\\r\\n        let allocateThreads = Math.min(this.getAvailableThreads(), threads);\\r\\n\\r\\n        if (allocateThreads === 0) return allocateThreads;\\r\\n\\r\\n        this.reservedScriptCalls.push({\\r\\n            script: script,\\r\\n            threads: allocateThreads,\\r\\n            offset: offset,\\r\\n            length: length,\\r\\n            batchId: batchId,\\r\\n        });\\r\\n\\r\\n        return allocateThreads;\\r\\n    }\\r\\n\\r\\n    // update max threads in case server size has changed\\r\\n    getMaxThreads(ns) {\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            let homeram = ns.getServerMaxRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n\\r\\n        this.maxThreads = Math.min(1000000, this.maxThreads);\\r\\n\\r\\n        return this.maxThreads;\\r\\n    }\\r\\n\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction generateHosts(ns, hostnames, threadSize) {\\r\\n    let hosts = [];\\r\\n    let maxThreads = 0;\\r\\n    if (hostnames)\\r\\n        hosts = hostnames\\r\\n            .map((x) => new Host(ns, x, threadSize))\\r\\n            .filter((x) => x.maxThreads > 0)\\r\\n            .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n\\r\\n    hosts.map((x) => (maxThreads += x.maxThreads));\\r\\n\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n\\r\\n    return [hosts, maxThreads];\\r\\n}\\r\\n\\r\\nfunction getMaxThreads(ns, hosts) {\\r\\n    let maxThreads = 0;\\r\\n    hosts.map((x) => (maxThreads += x.getMaxThreads(ns)));\\r\\n\\r\\n    // Too many threads causes problems\\r\\n    maxThreads = Math.min(1000000, maxThreads);\\r\\n\\r\\n    return maxThreads;\\r\\n}\\r\\n\\r\\nfunction reserveThreadsForExecution(ns, hosts, script, threads, offset, length, batchId) {\\r\\n    let unallocatedThreads = threads;\\r\\n    for (const host of hosts) {\\r\\n        unallocatedThreads -= host.tryReserveThreads(ns, script, unallocatedThreads, offset, length, batchId);\\r\\n        if (unallocatedThreads === 0) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", threads - unallocatedThreads, threads, script);\\r\\n    return false;\\r\\n}\\r\\n\\r\\nexport class SmartHackEnv {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n\\r\\n        this.cores = 1; // Simplify\\r\\n        [this.hosts, this.maxThreads] = generateHosts(ns, hostnames, this.threadSize);\\r\\n\\r\\n        this.waitPID = 0;\\r\\n\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: 0,\\r\\n            primaryGrowThreads: 0,\\r\\n            primaryWeakenThreads: 0,\\r\\n        };\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) {\\r\\n            await host.prep(ns, force);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getHackTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns, assumeMinSec = false) {\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                let simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return ns.formulas.hacking.hackPercent(simTarget, this.simPlayer);\\r\\n            }\\r\\n            return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n        }\\r\\n\\r\\n        if (assumeMinSec) {\\r\\n            let simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return ns.formulas.hacking.hackPercent(simTarget, ns.getPlayer());\\r\\n        }\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    numCycleForGrowth(ns, server, growth, player, cores = 1) {\\r\\n        let ajdGrowthRate = 1 + (1.03 - 1) / server.hackDifficulty;\\r\\n        if (ajdGrowthRate > 1.0035) {\\r\\n            ajdGrowthRate = 1.0035;\\r\\n        }\\r\\n\\r\\n        const serverGrowthPercentage = server.serverGrowth / 100;\\r\\n\\r\\n        const coreBonus = 1 + (cores - 1) / 16;\\r\\n        const cycles =\\r\\n            Math.log(growth) /\\r\\n            (Math.log(ajdGrowthRate) *\\r\\n                player.hacking_grow_mult *\\r\\n                serverGrowthPercentage *\\r\\n                ns.getBitNodeMultipliers().ServerGrowthRate *\\r\\n                coreBonus);\\r\\n\\r\\n        return cycles;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns, _growMult, assumeMinSec = false) {\\r\\n        let growMult = _growMult === undefined ? this.growMult : _growMult;\\r\\n        if (growMult < 1) return 0;\\r\\n        if (this.simEnabled) {\\r\\n            if (assumeMinSec) {\\r\\n                let simTarget = Object.assign({}, this.simTarget);\\r\\n                simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n                return Math.ceil(this.numCycleForGrowth(ns, simTarget, growMult, this.simPlayer));\\r\\n            }\\r\\n            return Math.ceil(this.numCycleForGrowth(ns, this.simTarget, growMult, this.simPlayer));\\r\\n        }\\r\\n\\r\\n        if (assumeMinSec) {\\r\\n            let simTarget = ns.getServer(this.targetname);\\r\\n            simTarget.hackDifficulty = simTarget.minDifficulty;\\r\\n            return Math.ceil(this.numCycleForGrowth(ns, simTarget, growMult, ns.getPlayer()));\\r\\n        }\\r\\n\\r\\n        return Math.ceil(ns.growthAnalyze(this.targetname, growMult, this.cores));\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        // Host state\\r\\n        this.maxThreads = getMaxThreads(ns, this.hosts);\\r\\n\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns, true);\\r\\n\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer);\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n\\r\\n        // Primary Cycle Info\\r\\n        let primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05) primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n\\r\\n        while (primaryThreadsTotal > this.maxThreads) {\\r\\n            primaryGrowThreads--;\\r\\n            primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n            primarySecDiff = this.security - this.lowSecurity;\\r\\n            primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n            primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        }\\r\\n\\r\\n        // memoize cycle production statistics indexed by cycleThreadAllowance\\r\\n        let cycleProductionLookup = getCycleProductionLookup(ns, this);\\r\\n\\r\\n        // Get all cycle combination production statistics\\r\\n        let allCycles = [];\\r\\n        for (let cycleTotal = 1; cycleTotal <= this.cycleMax; cycleTotal++) {\\r\\n            let usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            let usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n            let fullCycleTime = this.cycleFullTime + this.cycleSpacer * (cycleTotal - 1);\\r\\n\\r\\n            let cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n\\r\\n            let cycleStats = cycleProductionLookup[cycleThreadAllowance];\\r\\n\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    hackTotal: 1,\\r\\n                    production: 1,\\r\\n                    fullCycleTime: fullCycleTime,\\r\\n                    hackThreads: 0,\\r\\n                    growThreads: 0,\\r\\n                    weakenHackThreads: 0,\\r\\n                    weakenGrowThreads: 0,\\r\\n                    percentPerCycle: 0,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleStats === undefined) {\\r\\n                ns.print(ns.sprintf(\\\"WARNING: Thread Total %s is undefined\\\", cycleThreadAllowance));\\r\\n                continue;\\r\\n            }\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                hackTotal: cycleStats.hackTotal,\\r\\n                production: (usableCycles * cycleStats.hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: cycleStats.hackThreads,\\r\\n                growThreads: cycleStats.growThreads,\\r\\n                weakenHackThreads: cycleStats.weakenHackThreads,\\r\\n                weakenGrowThreads: cycleStats.weakenGrowThreads,\\r\\n                percentPerCycle: (cycleStats.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n\\r\\n        //this.debugPrintCycleStats(ns, primaryThreadsTotal, allCycles);\\r\\n\\r\\n        let cycleTarget = allCycles[0];\\r\\n\\r\\n        if (!cycleTarget) {\\r\\n            ns.tprintf(\\r\\n                \\\"ERROR: Encountered a bad cycle target, targeting %s, [0]%s [1]%s\\\",\\r\\n                this.targetname,\\r\\n                allCycles[0],\\r\\n                allCycles[1]\\r\\n            );\\r\\n\\r\\n            this.hackTotal = 0;\\r\\n            this.hackThreads = 0;\\r\\n            this.growThreads = 0;\\r\\n            this.weakenHackThreads = 0;\\r\\n            this.weakenGrowThreads = 0;\\r\\n            this.cycleTotal = 1;\\r\\n            this.cycleBatchTime = this.weakenTime;\\r\\n            this.primaryStats = {\\r\\n                primaryThreadsTotal: primaryThreadsTotal,\\r\\n                primaryGrowThreads: primaryGrowThreads,\\r\\n                primaryWeakenThreads: primaryWeakenThreads,\\r\\n            };\\r\\n\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        this.hackTotal = cycleTarget.hackTotal;\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.cycleBatchTime = cycleTarget.fullCycleTime;\\r\\n        this.primaryStats = {\\r\\n            primaryThreadsTotal: primaryThreadsTotal,\\r\\n            primaryGrowThreads: primaryGrowThreads,\\r\\n            primaryWeakenThreads: primaryWeakenThreads,\\r\\n        };\\r\\n\\r\\n        // dont do thread reservation and execution if this is a simulation\\r\\n        if (this.simEnabled) return true;\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            if (primaryGrowThreads > 0)\\r\\n                reserveThreadsForExecution(\\r\\n                    ns,\\r\\n                    this.hosts,\\r\\n                    GROWNS,\\r\\n                    primaryGrowThreads,\\r\\n                    growOffsetTime,\\r\\n                    this.growTime,\\r\\n                    0\\r\\n                );\\r\\n            if (primaryWeakenThreads > 0)\\r\\n                reserveThreadsForExecution(\\r\\n                    ns,\\r\\n                    this.hosts,\\r\\n                    WEAKENNS,\\r\\n                    primaryWeakenThreads,\\r\\n                    weakenGrowOffsetTime,\\r\\n                    this.weakenTime,\\r\\n                    0\\r\\n                );\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < this.cycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0) continue;\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n            reserveThreadsForExecution(\\r\\n                ns,\\r\\n                this.hosts,\\r\\n                HACKNS,\\r\\n                this.hackThreads,\\r\\n                cycleOffsetTime + hackOffsetTime,\\r\\n                this.hackTime,\\r\\n                i\\r\\n            );\\r\\n            reserveThreadsForExecution(\\r\\n                ns,\\r\\n                this.hosts,\\r\\n                GROWNS,\\r\\n                this.growThreads,\\r\\n                cycleOffsetTime + growOffsetTime,\\r\\n                this.growTime,\\r\\n                i\\r\\n            );\\r\\n            reserveThreadsForExecution(\\r\\n                ns,\\r\\n                this.hosts,\\r\\n                WEAKENNS,\\r\\n                this.weakenHackThreads,\\r\\n                cycleOffsetTime,\\r\\n                this.weakenTime,\\r\\n                i\\r\\n            );\\r\\n            reserveThreadsForExecution(\\r\\n                ns,\\r\\n                this.hosts,\\r\\n                WEAKENNS,\\r\\n                this.weakenGrowThreads,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime,\\r\\n                this.weakenTime,\\r\\n                i\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.cycleBatchTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            \\\"SMART\\\",\\r\\n        ]);\\r\\n\\r\\n        this.logStats(ns);\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    debugPrintCycleStats(ns, primaryThreadsTotal, allCycles) {\\r\\n        for (const cycle of allCycles) {\\r\\n            let batchThreads =\\r\\n                cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined) batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            let cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\r\\n                \\\"%3d;%s  %9s/s %5.2f %d/%4d/%5d %6dGB, %s|%s|%s|%s\\\",\\r\\n                cycle.cycleTotal,\\r\\n                this.targetname,\\r\\n                ns.nFormat(cycle.production, \\\"($0.000a)\\\"),\\r\\n                cycle.percentPerCycle ? cycle.percentPerCycle : 0,\\r\\n                primaryThreadsTotal,\\r\\n                batchThreads,\\r\\n                cycleThreads,\\r\\n                cycleMem,\\r\\n                cycle.hackThreads,\\r\\n                cycle.growThreads,\\r\\n                cycle.weakenHackThreads,\\r\\n                cycle.weakenGrowThreads\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    logStats(ns) {\\r\\n        if (this.primaryStats.primaryThreadsTotal > 0) {\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%8s SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\",\\r\\n                    new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                    this.targetname,\\r\\n                    this.primaryStats.primaryGrowThreads,\\r\\n                    this.primaryStats.primaryWeakenThreads,\\r\\n                    this.primaryStats.primaryThreadsTotal\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s SMART: %s => H %d|%d; G %d|%d; T %d|%d; Cycles %s/%s; Complete [%s -%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.weakenHackThreads,\\r\\n                this.growThreads,\\r\\n                this.weakenGrowThreads,\\r\\n                this.threadsPerCycle,\\r\\n                this.threadsPerCycle * this.cycleTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleMax,\\r\\n                stdFormat(ns, this.cycleBatchTime, true),\\r\\n                stFormat(ns, this.cycleBatchTime - this.weakenTime, true)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        for (const host of this.hosts) {\\r\\n            for (const scriptCall of host.reservedScriptCalls) {\\r\\n                execs.push({\\r\\n                    script: scriptCall.script,\\r\\n                    host: host.hostname,\\r\\n                    threads: scriptCall.threads,\\r\\n                    target: this.targetname,\\r\\n                    delay: scriptCall.offset,\\r\\n                    pos: execs.length,\\r\\n                    finish: scriptCall.offset + scriptCall.length,\\r\\n                    batchId: scriptCall.batchId,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        execs = execs.sort((a, b) => b.delay - a.delay);\\r\\n\\r\\n        // for (const exec of execs) {\\r\\n        //     ns.tprintf(\\r\\n        //         \\\"%20s:%02d-%9s %4d %s %s\\\",\\r\\n        //         exec.host,\\r\\n        //         exec.batchId,\\r\\n        //         exec.script,\\r\\n        //         exec.threads,\\r\\n        //         stFormat(ns, exec.delay),\\r\\n        //         stFormat(ns, exec.finish)\\r\\n        //     );\\r\\n        // }\\r\\n\\r\\n        this.waitPID = 0;\\r\\n        let waitPIDFinishTime = 0;\\r\\n        let startTime = new Date().getTime();\\r\\n        while (execs.length > 0) {\\r\\n            let exec = execs.pop();\\r\\n\\r\\n            while (new Date().getTime() - startTime < exec.delay) await ns.sleep(5);\\r\\n\\r\\n            // script call has come up, make sure it is starting and finishing within +- tspacer / 2\\r\\n            let curTOffset = new Date().getTime() - startTime;\\r\\n            let delayDiff = Math.abs(curTOffset - exec.delay);\\r\\n            if (delayDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"WARNING: %s:%s #%d start time was off by %dms (limit is +- %d) and the batch was canceled s: %s c: %s\\\",\\r\\n                        exec.target,\\r\\n                        exec.script,\\r\\n                        exec.batchId,\\r\\n                        curTOffset - exec.delay,\\r\\n                        this.tspacer / 2,\\r\\n                        stFormat(ns, exec.delay, true),\\r\\n                        stFormat(ns, curTOffset, true)\\r\\n                    )\\r\\n                );\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let finishTOffset = curTOffset;\\r\\n            if (exec.script === WEAKENNS) finishTOffset += ns.getWeakenTime(exec.target);\\r\\n            if (exec.script === GROWNS) finishTOffset += ns.getGrowTime(exec.target);\\r\\n            if (exec.script === HACKNS) finishTOffset += ns.getHackTime(exec.target);\\r\\n\\r\\n            let finishDiff = Math.abs(finishTOffset - exec.finish);\\r\\n            if (finishDiff > this.tspacer / 2) {\\r\\n                execs = execs.filter((a) => a.batchId !== exec.batchId);\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"WARNING: %s:%s #%d finish time was off by %dms (limit is +- %d) and the batch was canceled  e: %s c: %s\\\",\\r\\n                        exec.target,\\r\\n                        exec.script,\\r\\n                        exec.batchId,\\r\\n                        finishTOffset - exec.finish,\\r\\n                        this.tspacer / 2,\\r\\n                        stFormat(ns, exec.finish, true),\\r\\n                        stFormat(ns, finishTOffset, true)\\r\\n                    )\\r\\n                );\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let pid = ns.exec(exec.script, exec.host, exec.threads, exec.target, exec.pos, startTime);\\r\\n            if (waitPIDFinishTime <= exec.finish) {\\r\\n                this.waitPID = pid;\\r\\n                waitPIDFinishTime = exec.finish;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n        if (this.waitPID === 0) return false;\\r\\n\\r\\n        if (ns.getRunningScript(this.waitPID)) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        this.waitPID = 0;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        let simIncome = 0;\\r\\n        let simTime = 0;\\r\\n        let simState = 0; // 0: primary, 1: no-primary\\r\\n\\r\\n        while (true) {\\r\\n            if (simState === 0) {\\r\\n                await this.refresh(ns);\\r\\n                if (simTime + this.cycleBatchTime > time) break;\\r\\n\\r\\n                if (this.primaryStats.primaryThreadsTotal === 0) this.simState = 1;\\r\\n\\r\\n                simIncome += this.hackTotal * (this.cycleTotal - 1);\\r\\n                simTime += this.cycleBatchTime;\\r\\n            } else {\\r\\n                let timeRemaining = time - simTime;\\r\\n                let cyclesRemaining = Math.floor(timeRemaining / this.cycleBatchTime);\\r\\n\\r\\n                simIncome += this.hackTotal * this.cycleTotal * cyclesRemaining;\\r\\n                simTime += this.cycleBatchTime * cyclesRemaining;\\r\\n\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.simEnabled = false;\\r\\n\\r\\n        if (simTime === 0) {\\r\\n            ns.tprintf(\\\"%s - %s\\\", this.targetname, stFormat(ns, this.cycleBatchTime));\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return simIncome / (simTime / 1000);\\r\\n    }\\r\\n}\",\"filename\":\"smart_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.35,\"server\":\"home\",\"moduleSequenceNumber\":224897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, canExecuteOnServer, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SmartHackEnv } from \\\"./smart_hack_env.js\\\";\\r\\n\\r\\nasync function calcIncome(ns, target, hosts, simMinutes = 2) {\\r\\n    return await new SmartHackEnv(ns, target, hosts).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n\\r\\n    let allHostnames = allHosts(ns);\\r\\n    let executableHosts = allHostnames.filter(canExecuteOnServer.bind(null, ns)).filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1);\\r\\n    let targetArr = allHostnames.filter(serverIsHackable.bind(null, ns)).filter((x) => ns.getServerMaxMoney(x) > 1);\\r\\n\\r\\n    let orderedTargetArr = [];\\r\\n    for (const target of targetArr) {\\r\\n        let income = await calcIncome(ns, target, executableHosts, ns.args[0]);\\r\\n        orderedTargetArr.push([target, income]);\\r\\n    }\\r\\n\\r\\n    orderedTargetArr = orderedTargetArr.sort((a, b) => b[1] - a[1]);\\r\\n\\r\\n    for (const [target, income] of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", target, ns.nFormat(income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n\\r\\n    if (ns.args[1] === \\\"check\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new SmartHackEnv(ns, orderedTargetArr[0][0], executableHosts);\\r\\n    await env.init(ns);\\r\\n    while (await env.refresh(ns));\\r\\n}\",\"filename\":\"smart_hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///b53259e0-8481-4d63-9828-ba96271c75b1\",\"moduleSequenceNumber\":224887},{\"filename\":\"smart_hack_env.js\",\"url\":\"blob:file:///6e69e3fc-04f1-43d5-bebd-200b6b928ce2\",\"moduleSequenceNumber\":224897},{\"filename\":\"util.js\",\"url\":\"blob:file:///2cda0556-b32b-4ae9-8f0e-a7bf66d14729\",\"moduleSequenceNumber\":224887},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///bbc42443-b66d-4e91-a2ab-1e3b587996fd\",\"moduleSequenceNumber\":224902}],\"dependents\":[],\"ramUsage\":16.75,\"server\":\"home\",\"moduleSequenceNumber\":224902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            let name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Hacking\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%3s:  %10s  %s  %s  %s %10s %s\\\",\\r\\n                    member.name,\\r\\n                    member.hack_exp.toFixed(2),\\r\\n                    member.hack_mult.toFixed(2),\\r\\n                    member.hack_asc_mult.toFixed(2),\\r\\n                    ascmem !== undefined ? ascmem.hack : 0,\\r\\n                    member.hack_asc_points.toFixed(2),\\r\\n                    member.upgrades\\r\\n                )\\r\\n            );\\r\\n\\r\\n            if (ascmem !== undefined && ascmem.hack > 2) {\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"Ascending %s %.2f => %.2f hack multiplier\\\",\\r\\n                        member.name,\\r\\n                        member.hack_asc_mult,\\r\\n                        member.hack_asc_mult * ascmem.hack\\r\\n                    )\\r\\n                );\\r\\n\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) =>\\r\\n                Object.assign(\\r\\n                    { name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) },\\r\\n                    ns.gang.getEquipmentStats(_name)\\r\\n                )\\r\\n            )\\r\\n            .filter((eq) => eq.hack !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.hack !== undefined ? eq.hack : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n\\r\\n        let newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n\\r\\n        if (ns.getPlayer().money >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money * 0.25 > buy.equipment.price) {\\r\\n                let result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(\\r\\n                        ns.sprintf(\\r\\n                            \\\"Buying %s:%s for %s\\\",\\r\\n                            buy.member.name,\\r\\n                            buy.equipment.name,\\r\\n                            ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")\\r\\n                        )\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(10000);\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n    }\\r\\n\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\r\\n            \\\"%22s %3s %3s %9s %s\\\",\\r\\n            task.name,\\r\\n            task.baseMoney,\\r\\n            task.difficulty,\\r\\n            task.baseRespect,\\r\\n            task.baseWanted\\r\\n        );\\r\\n    }\\r\\n}\",\"filename\":\"hacking_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacking_gang.js\",\"url\":\"blob:file:///0623270c-392e-4194-b080-98f487f2dac0\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":36.2,\"server\":\"home\",\"moduleSequenceNumber\":224899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { cleanLogs, llog } from \\\"./util.js\\\";\\r\\n\\r\\nconst CITIES = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"];\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    cleanLogs(ns);\\r\\n\\r\\n    const agDivName = \\\"Agriculture\\\";\\r\\n    const tbDivName = \\\"Tobacco\\\";\\r\\n    const tbRDCity = \\\"Aevum\\\";\\r\\n\\r\\n    try {\\r\\n        ns.corporation.getCorporation();\\r\\n    } catch (e) {\\r\\n        llog(ns, \\\"Created Corporation for $150b\\\");\\r\\n        ns.corporation.createCorporation(\\\"Corporation\\\", true);\\r\\n    }\\r\\n\\r\\n    // open the Agriculture division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === agDivName) === undefined) {\\r\\n        let divCost = ns.corporation.getExpandIndustryCost(agDivName);\\r\\n\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", agDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ns.corporation.expandIndustry(agDivName, agDivName);\\r\\n    }\\r\\n\\r\\n    // buy one time upgrades Smart Supply and Warehouse API\\r\\n    for (const upgrade of [\\\"Smart Supply\\\", \\\"Warehouse API\\\"]) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            let upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\",\\r\\n                    upgrade,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            } else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // buy levelable upgrades FocusWires, Neural Accelerators, Speech Processor Implants,\\r\\n    // Nuoptimal Nootropic Injector Implants, and Smart Factories\\r\\n    let leveledUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 2) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\",\\r\\n                    upgrade,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                break;\\r\\n            } else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Check primary city's warehouse and upgrade to 500\\r\\n    const primaryCity = ns.corporation.getDivision(agDivName).cities[0];\\r\\n    if (!ns.corporation.hasWarehouse(agDivName, primaryCity)) {\\r\\n        llog(ns, \\\"ERROR: %s primary city %s does not have a warehouse\\\", agDivName, primaryCity);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    while (ns.corporation.getWarehouse(agDivName, primaryCity).size < 500) {\\r\\n        let upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, primaryCity);\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n        let startSize = ns.corporation.getWarehouse(agDivName, primaryCity).size;\\r\\n\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\",\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n        } else {\\r\\n            ns.corporation.upgradeWarehouse(agDivName, primaryCity);\\r\\n            let endSize = ns.corporation.getWarehouse(agDivName, primaryCity).size;\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\",\\r\\n                agDivName,\\r\\n                primaryCity,\\r\\n                ns.nFormat(startSize, \\\"(0.000a)\\\"),\\r\\n                ns.nFormat(endSize, \\\"(0.000a)\\\"),\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (ns.corporation.getWarehouse(agDivName, primaryCity).size < 500) {\\r\\n        llog(\\r\\n            ns,\\r\\n            \\\"ERROR: %s primary city %s's warehouse is too small %d < 500\\\",\\r\\n            agDivName,\\r\\n            primaryCity,\\r\\n            ns.corporation.getWarehouse(agDivName, primaryCity).size\\r\\n        );\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // buy production materials for primary city\\r\\n    if (ns.corporation.getMaterial(agDivName, primaryCity, \\\"Real Estate\\\").qty === 0) {\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Hardware\\\", 12.5);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"AI Cores\\\", 7.5);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Real Estate\\\", 2700);\\r\\n\\r\\n        while (ns.corporation.getMaterial(agDivName, primaryCity, \\\"Real Estate\\\").qty === 0) await ns.sleep(5);\\r\\n\\r\\n        llog(ns, \\\"Purchased Round 1 of %s production materials in %s\\\", agDivName, primaryCity);\\r\\n\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Hardware\\\", 0);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"AI Cores\\\", 0);\\r\\n        ns.corporation.buyMaterial(agDivName, primaryCity, \\\"Real Estate\\\", 0);\\r\\n    }\\r\\n\\r\\n    ns.corporation.setSmartSupply(agDivName, primaryCity, true);\\r\\n\\r\\n    // Attempt to get first round of funding\\r\\n    while (ns.corporation.getInvestmentOffer().round < 2) {\\r\\n        llog(ns, \\\"Investment round 1: waiting for %s %s warehouse to fill\\\", agDivName, primaryCity);\\r\\n\\r\\n        // Sell plants but not food (food is more expensive per unit)\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"0\\\", \\\"0\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n        while (\\r\\n            ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed <\\r\\n            ns.corporation.getWarehouse(agDivName, primaryCity).size * 0.95\\r\\n        ) {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        llog(\\r\\n            ns,\\r\\n            \\\"Investment round 1: %s %s warehouse is full, initiating bulk sell-off to woo investors\\\",\\r\\n            agDivName,\\r\\n            primaryCity\\r\\n        );\\r\\n\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"MAX\\\", \\\"MP*1\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP*1\\\");\\r\\n\\r\\n        let tookOffer = false;\\r\\n        let bestOffer = ns.corporation.getInvestmentOffer();\\r\\n        while (ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed > 151) {\\r\\n            let offer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n            // only take offers over $335b\\r\\n            if (offer.funds > 335000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Investment round 1: Taking offer of %s for %d%%\\\",\\r\\n                    ns.nFormat(offer.funds, \\\"(0.000a)\\\"),\\r\\n                    (offer.shares / 1000000000) * 100\\r\\n                );\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (offer.funds > bestOffer.funds) {\\r\\n                bestOffer = offer;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n\\r\\n        if (!tookOffer) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Investment round 1: Failed to generate an offer over $335b (best: %s for %d%%)\\\",\\r\\n                ns.nFormat(bestOffer.funds, \\\"(0.000a)\\\"),\\r\\n                (bestOffer.shares / 1000000000) * 100\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // revert sale prices for now\\r\\n    ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    ns.corporation.sellMaterial(agDivName, primaryCity, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n    // buy one time upgrade Office API\\r\\n    for (const upgrade of [\\\"Office API\\\"]) {\\r\\n        if (!ns.corporation.hasUnlockUpgrade(upgrade)) {\\r\\n            let upgradeCost = ns.corporation.getUnlockUpgradeCost(upgrade);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"ERROR: Insufficient funds to purchase %s %s < %s\\\",\\r\\n                    upgrade,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                return;\\r\\n            } else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.unlockUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(agDivName).cities.includes(a))) {\\r\\n        let expandCost = ns.corporation.getExpandCityCost();\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\",\\r\\n                agDivName,\\r\\n                city,\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(expandCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        } else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", agDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(agDivName, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(agDivName, city)) {\\r\\n            let warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Purchasing a %s warehouse in %s for %s\\\",\\r\\n                    agDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(warehouseCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                ns.corporation.purchaseWarehouse(agDivName, city);\\r\\n            } else {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\",\\r\\n                    agDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(warehouseCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // upgrade the size of the warehouses in all of the cities to 500\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 500) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n            let startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\",\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            } else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                let endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\",\\r\\n                    agDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(startSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(endSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.corporation.setSmartSupply(agDivName, city, true);\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n    }\\r\\n\\r\\n    // upgrade the office size in every city to 9 and assign jobs\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getOffice(agDivName, city).size >= 9) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        let upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(\\r\\n            agDivName,\\r\\n            city,\\r\\n            9 - ns.corporation.getOffice(agDivName, city).size\\r\\n        );\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"ERROR: Insufficient funds to increase %s %s office size to 9 %s < %s\\\",\\r\\n                agDivName,\\r\\n                city,\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            return;\\r\\n        } else {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Purchasing %d additional office positions in %s %s for %s\\\",\\r\\n                9 - ns.corporation.getOffice(agDivName, city).size,\\r\\n                agDivName,\\r\\n                city,\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            ns.corporation.upgradeOfficeSize(agDivName, city, 9 - ns.corporation.getOffice(agDivName, city).size);\\r\\n        }\\r\\n\\r\\n        while (ns.corporation.getOffice(agDivName, city).employees.length < 9) {\\r\\n            ns.corporation.hireEmployee(agDivName, city);\\r\\n        }\\r\\n\\r\\n        for (const employee of ns.corporation.getOffice(agDivName, city).employees)\\r\\n            ns.corporation.assignJob(agDivName, city, employee, \\\"Unassigned\\\");\\r\\n\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Operations\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Engineer\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Business\\\", 1);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Management\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(agDivName, city, \\\"Research & Development\\\", 2);\\r\\n    }\\r\\n\\r\\n    // buy production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty === 0) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 12.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 7.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 2700);\\r\\n\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty === 0) await ns.sleep(5);\\r\\n\\r\\n            llog(ns, \\\"Purchased Round 1 of %s production materials in %s\\\", agDivName, city);\\r\\n\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Upgrade Smart Factories and Smart Storage\\r\\n    leveledUpgrades = [\\\"Smart Factories\\\", \\\"Smart Storage\\\"];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 10) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\",\\r\\n                    upgrade,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                break;\\r\\n            } else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Increase Warehouse Sizes to 2k\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 2000) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n            let startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\",\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            } else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                let endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\",\\r\\n                    agDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(startSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(endSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // buy second round production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 140000) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 267.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 9.6);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 244.5);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 11940);\\r\\n\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 140000) await ns.sleep(5);\\r\\n\\r\\n            llog(ns, \\\"Purchased Round 2 of %s production materials in %s\\\", agDivName, city);\\r\\n\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Attempt to get second round of funding\\r\\n    while (ns.corporation.getInvestmentOffer().round < 3) {\\r\\n        llog(ns, \\\"Investment round 2: waiting for %s warehouses to fill\\\", agDivName);\\r\\n\\r\\n        // Sell plants but not food (food is more expensive per unit)\\r\\n        for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"0\\\", \\\"0\\\");\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP\\\");\\r\\n        }\\r\\n\\r\\n        while (true) {\\r\\n            let doBreak = true;\\r\\n            for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n                if (\\r\\n                    ns.corporation.getWarehouse(agDivName, city).sizeUsed <\\r\\n                    ns.corporation.getWarehouse(agDivName, city).size * 0.95\\r\\n                ) {\\r\\n                    doBreak = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (doBreak) break;\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        llog(ns, \\\"Investment round 2: %s warehouses are full, initiating bulk sell-off to woo investors\\\", agDivName);\\r\\n\\r\\n        for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Food\\\", \\\"MAX\\\", \\\"MP*0.9\\\");\\r\\n            ns.corporation.sellMaterial(agDivName, city, \\\"Plants\\\", \\\"MAX\\\", \\\"MP*0.9\\\");\\r\\n        }\\r\\n\\r\\n        let tookOffer = false;\\r\\n        let bestOffer = ns.corporation.getInvestmentOffer();\\r\\n        while (ns.corporation.getWarehouse(agDivName, primaryCity).sizeUsed > 1250) {\\r\\n            let offer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n            //only take offers over $10t\\r\\n            if (offer.funds > 10000000000000) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Investment round 2: Taking offer of %s for %d%%\\\",\\r\\n                    ns.nFormat(offer.funds, \\\"(0.000a)\\\"),\\r\\n                    (offer.shares / 1000000000) * 100\\r\\n                );\\r\\n                tookOffer = true;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            if (offer.funds > bestOffer.funds) {\\r\\n                bestOffer = offer;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n\\r\\n        if (!tookOffer) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Investment round 2: Failed to generate an offer over $10t (best: %s for %d%%)\\\",\\r\\n                ns.nFormat(bestOffer.funds, \\\"(0.000a)\\\"),\\r\\n                (bestOffer.shares / 1000000000) * 100\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Increase Warehouse Sizes to 3.8k\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        while (ns.corporation.getWarehouse(agDivName, city).size < 3800) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeWarehouseCost(agDivName, city);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n            let startSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\",\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            } else {\\r\\n                ns.corporation.upgradeWarehouse(agDivName, city);\\r\\n                let endSize = ns.corporation.getWarehouse(agDivName, city).size;\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\",\\r\\n                    agDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(startSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(endSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // buy third round production materials for all cities\\r\\n    for (const city of ns.corporation.getDivision(agDivName).cities) {\\r\\n        if (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 230000) {\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 650);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 63);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 375);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 8400);\\r\\n\\r\\n            while (ns.corporation.getMaterial(agDivName, city, \\\"Real Estate\\\").qty < 230000) await ns.sleep(5);\\r\\n\\r\\n            llog(ns, \\\"Purchased Round 3 of %s production materials in %s\\\", agDivName, city);\\r\\n\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Hardware\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Robots\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"AI Cores\\\", 0);\\r\\n            ns.corporation.buyMaterial(agDivName, city, \\\"Real Estate\\\", 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // open the Tobacco division\\r\\n    if (ns.corporation.getCorporation().divisions.find((div) => div.type === tbDivName) === undefined) {\\r\\n        let divCost = ns.corporation.getExpandIndustryCost(tbDivName);\\r\\n        llog(ns, \\\"Starting %s division for %s\\\", tbDivName, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ns.corporation.expandIndustry(tbDivName, tbDivName);\\r\\n    }\\r\\n\\r\\n    // Expand to additional cities\\r\\n    for (const city of CITIES.filter((a) => !ns.corporation.getDivision(tbDivName).cities.includes(a))) {\\r\\n        let expandCost = ns.corporation.getExpandCityCost();\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n        if (corpFunds < expandCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"ERROR: Insufficient funds to expand %s to %s %s < %s\\\",\\r\\n                tbDivName,\\r\\n                city,\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(expandCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        } else {\\r\\n            llog(ns, \\\"Expanding %s to %s for %s\\\", tbDivName, city, ns.nFormat(expandCost, \\\"($0.000a)\\\"));\\r\\n            ns.corporation.expandCity(tbDivName, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Buy warehouses in all cities\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (!ns.corporation.hasWarehouse(tbDivName, city)) {\\r\\n            let warehouseCost = ns.corporation.getPurchaseWarehouseCost();\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (warehouseCost <= corpFunds) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Purchasing a %s warehouse in %s for %s\\\",\\r\\n                    tbDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(warehouseCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                ns.corporation.purchaseWarehouse(tbDivName, city);\\r\\n            } else {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Insufficient funds to purchase a %s warehouse in %s %s < %s\\\",\\r\\n                    tbDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(warehouseCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // upgrade the size of the warehouses in all of the cities to 1000\\r\\n        while (ns.corporation.getWarehouse(tbDivName, city).size < 1000) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeWarehouseCost(tbDivName, city);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n            let startSize = ns.corporation.getWarehouse(tbDivName, city).size;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase a warehouse upgrade %s < %s\\\",\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            } else {\\r\\n                ns.corporation.upgradeWarehouse(tbDivName, city);\\r\\n                let endSize = ns.corporation.getWarehouse(tbDivName, city).size;\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Upgraded %s %s's warehouse size from %s to %s for %s\\\",\\r\\n                    tbDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(startSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(endSize, \\\"(0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.corporation.setSmartSupply(tbDivName, city, true);\\r\\n    }\\r\\n\\r\\n    // upgrade the office size in every city to 10 and assign jobs\\r\\n    for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n        if (ns.corporation.getOffice(tbDivName, city).size >= 10) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        let upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(\\r\\n            tbDivName,\\r\\n            city,\\r\\n            10 - ns.corporation.getOffice(tbDivName, city).size\\r\\n        );\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"ERROR: Insufficient funds to increase %s %s office size to 10 %s < %s\\\",\\r\\n                tbDivName,\\r\\n                city,\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            return;\\r\\n        } else {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Purchasing %d additional office positions in %s %s for %s\\\",\\r\\n                10 - ns.corporation.getOffice(tbDivName, city).size,\\r\\n                tbDivName,\\r\\n                city,\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            ns.corporation.upgradeOfficeSize(tbDivName, city, 10 - ns.corporation.getOffice(tbDivName, city).size);\\r\\n        }\\r\\n\\r\\n        while (ns.corporation.getOffice(tbDivName, city).employees.length < 10) {\\r\\n            ns.corporation.hireEmployee(tbDivName, city);\\r\\n        }\\r\\n\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Unassigned\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Operations\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Engineer\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Business\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Management\\\", 2);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Research & Development\\\", 2);\\r\\n    }\\r\\n\\r\\n    // Upgrade Aevum office to 30 employees\\r\\n    if (ns.corporation.getOffice(tbDivName, tbRDCity).size < 30) {\\r\\n        let upgradeCost = ns.corporation.getOfficeSizeUpgradeCost(\\r\\n            tbDivName,\\r\\n            tbRDCity,\\r\\n            30 - ns.corporation.getOffice(tbDivName, tbRDCity).size\\r\\n        );\\r\\n        let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n        if (corpFunds < upgradeCost) {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"ERROR: Insufficient funds to increase %s %s office size to 30 %s < %s\\\",\\r\\n                tbDivName,\\r\\n                tbRDCity,\\r\\n                ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            return;\\r\\n        } else {\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"Purchasing %d additional office positions in %s %s for %s\\\",\\r\\n                30 - ns.corporation.getOffice(tbDivName, tbRDCity).size,\\r\\n                tbDivName,\\r\\n                tbRDCity,\\r\\n                ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            ns.corporation.upgradeOfficeSize(\\r\\n                tbDivName,\\r\\n                tbRDCity,\\r\\n                30 - ns.corporation.getOffice(tbDivName, tbRDCity).size\\r\\n            );\\r\\n        }\\r\\n\\r\\n        while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < 30) {\\r\\n            ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n        }\\r\\n\\r\\n        for (const employee of ns.corporation.getOffice(tbDivName, tbRDCity).employees)\\r\\n            ns.corporation.assignJob(tbDivName, tbRDCity, employee, \\\"Unassigned\\\");\\r\\n\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Operations\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Engineer\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Business\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Management\\\", 6);\\r\\n        await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Research & Development\\\", 6);\\r\\n    }\\r\\n\\r\\n    leveledUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n    ];\\r\\n    for (const upgrade of leveledUpgrades) {\\r\\n        while (ns.corporation.getUpgradeLevel(upgrade) < 20) {\\r\\n            let upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n            let corpFunds = ns.corporation.getCorporation().funds;\\r\\n\\r\\n            if (corpFunds < upgradeCost) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"WARNING: Insufficient funds to purchase %s %s < %s\\\",\\r\\n                    upgrade,\\r\\n                    ns.nFormat(corpFunds, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                break;\\r\\n            } else {\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", upgrade, ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let doUpdate = false;\\r\\n    let didUpdate = false;\\r\\n    let productTracker = {};\\r\\n\\r\\n    // initialize product tracker\\r\\n    ns.corporation\\r\\n        .getDivision(tbDivName)\\r\\n        .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n        .forEach((product) => {\\r\\n            let mult = Number(product.sCost.slice(3));\\r\\n            productTracker[product.name] = {\\r\\n                state: \\\"HOLD\\\", // [\\\"HOLD\\\", \\\"SEARCH\\\", \\\"INC\\\", \\\"DEC\\\"]\\r\\n                mult: Number(product.sCost.slice(3)),\\r\\n                min: 0,\\r\\n                max: 0,\\r\\n            };\\r\\n        });\\r\\n    while (true) {\\r\\n        let state = ns.corporation.getCorporation().state;\\r\\n\\r\\n        if (state === \\\"START\\\") {\\r\\n            doUpdate = true;\\r\\n        }\\r\\n\\r\\n        if (state !== \\\"START\\\") {\\r\\n            doUpdate = false;\\r\\n            didUpdate = false;\\r\\n        }\\r\\n\\r\\n        if (doUpdate && !didUpdate) {\\r\\n            //llog(ns, \\\"Doing Update\\\");\\r\\n\\r\\n            didUpdate = true;\\r\\n\\r\\n            // Attempt to max out Wilson Analytics\\r\\n            while (ns.corporation.getUpgradeLevelCost(\\\"Wilson Analytics\\\") < ns.corporation.getCorporation().funds * 0.5) {\\r\\n                let upgradeCost = ns.corporation.getUpgradeLevelCost(\\\"Wilson Analytics\\\");\\r\\n                llog(ns, \\\"Purchasing %s upgrade for %s\\\", \\\"Wilson Analytics\\\", ns.nFormat(upgradeCost, \\\"($0.000a)\\\"));\\r\\n                ns.corporation.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n            }\\r\\n\\r\\n            let maxProducts = 3;\\r\\n            if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.I\\\")) maxProducts++;\\r\\n            if (ns.corporation.hasResearched(tbDivName, \\\"uPgrade: Capacity.II\\\")) maxProducts++;\\r\\n\\r\\n            // Develop a product if there are none in development\\r\\n            let products = ns.corporation\\r\\n                .getDivision(tbDivName)\\r\\n                .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n                .sort((a, b) => Number(a.name.slice(5)) - Number(b.name.slice(5)));\\r\\n\\r\\n            let productIsDeveloping = false;\\r\\n            for (const product of products) {\\r\\n                if (product.developmentProgress < 100) {\\r\\n                    productIsDeveloping = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // if there are no products in development, discontinue the oldest one if needed\\r\\n            if (!productIsDeveloping) {\\r\\n                if (products.length === maxProducts) {\\r\\n                    llog(ns, \\\"Discontinuing %s product %s\\\", tbDivName, products[0].name);\\r\\n\\r\\n                    ns.corporation.discontinueProduct(tbDivName, products[0].name);\\r\\n                }\\r\\n\\r\\n                let investmentCash = ns.corporation.getCorporation().funds * 0.01;\\r\\n\\r\\n                let productName = \\\"prod-0\\\";\\r\\n                let newMult = 1;\\r\\n                if (products.length > 0) {\\r\\n                    productName = \\\"prod-\\\" + (Number(products[products.length - 1].name.slice(5)) + 1).toString();\\r\\n                }\\r\\n\\r\\n                if (products.length > 1) {\\r\\n                    newMult = Number(products[products.length - 2].sCost.slice(3));\\r\\n                }\\r\\n\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Developing new %s product %s for %s\\\",\\r\\n                    tbDivName,\\r\\n                    productName,\\r\\n                    ns.nFormat(investmentCash * 2, \\\"($0.000a)\\\")\\r\\n                );\\r\\n\\r\\n                ns.corporation.makeProduct(tbDivName, tbRDCity, productName, investmentCash, investmentCash);\\r\\n                ns.corporation.sellProduct(tbDivName, tbRDCity, productName, \\\"MAX\\\", \\\"MP*\\\" + newMult.toString(), true);\\r\\n            }\\r\\n\\r\\n            products = ns.corporation\\r\\n                .getDivision(tbDivName)\\r\\n                .products.map((prodname) => ns.corporation.getProduct(tbDivName, prodname))\\r\\n                .sort((a, b) => Number(a.name) - Number(b.name));\\r\\n\\r\\n            // mess with the price of products\\r\\n            for (const product of products) {\\r\\n                if (product.developmentProgress < 100) continue;\\r\\n                let mpMult = Number(product.sCost.slice(3));\\r\\n                let reduceMult = false;\\r\\n                let increaseMult = 0;\\r\\n                for (const [key, [qty, prod, sell]] of Object.entries(product.cityData)) {\\r\\n                    const prodDeficit = prod - sell;\\r\\n                    if (qty > prod * 20 && prodDeficit > 0) {\\r\\n                        reduceMult = true;\\r\\n                        break;\\r\\n                    } else if (qty < prod * 10 || prodDeficit < -1) {\\r\\n                        increaseMult++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (reduceMult) {\\r\\n                    let oldmpMult = mpMult;\\r\\n                    mpMult = Math.max(Math.floor(mpMult * 0.975), 1);\\r\\n\\r\\n                    llog(ns, \\\"Reducing %s mpMult %d => %d\\\", product.name, oldmpMult, mpMult);\\r\\n                    ns.corporation.sellProduct(\\r\\n                        tbDivName,\\r\\n                        tbRDCity,\\r\\n                        product.name,\\r\\n                        \\\"MAX\\\",\\r\\n                        \\\"MP*\\\" + mpMult.toString(),\\r\\n                        true\\r\\n                    );\\r\\n                } else if (increaseMult === Object.keys(product.cityData).length) {\\r\\n                    let oldmpMult = mpMult;\\r\\n\\r\\n                    mpMult = Math.ceil(mpMult * 1.1);\\r\\n\\r\\n                    llog(ns, \\\"Increasing %s mpMult %d => %d\\\", product.name, oldmpMult, mpMult);\\r\\n                    ns.corporation.sellProduct(\\r\\n                        tbDivName,\\r\\n                        tbRDCity,\\r\\n                        product.name,\\r\\n                        \\\"MAX\\\",\\r\\n                        \\\"MP*\\\" + mpMult.toString(),\\r\\n                        true\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            ////////////////////////////////////////\\r\\n            // look for optimal MP multiplier\\r\\n            // search state uses binary search to find equilibrium\\r\\n            // hold state uses small increments up or down to hold diff between -1 and 0\\r\\n            //\\r\\n            // Hold Mode:\\r\\n            // prod = production of the highest producing city\\r\\n            // if all diffs are <= 0 and all qty are < prod*10, start increasing\\r\\n            // if any diffs are > 0 start decreasing\\r\\n            // if all diffs are <= 0 and all qty are < prod*20, hold\\r\\n            //\\r\\n            // * start multiplier for new product at the same multiplier for the latest product\\r\\n            //\\r\\n            // after research is > 10k, wait for the latest product to finish, find optimal MPMult for that product and get 3rd round of funding\\r\\n            //\\r\\n            // after 3rd round of funding, go public with 0 shares, set dividenend to 5%\\r\\n\\r\\n            // compare price of increasing advertising vs increasing office space, do the cheaper if it's affordable\\r\\n            let officeSizeIncrease = 0;\\r\\n            let officeSizePrice = 0;\\r\\n            let advertIncrease = 0;\\r\\n            let advertPrice = 0;\\r\\n            while (true) {\\r\\n                let advertCost = ns.corporation.getHireAdVertCost(tbDivName);\\r\\n                let tbRDCityOfficeExpandCost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, tbRDCity, 15);\\r\\n\\r\\n                if (\\r\\n                    advertCost > ns.corporation.getCorporation().funds * 0.5 &&\\r\\n                    tbRDCityOfficeExpandCost > ns.corporation.getCorporation().funds * 0.5\\r\\n                )\\r\\n                    break;\\r\\n\\r\\n                if (advertCost < tbRDCityOfficeExpandCost) {\\r\\n                    advertIncrease++;\\r\\n                    advertPrice += advertCost;\\r\\n                    ns.corporation.hireAdVert(tbDivName);\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                officeSizeIncrease += 15;\\r\\n                officeSizePrice += tbRDCityOfficeExpandCost;\\r\\n                ns.corporation.upgradeOfficeSize(tbDivName, tbRDCity, 15);\\r\\n            }\\r\\n\\r\\n            if (advertIncrease > 0) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Hiring %s AdVert %dx for %s\\\",\\r\\n                    tbDivName,\\r\\n                    advertIncrease,\\r\\n                    ns.nFormat(advertPrice, \\\"($0.000a)\\\")\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (officeSizeIncrease > 0) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Hiring %d employees in %s:%s for %s\\\",\\r\\n                    officeSizeIncrease,\\r\\n                    tbDivName,\\r\\n                    tbRDCity,\\r\\n                    ns.nFormat(officeSizePrice, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                let officeSize = ns.corporation.getOffice(tbDivName, tbRDCity).size;\\r\\n                while (ns.corporation.getOffice(tbDivName, tbRDCity).employees.length < officeSize) {\\r\\n                    ns.corporation.hireEmployee(tbDivName, tbRDCity);\\r\\n                }\\r\\n\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Unassigned\\\", officeSize);\\r\\n\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Operations\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Engineer\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Business\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, tbRDCity, \\\"Management\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(\\r\\n                    tbDivName,\\r\\n                    tbRDCity,\\r\\n                    \\\"Research & Development\\\",\\r\\n                    officeSize / 5\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // if any of the other office sizes are < 20% the size of the Aevum office, attempt to increase their size\\r\\n            let cityIncrease = {};\\r\\n            for (const city of ns.corporation.getDivision(tbDivName).cities) {\\r\\n                // iterate as long as this city's office size is less than 20% of Aevum's and the price\\r\\n                // of upgrading is less than 5% of the corporation's funds\\r\\n                while (\\r\\n                    ns.corporation.getOffice(tbDivName, city).size <\\r\\n                        ns.corporation.getOffice(tbDivName, tbRDCity).size * 0.2 &&\\r\\n                    ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5) <\\r\\n                        ns.corporation.getCorporation().funds * 0.05\\r\\n                ) {\\r\\n                    let cost = ns.corporation.getOfficeSizeUpgradeCost(tbDivName, city, 5);\\r\\n                    ns.corporation.upgradeOfficeSize(tbDivName, city, 5);\\r\\n\\r\\n                    if (!(city in cityIncrease)) {\\r\\n                        cityIncrease[city] = {\\r\\n                            inc: 5,\\r\\n                            cost: cost,\\r\\n                        };\\r\\n                    } else {\\r\\n                        cityIncrease[city].inc += 5;\\r\\n                        cityIncrease[city].cost += cost;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const [city, val] of Object.entries(cityIncrease)) {\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Hiring %d employees in %s:%s for %s\\\",\\r\\n                    val.inc,\\r\\n                    tbDivName,\\r\\n                    city,\\r\\n                    ns.nFormat(val.cost, \\\"($0.000a)\\\")\\r\\n                );\\r\\n                let officeSize = ns.corporation.getOffice(tbDivName, city).size;\\r\\n                while (ns.corporation.getOffice(tbDivName, city).employees.length < officeSize) {\\r\\n                    ns.corporation.hireEmployee(tbDivName, city);\\r\\n                }\\r\\n\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Unassigned\\\", officeSize);\\r\\n\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Operations\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Engineer\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Business\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Management\\\", officeSize / 5);\\r\\n                await ns.corporation.setAutoJobAssignment(tbDivName, city, \\\"Research & Development\\\", officeSize / 5);\\r\\n            }\\r\\n\\r\\n            let leveledUpgrades = [\\r\\n                \\\"Project Insight\\\",\\r\\n                \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n                \\\"Smart Factories\\\",\\r\\n                \\\"DreamSense\\\",\\r\\n                \\\"Speech Processor Implants\\\",\\r\\n                \\\"Neural Accelerators\\\",\\r\\n                \\\"FocusWires\\\",\\r\\n                \\\"ABC SalesBots\\\",\\r\\n                \\\"Smart Storage\\\",\\r\\n            ];\\r\\n            for (const upgrade of leveledUpgrades) {\\r\\n                let upgradeCount = 0;\\r\\n                let upgradeCost = 0;\\r\\n                while (ns.corporation.getUpgradeLevelCost(upgrade) < ns.corporation.getCorporation().funds * 0.01) {\\r\\n                    upgradeCost += ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n                    upgradeCount++;\\r\\n                    ns.corporation.levelUpgrade(upgrade);\\r\\n                }\\r\\n\\r\\n                if (upgradeCount > 0) {\\r\\n                    llog(\\r\\n                        ns,\\r\\n                        \\\"Purchased %dx %s upgrade for %s\\\",\\r\\n                        upgradeCount,\\r\\n                        upgrade,\\r\\n                        ns.nFormat(upgradeCost, \\\"($0.000a)\\\")\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // attempt to expand to additional divisions to improve valuation\\r\\n            const divisions = [\\r\\n                \\\"Food\\\",\\r\\n                \\\"Software\\\",\\r\\n                \\\"Chemical\\\",\\r\\n                \\\"Fishing\\\",\\r\\n                \\\"Utilities\\\",\\r\\n                \\\"Pharmaceutical\\\",\\r\\n                \\\"Energy\\\",\\r\\n                \\\"Mining\\\",\\r\\n                \\\"Computer\\\",\\r\\n                \\\"RealEstate\\\",\\r\\n                \\\"Healthcare\\\",\\r\\n                \\\"Robotics\\\",\\r\\n            ];\\r\\n            for (const division of divisions) {\\r\\n                if (\\r\\n                    ns.corporation.getCorporation().divisions.find((div) => div.type === division) === undefined &&\\r\\n                    ns.corporation.getExpandIndustryCost(division) < ns.corporation.getCorporation().funds\\r\\n                ) {\\r\\n                    let divCost = ns.corporation.getExpandIndustryCost(division);\\r\\n                    llog(ns, \\\"Starting %s division for %s\\\", division, ns.nFormat(divCost, \\\"($0.000a)\\\"));\\r\\n\\r\\n                    ns.corporation.expandIndustry(division, division);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If all divisions have been built and a 3rd round investment offer is made for > $1q, accept\\r\\n            let offer = ns.corporation.getInvestmentOffer();\\r\\n            if (\\r\\n                ns.corporation.getCorporation().divisions.length === 14 &&\\r\\n                offer.round === 3 &&\\r\\n                offer.funds > 1000000000000000\\r\\n            ) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"Investment round 3: Taking offer of %s for %d%%\\\",\\r\\n                    ns.nFormat(offer.funds, \\\"(0.000a)\\\"),\\r\\n                    (offer.shares / 1000000000) * 100\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Buy Research Upgrades -- buy after high priority researches, and only if purchase cost is < 5% of total research\\r\\n            let lowPriorityResearches = [\\r\\n                \\\"Automatic Drug Administration\\\",\\r\\n                \\\"CPH4 Injections\\\",\\r\\n                \\\"Drones\\\",\\r\\n                \\\"Drones - Assembly\\\",\\r\\n                \\\"Drones - Transport\\\",\\r\\n                \\\"Go-Juice\\\",\\r\\n                \\\"JoyWire\\\",\\r\\n                \\\"Overclock\\\",\\r\\n                \\\"Self-Correcting Assemblers\\\",\\r\\n                \\\"Sti.mu\\\",\\r\\n            ];\\r\\n\\r\\n            // High Priority - buy when purchase cost is 50% of total research\\r\\n            let highPriorityResearches = [\\r\\n                \\\"Hi-Tech R&D Laboratory\\\",\\r\\n                \\\"Market-TA.I\\\",\\r\\n                \\\"Market-TA.II\\\",\\r\\n                \\\"uPgrade: Fulcrum\\\",\\r\\n                \\\"uPgrade: Capacity.I\\\",\\r\\n                \\\"uPgrade: Capacity.II\\\",\\r\\n            ];\\r\\n\\r\\n            // buy one time unlocks government partnership and shady accounting after going public\\r\\n        }\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n\\r\\n    llog(ns, \\\"**** DONE ****\\\");\\r\\n    return;\\r\\n\\r\\n    for (const div of corp.divisions) {\\r\\n        llog(ns, \\\"%s: %s - %s\\\", corp.name, div.name, div.type);\\r\\n        const products = div.products.map((prodname) => ns.corporation.getProduct(div.name, prodname));\\r\\n\\r\\n        for (const product of products) {\\r\\n            const marketFactor = Math.max(0.1, (product.dmd * (100 - product.cmp)) / 100);\\r\\n            llog(ns, \\\"  %s:\\\", product.name);\\r\\n            //llog(ns, \\\"      Development Progress: %s\\\", product.developmentProgress)\\r\\n            llog(ns, \\\"      Market Price: %s\\\", ns.nFormat(product.pCost, \\\"($0.000a)\\\"));\\r\\n            llog(\\r\\n                ns,\\r\\n                \\\"      Sell Cost: %s\\\",\\r\\n                typeof product.sCost === \\\"string\\\" ? product.sCost : ns.nFormat(product.sCost, \\\"($0.000a)\\\")\\r\\n            );\\r\\n            llog(ns, \\\"      Competition: %.2f\\\", product.cmp);\\r\\n            llog(ns, \\\"      Demand: %.2f\\\", product.dmd);\\r\\n            llog(ns, \\\"      Market Factor: %.2f\\\", marketFactor);\\r\\n\\r\\n            let mult = 32;\\r\\n            for (const [key, [qty, prod, sell]] of Object.entries(product.cityData)) {\\r\\n                const prodDeficit = prod + 0.00000001 - sell;\\r\\n                llog(\\r\\n                    ns,\\r\\n                    \\\"        %10s: qty: %-6.2f prod: %-6.2f sell: %-6.2f diff: %-6.2f\\\",\\r\\n                    key,\\r\\n                    qty,\\r\\n                    prod,\\r\\n                    sell,\\r\\n                    prodDeficit\\r\\n                );\\r\\n                //ns.corporation.sellProduct(div.name, key, product.name, prod * 2, product.pCost * mult + mult.toString(), false);\\r\\n                mult += 10;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"corp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///8dad3988-2cb1-4364-a32a-48d97b3223e0\",\"moduleSequenceNumber\":10497},{\"filename\":\"corp.js\",\"url\":\"blob:file:///6468dec6-e665-4028-b27a-7990b5581f8d\",\"moduleSequenceNumber\":10570}],\"dependents\":[],\"ramUsage\":1026.5,\"server\":\"home\",\"moduleSequenceNumber\":224900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"darkweb\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":4462796063.900001,\"moneyMax\":11156990159.750002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1398,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"37.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":4057546077.5,\"moneyMax\":10143865193.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1227,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"56.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":2016176612.3000002,\"moneyMax\":5040441530.750001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":72}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"74.4.4.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":235,\"hackDifficulty\":235,\"minDifficulty\":78,\"moneyAvailable\":3105976784.3,\"moneyMax\":7764941960.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":957,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"9.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3617737660.7000003,\"moneyMax\":9044344151.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1077,\"serverGrowth\":81}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"6.2.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":1694557884.7,\"moneyMax\":4236394711.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1224,\"serverGrowth\":60}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"67.7.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":227.5,\"hackDifficulty\":227.5,\"minDifficulty\":76,\"moneyAvailable\":2169313909.2000003,\"moneyMax\":5423284773.000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"11.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":2169218928.2000003,\"moneyMax\":5423047320.500001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1246,\"serverGrowth\":91}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"35.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":2643355884.5,\"moneyMax\":6608389711.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1109,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"98.9.9.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":232.5,\"hackDifficulty\":232.5,\"minDifficulty\":78,\"moneyAvailable\":179344229.4,\"moneyMax\":448360573.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1046,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"24.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1560,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"20.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":220,\"hackDifficulty\":220,\"minDifficulty\":73,\"moneyAvailable\":103369421.60000001,\"moneyMax\":258423554,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":928,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"87.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":86331512.2,\"moneyMax\":215828780.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"87.0.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":65849710.1,\"moneyMax\":164624275.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":64}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"95.2.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":222.5,\"hackDifficulty\":222.5,\"minDifficulty\":74,\"moneyAvailable\":69386949.9,\"moneyMax\":173467374.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"66.7.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":76209400.7,\"moneyMax\":190523501.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"97.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":215,\"hackDifficulty\":215,\"minDifficulty\":72,\"moneyAvailable\":96630721.7,\"moneyMax\":241576804.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"71.8.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b9549f22-1e99-48fe-8063-be6316a8fe75\",\"moduleSequenceNumber\":228656}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":228656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5b084bc6-7387-41a4-b512-29fc7cf81681\",\"moduleSequenceNumber\":228653}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":228653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4d5383b0-0055-49e1-af35-10da0fa4aa4e\",\"moduleSequenceNumber\":228665}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":228665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":111808069.80000001,\"moneyMax\":279520174.50000006,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":861,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"78.3.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":195,\"hackDifficulty\":195,\"minDifficulty\":65,\"moneyAvailable\":80215958.2,\"moneyMax\":200539895.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":77}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"25.8.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":67083586.900000006,\"moneyMax\":167708967.25000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":81}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"23.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":195,\"hackDifficulty\":195,\"minDifficulty\":65,\"moneyAvailable\":86553056.2,\"moneyMax\":216382640.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"60.4.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":81191597.4,\"moneyMax\":202978993.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"72.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":102663169.9,\"moneyMax\":256657924.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"26.7.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":220,\"hackDifficulty\":220,\"minDifficulty\":73,\"moneyAvailable\":99061594.30000001,\"moneyMax\":247653985.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"1.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":100107792.80000001,\"moneyMax\":250269482.00000006,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":823,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"18.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":157.5,\"hackDifficulty\":157.5,\"minDifficulty\":53,\"moneyAvailable\":77675856.4,\"moneyMax\":194189641.00000003,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":797,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"52.2.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":175,\"hackDifficulty\":175,\"minDifficulty\":58,\"moneyAvailable\":89296540.2,\"moneyMax\":223241350.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"46.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":153963641.70000002,\"moneyMax\":384909104.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"66.6.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2c0da9a8-eee7-4cd4-b4c7-a74419bb03c4\",\"moduleSequenceNumber\":228660}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":228660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8f29706f-b02f-46a5-ba54-48c4085e12c4\",\"moduleSequenceNumber\":229048}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":229048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":228644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":212.5,\"hackDifficulty\":212.5,\"minDifficulty\":71,\"moneyAvailable\":161749133.20000002,\"moneyMax\":404372833.00000006,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":758,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"30.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":157.5,\"hackDifficulty\":157.5,\"minDifficulty\":53,\"moneyAvailable\":115886646.4,\"moneyMax\":289716616,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":838,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"25.8.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":212.5,\"hackDifficulty\":212.5,\"minDifficulty\":71,\"moneyAvailable\":130973158.7,\"moneyMax\":327432896.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"46.5.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":228646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b3c4afed-20e6-4db9-930b-f4d24a0e46d9\",\"moduleSequenceNumber\":228655}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":228655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":228650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":101591660.60000001,\"moneyMax\":253979151.5,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":818,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"92.9.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ff405379-1274-4869-83b0-111a9c760114\",\"moduleSequenceNumber\":228658}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":228658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5abac2bf-6969-4c2e-ad61-f583b9f7800d\",\"moduleSequenceNumber\":234978}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":234978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1303e411-6246-42a0-9cd2-a45e1ec8d881\",\"moduleSequenceNumber\":228664}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":228664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177.5,\"hackDifficulty\":177.5,\"minDifficulty\":59,\"moneyAvailable\":70804658.4,\"moneyMax\":177011646.00000003,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":695,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"73.8.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3ef41f77-4c80-4111-83ab-b8d3a93a3135\",\"moduleSequenceNumber\":225433}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":225433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":225143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8c8a2466-7735-4d7b-bcc8-d6c770b8a4d6\",\"moduleSequenceNumber\":225320}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":225320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":107.5,\"hackDifficulty\":107.5,\"minDifficulty\":36,\"moneyAvailable\":63767917.5,\"moneyMax\":159419793.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":498,\"serverGrowth\":42}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"32.4.0.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c42df9ff-b023-4363-b343-c7e325a5f35a\",\"moduleSequenceNumber\":228657}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":228657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b56b62e0-4937-4ad6-91df-b38e7a3bc08b\",\"moduleSequenceNumber\":234977}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":234977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":228620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132.5,\"hackDifficulty\":132.5,\"minDifficulty\":44,\"moneyAvailable\":71808652.5,\"moneyMax\":179521631.25,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":501,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"84.0.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///590a6585-d163-4d92-97e5-9da28676af14\",\"moduleSequenceNumber\":228659}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":228659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d28289f2-5fc3-494a-b35f-393ed0b91e27\",\"moduleSequenceNumber\":228654}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":228654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///936f34a6-8037-4f1b-8cd4-3f9b199de3f6\",\"moduleSequenceNumber\":228666}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":228666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":20456969.200000003,\"moneyMax\":51142423.00000001,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":438,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"17.9.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///644a7a0b-5841-4c98-a1da-e5053856357a\",\"moduleSequenceNumber\":225314}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":225314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///73a802e2-ef91-4048-9d04-b196b693df4d\",\"moduleSequenceNumber\":229050}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":229050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":225199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":22952686,\"moneyMax\":57381715,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"11.5.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":98620366.30000001,\"moneyMax\":246550915.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":765,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"47.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5d197317-6d1f-48dc-9d4d-271fb3a0be04\",\"moduleSequenceNumber\":229051}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":229051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3ca10f89-7c80-42f0-9603-d136e101af3e\",\"moduleSequenceNumber\":225430}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":225430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///10887aec-f3c2-41d7-8c32-30e77d4d51a8\",\"moduleSequenceNumber\":225324}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":225324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":20003842.8,\"moneyMax\":50009607,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":460,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"69.7.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":49241946.6,\"moneyMax\":123104866.5,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":602,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"96.1.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5fc123f6-a1fb-41e8-be1b-73bb4b0e8588\",\"moduleSequenceNumber\":225308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":225308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e8e708c7-70fa-4b8b-ab25-a62da4b42f1f\",\"moduleSequenceNumber\":225428}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":225428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5acfea80-5461-43d1-9423-afdfb2fe5bde\",\"moduleSequenceNumber\":234979}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":234979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172.5,\"hackDifficulty\":172.5,\"minDifficulty\":58,\"moneyAvailable\":51712189.1,\"moneyMax\":129280472.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":412,\"serverGrowth\":47}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"89.6.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bde321a5-6398-431d-9b69-62d5f756142e\",\"moduleSequenceNumber\":228662}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":228662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///929fc812-880e-40a1-94fa-da314b11a351\",\"moduleSequenceNumber\":225434}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":225434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a4608bbf-76d3-4e6a-ba35-8a634c8b9919\",\"moduleSequenceNumber\":225322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":225322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":17903320.1,\"moneyMax\":44758300.25000001,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":322,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"23.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152.5,\"hackDifficulty\":152.5,\"minDifficulty\":51,\"moneyAvailable\":23781988.8,\"moneyMax\":59454972,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":364,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"13.9.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///63d7f9d8-05fc-4ed6-9f6c-fd7e210af040\",\"moduleSequenceNumber\":225305}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":225305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///51540644-c679-4edf-8e24-225aaddf9903\",\"moduleSequenceNumber\":225302}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":225302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///06e03a49-497b-4576-aeaa-4ff071854cac\",\"moduleSequenceNumber\":225321}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":225321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":416,\"serverGrowth\":61}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"98.4.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":155,\"hackDifficulty\":155,\"minDifficulty\":52,\"moneyAvailable\":7865357.5,\"moneyMax\":19663393.75,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":295,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"19.7.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":224971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a955d727-db86-4588-80af-4b21192454e2\",\"moduleSequenceNumber\":225304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":225304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":224975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":17500,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"2.5.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c5a31940-ff7f-4235-9c34-d703d37f9ea8\",\"moduleSequenceNumber\":225313}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":225313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d02e7df8-2271-4553-a635-95c8d6cd46b6\",\"moduleSequenceNumber\":229047}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":229047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f11ca2a-7017-4a8f-bde0-2675f31e93cc\",\"moduleSequenceNumber\":225056}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":225056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":200000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"83.5.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///07daee72-4e7b-4dae-811e-08954df60991\",\"moduleSequenceNumber\":225312}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":225312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0d709690-f5a3-4175-aefa-22c7247f4d2d\",\"moduleSequenceNumber\":232328}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":232328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ac8c749f-855f-4b21-90a4-1786e35dfa9e\",\"moduleSequenceNumber\":225055}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":225055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":230000,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"19.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///495f6fa1-6f08-4500-9be6-5bc9330b560e\",\"moduleSequenceNumber\":225311}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":225311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///06c62683-fb95-4285-8e12-92727506d342\",\"moduleSequenceNumber\":234984}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":234984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6a6bb3d5-2762-4796-a455-04fbdd33bf52\",\"moduleSequenceNumber\":225054}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":225054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":250000,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"99.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2a6f0bfa-3018-4a6e-8fe3-e347721db352\",\"moduleSequenceNumber\":232329}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":232329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0ff811b0-78d7-41ed-b169-50f4823d097e\",\"moduleSequenceNumber\":225437}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":225437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3724edd1-f5b8-4962-87e2-d6edf241448f\",\"moduleSequenceNumber\":225059}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":225059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"39.4.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7f8389b2-4f15-461a-808a-2f04cc697387\",\"moduleSequenceNumber\":225046}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":225046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0f43b388-407c-4a23-b946-55ea1aa2bc6f\",\"moduleSequenceNumber\":224978}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":224978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":224963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":275000,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"47.0.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///09fb2015-eb82-4001-83ce-710d6a28387f\",\"moduleSequenceNumber\":225746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":225746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1786e377-4ff5-49c4-8c5a-fa09f21e0762\",\"moduleSequenceNumber\":225431}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":225431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4fb02b6f-4e6f-4b02-882d-e7e94077c0d5\",\"moduleSequenceNumber\":225060}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":225060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5038d3e9-8402-46e8-8ada-d1820a3cc908\",\"moduleSequenceNumber\":225309}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":225309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///14f98f2b-c73b-4eb2-a012-62c8edd732bf\",\"moduleSequenceNumber\":225429}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":225429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///17cf9708-e5db-471b-8610-f9d7d7bb3920\",\"moduleSequenceNumber\":225318}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":225318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"39.6.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b62e3e77-a55b-4fd8-9992-7dfb141f82a5\",\"moduleSequenceNumber\":225310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":225310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d64a969b-e476-41b9-aed5-cab10a13d93e\",\"moduleSequenceNumber\":234983}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":234983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c082e24d-4d96-4515-8410-2bdae1b52e70\",\"moduleSequenceNumber\":225053}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":225053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":300000,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"32.2.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bf3f841f-190a-4130-b5dd-365914161d95\",\"moduleSequenceNumber\":225047}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":225047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///225c7df7-1832-45c3-9b87-560dd848a1f4\",\"moduleSequenceNumber\":234982}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":234982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c2c09c95-4982-4271-8733-1fbd50b90e44\",\"moduleSequenceNumber\":225052}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":225052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":780201.085401823,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"87.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///37aa0ed2-54e0-4fe4-9b03-238a46b9db00\",\"moduleSequenceNumber\":225315}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":225315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3ec6d796-0e94-45f6-87aa-56268029e01d\",\"moduleSequenceNumber\":228920}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":228920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c272af1c-5054-4da0-9754-5596edabd06b\",\"moduleSequenceNumber\":234980}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":234980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":3232815.3589671273,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"50.8.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///57889f93-34cb-4171-a968-448363281d30\",\"moduleSequenceNumber\":225316}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":225316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///726cfef8-b6c1-4a51-95af-56f1044aa635\",\"moduleSequenceNumber\":225541}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":225541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0bd7b1d8-85bb-4c51-b2f5-a835973e5629\",\"moduleSequenceNumber\":225057}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":225057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1145604.0797310942,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"31.3.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///027603f2-e5cf-4dfe-b868-d262fbdce0b6\",\"moduleSequenceNumber\":228663}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":228663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///bc319fdb-22bc-46ba-8791-ca05401d5e05\",\"moduleSequenceNumber\":225435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":225435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4128e127-4b1f-4dda-a275-32c7331249d3\",\"moduleSequenceNumber\":225323}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":225323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":6858394.300000001,\"moneyMax\":17145985.750000004,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":182,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"58.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87.5,\"hackDifficulty\":87.5,\"minDifficulty\":29,\"moneyAvailable\":5961705,\"moneyMax\":14904262.5,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":228,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"77.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///64742f0b-cf77-4310-870b-777cea178a23\",\"moduleSequenceNumber\":234985}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":234985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///76381d33-0e19-4130-9bdd-8f2bc52e4e2f\",\"moduleSequenceNumber\":225436}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":225436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///56099299-ed61-43cd-a9bd-856c990516d0\",\"moduleSequenceNumber\":225058}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":225058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"97.3.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ce9fd75d-7d76-4f42-bc27-b90d1074f530\",\"moduleSequenceNumber\":225306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":225306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3cf0067b-dac2-4986-9aa0-d656ebdc60cb\",\"moduleSequenceNumber\":228651}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":228651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ce01ade8-0181-4d8f-bd95-38ed13e2a6a5\",\"moduleSequenceNumber\":225317}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":225317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":501,\"serverGrowth\":27}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"13.8.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145,\"hackDifficulty\":145,\"minDifficulty\":48,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1097,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"67.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132.5,\"hackDifficulty\":132.5,\"minDifficulty\":44,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":722,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"51.3.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///43770454-fd96-4035-a023-0ac75037d3fd\",\"moduleSequenceNumber\":228793}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":228793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///925735b8-3e6f-474b-9c1d-f7eeace078b7\",\"moduleSequenceNumber\":228652}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":228652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b634ef86-c72f-4e13-84e9-0a0cbafca53b\",\"moduleSequenceNumber\":235112}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":235112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":517,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"36.5.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///faba6c9d-39fb-41ae-b064-150b15abcb53\",\"moduleSequenceNumber\":225307}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":225307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1bf14f9e-c537-407f-bd97-e5388b5c0f2a\",\"moduleSequenceNumber\":225303}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":225303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1d18abfd-05d0-4e65-8e92-6a26776eee35\",\"moduleSequenceNumber\":225325}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":225325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"78.4.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5a43ddbf-f5a0-4bf4-b245-6130f782132e\",\"moduleSequenceNumber\":225432}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":225432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9cf65b67-866c-4298-9969-b5a141cc2cb8\",\"moduleSequenceNumber\":225540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":225540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///74e4e66b-0a8c-4127-8a67-6deb0d8e9219\",\"moduleSequenceNumber\":225319}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":225319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":202,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"18.3.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a795c79c-df5a-4d95-853f-4cc7311df2e3\",\"moduleSequenceNumber\":228661}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":228661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///397d0a0e-90bb-4138-9333-a573c2bf425d\",\"moduleSequenceNumber\":229049}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":229049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":228638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"87.4.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":224965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///54650e95-a923-4918-9396-622f30ae270d\",\"moduleSequenceNumber\":224977}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":224977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":224969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"26.7.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"17.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"39.7.7.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34484.800000059164,\"totalHashesGenerated\":104677.8862922493}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"92.2.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34484.800000059164,\"totalHashesGenerated\":104635.8402487766}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"91.3.0.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34484.800000059164,\"totalHashesGenerated\":104593.48299068725}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"86.3.0.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34484.40000005917,\"totalHashesGenerated\":104552.06102712899}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"94.8.1.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34481.40000005921,\"totalHashesGenerated\":104510.29324141383}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"97.5.9.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34463.00000005948,\"totalHashesGenerated\":104466.0058257301}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"83.7.3.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"95.8.8.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34425.000000060034,\"totalHashesGenerated\":104412.65784759205}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"35.1.0.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34358.400000061,\"totalHashesGenerated\":104339.93110495617}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"67.6.5.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":34146.000000064094,\"totalHashesGenerated\":104111.3937060968}},\"hacknet-node-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-9\",\"httpPortOpen\":false,\"ip\":\"12.7.3.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":18,\"hashCapacity\":64,\"hashRate\":3.1617570306592886,\"level\":71,\"onlineTimeSeconds\":33648.80000007133,\"totalHashesGenerated\":103428.2110799487}},\"hacknet-node-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":17,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-10\",\"httpPortOpen\":false,\"ip\":\"79.2.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":17,\"hashCapacity\":64,\"hashRate\":2.9755331850634787,\"level\":70,\"onlineTimeSeconds\":32619.600000083607,\"totalHashesGenerated\":96002.69690863244}},\"hacknet-node-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":17,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-11\",\"httpPortOpen\":false,\"ip\":\"40.8.0.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":17,\"hashCapacity\":64,\"hashRate\":2.9755331850634787,\"level\":70,\"onlineTimeSeconds\":30240.800000074953,\"totalHashesGenerated\":89784.89955892866}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":148.7732,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":109.1252,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":230.5825,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":5982910.327215066}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":62.6517,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":34.5024,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":65.9925,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":26.2925,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":103.5309,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":190.5668,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":51311.5748590126}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":44.2838,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":156.9564,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"fav\":\"run favor.js\",\"c\":\"run clock.js\",\"hn\":\"run hacknet.js\",\"hnk\":\"kill hacknet.js\",\"corp\":\"run corp.js\",\"sh\":\"run smart_hack.js\",\"leech\":\"run leech.js\",\"kleech\":\"kill leech.js\",\"test\":\"run test.js\",\"mug\":\"run crime.js mug; tail crime.js\",\"hom\":\"run crime.js homicide; tail crime.js\",\"crime\":\"run crime.js; tail crime.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":3,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":2338.6165661256605,\"territory\":0},\"Tetrads\":{\"power\":2207.8567763529995,\"territory\":0},\"The Syndicate\":{\"power\":2152.9238111845525,\"territory\":0},\"The Dark Army\":{\"power\":2185.832296020564,\"territory\":0},\"Speakers for the Dead\":{\"power\":3682.3228306228584,\"territory\":0.8571428571428583},\"NiteSec\":{\"power\":1,\"territory\":0.14285714285714285},\"The Black Hand\":{\"power\":42.338755625556246,\"territory\":0}}","LastExportBonus":"1644215500155","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644249991863"}}