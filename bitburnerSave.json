{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":46,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":58,\"hacking_chance_mult\":1.3824,\"hacking_speed_mult\":1.3824,\"hacking_money_mult\":1.3824,\"hacking_grow_mult\":1.3824,\"hacking_exp\":960.0239999999998,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":2707.9500000000066,\"hacking_mult\":1.3824,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.28,\"hacking_exp_mult\":1.3824,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":1000,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.28,\"crime_success_mult\":1.28,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.28,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1641865239093,\"totalPlaytime\":2158079400,\"playtimeSinceLastAug\":1939000,\"playtimeSinceLastBitnode\":1939000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:file:///fcb79e0e-312f-4bf8-a545-b8a3c01e8b95\"}],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":14331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction printServer(serverArg) {\\r\\n    let server = serverArg;\\r\\n    if (server instanceof String) server = ns.getServer(server);\\r\\n\\r\\n    let labelBuffer = 23;\\r\\n\\r\\n    ns.tprintf(server.hostname + \\\":\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Root Access\\\", server.hasAdminRights ? \\\"TRUE\\\" : \\\"FALSE\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Money\\\", ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\r\\n        \\\"  %23s: %s/%s\\\",\\r\\n        \\\"Available Money\\\",\\r\\n        ns.nFormat(server.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(server.moneyMax * 0.75, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %23s: %.2f\\\", \\\"Hack Difficulty\\\", server.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %.2f%%\\\", \\\"Hack Chance\\\", ns.hackAnalyzeChance(server.hostname) * 100);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (MIN)\\\", server.minDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (BASE)\\\", server.baseDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Hacking Requirement\\\", server.requiredHackingSkill);\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports\\\", server.openPortCount)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports Required\\\", server.numOpenPortsRequired)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Ram\\\", server.maxRam)\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nasync function hackHost(hostName, targetName) {\\r\\n    const hostServer = ns.getServer(hostName);\\r\\n    const targetServer = ns.getServer(targetName);\\r\\n\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.ns\\\");\\r\\n    let hackThreads = Math.floor(hostServer.maxRam / hackMeRam);\\r\\n\\r\\n    if (hackThreads === 0) {\\r\\n        ns.tprint(hostName + \\\" unable to execute hack_me.ns (\\\" + hostServer.maxRam + \\\"/\\\" + hackMeRam + \\\")\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    ns.tprint(\\r\\n        \\\"Running hack_me.ns on \\\" +\\r\\n            hostName +\\r\\n            \\\" on \\\" +\\r\\n            hackThreads +\\r\\n            \\\" threads, targeting \\\" +\\r\\n            targetName +\\r\\n            \\\" [\\\" +\\r\\n            ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\") +\\r\\n            \\\"]\\\"\\r\\n    );\\r\\n    ns.killall(hostName);\\r\\n    await ns.scp(\\\"hack_me.ns\\\", \\\"home\\\", hostName);\\r\\n    ns.exec(\\\"hack_me.ns\\\", hostName, hackThreads, targetName);\\r\\n}\\r\\n\\r\\nfunction listServers(hosts) {\\r\\n    let hostNames = Object.keys(hosts);\\r\\n    let hackableHosts = hostNames.sort(serverValueSort);\\r\\n\\r\\n    for (const hostName of hackableHosts) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        const rootStr = server.hasAdminRights ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= server.requiredHackingSkill ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        let trailStr = \\\"\\\";\\r\\n        // for (const i of hosts[hostName]) {\\r\\n        //     if (i === hosts[hostName][hosts[hostName].length - 1]) trailStr += `${i}`;\\r\\n        //     else trailStr += `${i}.`;\\r\\n        // }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6d %.2f %s\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"),\\r\\n            server.requiredHackingSkill,\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            server.maxRam,\\r\\n            Math.ceil(ns.getWeakenTime(server.hostname) / 1000) / 60,\\r\\n            trailStr\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction mapHosts(hosts, parents, current) {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hosts = {};\\r\\n    mapHosts(hosts, [], \\\"home\\\");\\r\\n\\r\\n    listServers(hosts);\\r\\n\\r\\n    //await distributeHack(hostNames)\\r\\n\\r\\n    //let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort)\\r\\n    //printServer(ns.getServer(hackableHosts[0]))\\r\\n}\",\"filename\":\"crawl.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"crawl.ns\",\"url\":\"blob:https://danielyxie.github.io/a48265f3-67b0-4b80-9583-d83a9bd5c722\"}],\"ramUsage\":7.4,\"server\":\"home\",\"_hash\":\"aeb07426fdccc11bf3935a1356e3724c468148151220f3865457fb98c163c672\",\"moduleSequenceNumber\":14383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nfunction canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction matchWeakenTarget(a, target) {\\r\\n    let epsilon = 0.1;\\r\\n    let targetMin = target - epsilon;\\r\\n    let targetMax = target + epsilon;\\r\\n\\r\\n    return a > targetMin && a < targetMax;\\r\\n}\\r\\n\\r\\nfunction assessHack(hostNames) {\\r\\n    let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort);\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.ns\\\");\\r\\n    let growRam = ns.getScriptRam(\\\"grow.ns\\\");\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\");\\r\\n\\r\\n    let fundThres = 0.9;\\r\\n    let targetServer = ns.getServer(hackableHosts[0]);\\r\\n    let targetFunds = targetServer.moneyMax * fundThres;\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetFunds / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s [%2.0f%% | %s]\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetFunds, \\\"($0.000a)\\\"),\\r\\n        fundThres * 100,\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    const hostSet = new Set([\\\"home\\\"]);\\r\\n    let hostQueue = [\\\"home\\\"];\\r\\n    let currentHost;\\r\\n    while ((currentHost = hostQueue.shift())) {\\r\\n        let newHosts = ns.scan(currentHost);\\r\\n\\r\\n        for (const newHost of newHosts) {\\r\\n            if (!hostSet.has(newHost)) {\\r\\n                hostQueue.push(newHost);\\r\\n                hostSet.add(newHost);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let hostNames = Array.from(hostSet);\\r\\n    //assessHack(hostNames)\\r\\n\\r\\n    let serverName = ns.args[0];\\r\\n    let targetServer = ns.getServer(serverName);\\r\\n    assessHack([targetServer.hostname]);\\r\\n}\",\"filename\":\"assess.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.ns\",\"url\":\"blob:file:///1464e475-98eb-464f-81e4-ad72fb85a176\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"ebc8033cc03363c90b2ce2b4a5e7b6dce2d46b3e015ea2904388323b66da6428\",\"moduleSequenceNumber\":14333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"**TEST** run buy_server.ns %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_server.ns\",\"url\":\"blob:https://danielyxie.github.io/d9dc58b2-ba79-4b3f-8aef-a8f185d3e31a\"}],\"ramUsage\":11.25,\"server\":\"home\",\"_hash\":\"f7fd6eec0306c482c84333190b7fccaf3f093e5fe8821691b1cc222c4c0f1027\",\"moduleSequenceNumber\":14334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:https://danielyxie.github.io/72d30628-ec59-479e-8cb0-6f25c417caf3\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":14335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:https://danielyxie.github.io/2c6f09b2-4423-41e1-9a0e-50d29d593a61\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":14385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.ns\",\"url\":\"blob:https://danielyxie.github.io/fe5d781f-651e-49f7-8f0c-658d98cbbd71\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":14337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"exec_max.ns\",\"url\":\"blob:https://danielyxie.github.io/1e25d43b-7fc8-4f23-966c-e432f451f075\"}],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"9a3e2c202e7a092ee630229bd14fd31b96299addcb599a56a940aee38b103c03\",\"moduleSequenceNumber\":15043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".ns\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    filenames.map(function (name) {\\r\\n        if (name.length > maxFileLength) maxFileLength = name.length;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s [RAM: %5.2fGB] %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"ll.ns\",\"url\":\"blob:https://danielyxie.github.io/a4ab58ca-85e1-4b16-818e-3a7b68be735c\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"30724930085f141d5af57ff99d5494faa6e0577003e48e0a11bb92fcde7ee47c\",\"moduleSequenceNumber\":14357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\",\"moduleSequenceNumber\":14340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\",\"moduleSequenceNumber\":14341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { allHosts, setns, softenServer } from \\\"./util.ns\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns)\\r\\n\\r\\n    for (const hostName of allHosts()) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n}\",\"filename\":\"soften.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:file:///41c34f82-45ad-48fb-9c96-e909af22dbb7\"},{\"filename\":\"soften.ns\",\"url\":\"blob:file:///762c630d-0c79-41f3-a278-acb773512ca7\"}],\"ramUsage\":2.35,\"server\":\"home\",\"_hash\":\"9514de32f16404e018ba5d5e2b6a70415b306e8095cf743c0256d78590efe4f6\",\"moduleSequenceNumber\":14342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer, serverIsHackable, serverMaxMoneySortDesc, setns, softenServer } from \\\"./util.ns\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hostnames = allHosts();\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    let hackableHosts = hostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0)\\r\\n        .sort(serverMaxMoneySortDesc);\\r\\n    let rootHostsNoPurchased = hostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => (hostname.indexOf(\\\"pserv\\\") === -1 && hostname !== \\\"home\\\"));\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.ns\\\", \\\"home\\\");\\r\\n\\r\\n    let roundRobin = 0;\\r\\n    for (const hostname of rootHostsNoPurchased) {\\r\\n        let execMaxArgs = [\\\"hack_me.ns\\\", hostname, hackableHosts[roundRobin % hackableHosts.length]];\\r\\n        ns.tprintf(\\\"%s %s %s\\\", \\\"exec_max.ns\\\", \\\"home\\\", execMaxArgs.toString());\\r\\n\\r\\n        while (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") < ns.getScriptRam(\\\"exec_max.ns\\\"))\\r\\n            await ns.sleep(500);\\r\\n\\r\\n        ns.exec(\\\"exec_max.ns\\\", \\\"home\\\", 1, ...execMaxArgs);\\r\\n        roundRobin += 1;\\r\\n    }\\r\\n\\r\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n    let ramSlice = homeRam / hackableHosts.length;\\r\\n    let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam);\\r\\n\\r\\n    if (hackMeHomeThreads <= 0) return;\\r\\n    for (const hostName of hackableHosts) {\\r\\n        ns.exec(\\\"hack_me.ns\\\", \\\"home\\\", 1, hostName, ramSlice);\\r\\n    }\\r\\n}\",\"filename\":\"starter.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:https://danielyxie.github.io/df296cb6-3c7d-4281-b9a7-bd2f8ce4ddd9\"},{\"filename\":\"starter.ns\",\"url\":\"blob:https://danielyxie.github.io/64fff92b-ec29-4158-afdd-504d7af3ecaf\"}],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"899cc81efd283d2ca1c16f216221730fd8829d41f1067e728a58283ecf98de7a\",\"moduleSequenceNumber\":15039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var debug = false;\\r\\n\\r\\nfunction fltEq(a, b) {\\r\\n    let epsilon = 0.05;\\r\\n    return a > b - epsilon && a < b + epsilon;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction doWeaken(ns, _hostname, _targetname, ramAllowance) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let weakenThreads = Math.min(\\r\\n        Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread),\\r\\n        Math.floor(ramAllowance / weakenRam)\\r\\n    );\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        let estSecLevelAfterWeaken = Math.max(\\r\\n            target.minDifficulty,\\r\\n            target.hackDifficulty - weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n        ns.tprintf(\\\"Weaken Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s\\\",\\r\\n            target.hostname,\\r\\n            target.hackDifficulty,\\r\\n            estSecLevelAfterWeaken,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            host.hostname,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.ns\\\", host.hostname, weakenThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.ns\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n\\r\\n    let currentMoney = Math.max(1.0, target.moneyAvailable);\\r\\n    let targetGrowMult = highMoney / currentMoney;\\r\\n    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let growThreads = fullGrowThreads + 1,\\r\\n        weakenThreads,\\r\\n        growRamCycle,\\r\\n        growSecIncrease;\\r\\n\\r\\n    do {\\r\\n        growThreads -= 1;\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        growRamCycle = growThreads * growRam + weakenThreads * weakenRam;\\r\\n    } while (growRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Grow Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(currentMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)\\\",\\r\\n            ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(target.moneyMax, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(highMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult,\\r\\n            (growThreads / fullGrowThreads) * 100,\\r\\n            growThreads,\\r\\n            fullGrowThreads\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            growRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.ns\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"grow.ns\\\", host.hostname, growThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction doHackAndWeaken(ns, _hostname, _targetname) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.ns\\\"); // 1.70GB\\r\\n\\r\\n    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let hackThreads = fullHackThreads + 1,\\r\\n        weakenThreads,\\r\\n        hackRamCycle;\\r\\n\\r\\n    do {\\r\\n        hackThreads -= 1;\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n    } while (hackRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Hack Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.ns\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"hack.ns\\\", host.hostname, hackThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance, tspacer) {\\r\\n    /*//////////// ALGO ////////////\\r\\n        if hackRamCycle is greater than ramAllowance\\r\\n        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio\\r\\n        while hackRamCycle > ramAllowance\\r\\n        recompute everything up to hackRamCycle\\r\\n        if hackRamCycle > ramAllowance\\r\\n            reduce targetHackAmount by .1% of original targetHackAmount\\r\\n    //////////////////////////////*/\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.ns\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.ns\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    if (debug) {\\r\\n        ns.tprintf(\\\"Hack Process: \\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(target.moneyAvailable - hackAmount, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramAllowance) {\\r\\n        let failRatio = ramAllowance / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount);\\r\\n        if (debug)\\r\\n            ns.tprintf(\\\"  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)\\\", failRatio * 100, failRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    let cycles = 0;\\r\\n    while (hackRamCycle > ramAllowance) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n        cycles++;\\r\\n    }\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        if (cycles > 0)\\r\\n            ns.tprintf(\\r\\n                \\\"  targetHackAmount ratio: %.0f%%; Cycles: %d\\\",\\r\\n                (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100,\\r\\n                cycles\\r\\n            );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            hackWeakenThreads,\\r\\n            growWeakenThreads,\\r\\n            (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f\\\",\\r\\n            target.hackDifficulty,\\r\\n            target.hackDifficulty + hackSecIncrease + growSecIncrease,\\r\\n            ns.hackAnalyzeSecurity(1),\\r\\n            weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n    }\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tgrow = ns.getGrowTime(target.hostname);\\r\\n    let thack = ns.getHackTime(target.hostname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.ns\\\", host.hostname, hackWeakenThreads, target.hostname, 0); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.ns\\\", host.hostname, growWeakenThreads, target.hostname, tGrowWeakenOffset); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.ns\\\", host.hostname, growThreads, target.hostname, tGrowOffset); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.ns\\\", host.hostname, hackThreads, target.hostname, tHackOffset); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction calcHGWThreads(ns, _hostname, _targetname, highMoney, lowMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n    return [hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction calcHGWThreadsSmart(ns, _hostname, _targetname, ramAllowance, tspacer) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.ns\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.ns\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyMax * 0.9;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let targetCycles = Math.floor(tweakenFullCycle / tCycleSpacer);\\r\\n    let ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n\\r\\n    // dont force a cycle into less than 16GB\\r\\n    while (ramFit < 16) {\\r\\n        targetCycles--;\\r\\n        ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramFit) {\\r\\n        let crunchRatio = ramFit / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (crunchRatio * 1.1), targetHackAmount);\\r\\n        if (debug) ns.tprintf(\\\"  ramFit / hackRamCycle = %.0f%% (%.0f%%)\\\", crunchRatio * 100, crunchRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    while (hackRamCycle > ramFit) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n        let dobreak = false;\\r\\n        if (targetGrowMult < 1) {\\r\\n            targetGrowMult = 1.0000001;\\r\\n            dobreak = true;\\r\\n        }\\r\\n\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n        if (dobreak) break;\\r\\n    }\\r\\n\\r\\n    //if (debug) {\\r\\n    ns.tprintf(\\r\\n        \\\"  Calling Hack (%.4f%% of Max) with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s over %d Cycles\\\",\\r\\n        (hackAmount / target.moneyMax) * 100,\\r\\n        hackThreads,\\r\\n        hackThreads * hackRam,\\r\\n        growThreads,\\r\\n        growThreads * growRam,\\r\\n        hackWeakenThreads,\\r\\n        growWeakenThreads,\\r\\n        (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n        hackRamCycle,\\r\\n        ns.tFormat(tweaken),\\r\\n        targetCycles\\r\\n    );\\r\\n    //}\\r\\n\\r\\n    return [targetCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction launchHGW(\\r\\n    ns,\\r\\n    hostname,\\r\\n    targetname,\\r\\n    tspacer,\\r\\n    tag,\\r\\n    hackWeakenThreads,\\r\\n    growWeakenThreads,\\r\\n    hackThreads,\\r\\n    growThreads\\r\\n) {\\r\\n    let tweaken = ns.getWeakenTime(targetname);\\r\\n    let tgrow = ns.getGrowTime(targetname);\\r\\n    let thack = ns.getHackTime(targetname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.ns\\\", hostname, hackWeakenThreads, targetname, 0, tag); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.ns\\\", hostname, growWeakenThreads, targetname, tGrowWeakenOffset, tag); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.ns\\\", hostname, growThreads, targetname, tGrowOffset, tag); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.ns\\\", hostname, hackThreads, targetname, tHackOffset, tag); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let ramOverride = ns.args[1];\\r\\n    let _hostname = ns.getHostname();\\r\\n    let _targetname = ns.args[0];\\r\\n    if (!_targetname) _targetname = \\\"lexo-corp\\\";\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let lowThresholdFactor = 0.94;\\r\\n    let highThresholdFactor = 1;\\r\\n    let lowMoney = target.moneyMax * lowThresholdFactor;\\r\\n    let highMoney = target.moneyMax * highThresholdFactor;\\r\\n\\r\\n    if (!ns.fileExists(\\\"grow.ns\\\", host.hostname)) await ns.scp(\\\"grow.ns\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"weaken.ns\\\", host.hostname)) await ns.scp(\\\"weaken.ns\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"hack.ns\\\", host.hostname)) await ns.scp(\\\"hack.ns\\\", \\\"home\\\", host.hostname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.ns\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.ns\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.ns\\\"); // 1.70GB\\r\\n\\r\\n    let ramAllowance = host.maxRam - host.ramUsed;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 48;\\r\\n\\r\\n    if (ramOverride) {\\r\\n        if (ramOverride < 1) {\\r\\n            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0;\\r\\n            if (debug)\\r\\n                ns.tprintf(\\r\\n                    \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n                    ramFraction,\\r\\n                    ramOverride,\\r\\n                    ramAllowance\\r\\n                );\\r\\n            ramAllowance = ramFraction;\\r\\n        } else {\\r\\n            if (debug) ns.tprintf(\\\"Overriding availble host RAM max to %.2f\\\", ramOverride);\\r\\n            ramAllowance = Math.min(ramOverride, ramAllowance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", ramAllowance);\\r\\n\\r\\n    // Weaken to minimum security\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.hackDifficulty > target.minDifficulty) {\\r\\n        doWeaken(ns, host.hostname, target.hostname, ramAllowance);\\r\\n        while (ns.isRunning(\\\"weaken.ns\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldHackDifficulty = target.hackDifficulty;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\\"  Lowered Security from %.2f to %.2f\\\", oldHackDifficulty, target.hackDifficulty);\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Grow to high threshold money\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.moneyAvailable < highMoney) {\\r\\n        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney);\\r\\n        while (ns.isRunning(\\\"weaken.ns\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldMoney = target.moneyAvailable;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\r\\n                \\\"  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)\\\",\\r\\n                target.hostname,\\r\\n                ns.nFormat(oldMoney, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n                (target.moneyAvailable / target.moneyMax) * 100,\\r\\n                target.hackDifficulty,\\r\\n                target.minDifficulty\\r\\n            );\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Hack the world\\r\\n    let tspacer = 200;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads;\\r\\n    [hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads] = calcHGWThreadsSmart(\\r\\n        ns,\\r\\n        host.hostname,\\r\\n        target.hostname,\\r\\n        ramAllowance,\\r\\n        tspacer\\r\\n    );\\r\\n    while (true) {\\r\\n        for (let i = 0; i < hgwCycles; i++) {\\r\\n            if (i !== 0) await ns.sleep(tCycleSpacer);\\r\\n            launchHGW(\\r\\n                ns,\\r\\n                host.hostname,\\r\\n                target.hostname,\\r\\n                tspacer,\\r\\n                i,\\r\\n                hackWeakenThreads,\\r\\n                growWeakenThreads,\\r\\n                hackThreads,\\r\\n                growThreads\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let sleepTimer = tweakenFullCycle - hgwCycles * tCycleSpacer + tCycleSpacer;\\r\\n        if (sleepTimer > 0) await ns.sleep(sleepTimer);\\r\\n\\r\\n        // while (ns.isRunning(\\\"weaken.ns\\\", host.hostname, target.hostname, 400, \\\"9\\\")) {\\r\\n        //     await ns.sleep(50)\\r\\n        //     if (debug) {\\r\\n        //         let oldMoney = target.moneyAvailable\\r\\n        //         let oldSec = target.hackDifficulty\\r\\n        //         target = ns.getServer(target.hostname)\\r\\n\\r\\n        //         if (oldMoney != target.moneyAvailable)\\r\\n        //             ns.tprintf(\\\"  Hack: %s available money changed from %s to %s (%.2f%% of Max)\\\",\\r\\n        //                 target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)\\r\\n\\r\\n        //         if (oldSec != target.hackDifficulty)\\r\\n        //             ns.tprintf(\\\"  Hack: %s security changed from %.2f to %.2f (min: %.2f)\\\",\\r\\n        //                 target.hostname, oldSec, target.hackDifficulty, target.minDifficulty)\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"dispatcher.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"dispatcher.ns\",\"url\":\"blob:file:///8d1be609-d2a6-41a3-a537-f7cb08ab8dac\"}],\"ramUsage\":12,\"server\":\"home\",\"_hash\":\"8017cc52fdd561def1e08820678cd04736c9b23c7d43dfc53670eaa10b58512f\",\"moduleSequenceNumber\":14344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nimport { setns, mapHosts, doProgramBuys } from \\\"./util.ns\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    if (stats.agility_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_exp_mult\\\", stats.agility_exp_mult);\\r\\n    if (stats.agility_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_mult\\\", stats.agility_mult);\\r\\n    if (stats.bladeburner_analysis_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_analysis_mult\\\", stats.bladeburner_analysis_mult);\\r\\n    if (stats.bladeburner_max_stamina_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_max_stamina_mult\\\", stats.bladeburner_max_stamina_mult);\\r\\n    if (stats.bladeburner_stamina_gain_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_stamina_gain_mult\\\", stats.bladeburner_stamina_gain_mult);\\r\\n    if (stats.bladeburner_success_chance_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_success_chance_mult\\\", stats.bladeburner_success_chance_mult);\\r\\n    if (stats.charisma_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_exp_mult\\\", stats.charisma_exp_mult);\\r\\n    if (stats.charisma_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_mult\\\", stats.charisma_mult);\\r\\n    if (stats.company_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"company_rep_mult\\\", stats.company_rep_mult);\\r\\n    if (stats.crime_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_money_mult\\\", stats.crime_money_mult);\\r\\n    if (stats.crime_success_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_success_mult\\\", stats.crime_success_mult);\\r\\n    if (stats.defense_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_exp_mult\\\", stats.defense_exp_mult);\\r\\n    if (stats.defense_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_mult\\\", stats.defense_mult);\\r\\n    if (stats.dexterity_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_exp_mult\\\", stats.dexterity_exp_mult);\\r\\n    if (stats.dexterity_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_mult\\\", stats.dexterity_mult);\\r\\n    if (stats.faction_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"faction_rep_mult\\\", stats.faction_rep_mult);\\r\\n    if (stats.hacking_chance_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_chance_mult\\\", stats.hacking_chance_mult);\\r\\n    if (stats.hacking_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_exp_mult\\\", stats.hacking_exp_mult);\\r\\n    if (stats.hacking_grow_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_grow_mult\\\", stats.hacking_grow_mult);\\r\\n    if (stats.hacking_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_money_mult\\\", stats.hacking_money_mult);\\r\\n    if (stats.hacking_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_mult\\\", stats.hacking_mult);\\r\\n    if (stats.hacking_speed_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_speed_mult\\\", stats.hacking_speed_mult);\\r\\n    if (stats.hacknet_node_core_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_core_cost_mult\\\", stats.hacknet_node_core_cost_mult);\\r\\n    if (stats.hacknet_node_level_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_level_cost_mult\\\", stats.hacknet_node_level_cost_mult);\\r\\n    if (stats.hacknet_node_money_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_money_mult\\\", stats.hacknet_node_money_mult);\\r\\n    if (stats.hacknet_node_purchase_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_purchase_cost_mult\\\", stats.hacknet_node_purchase_cost_mult);\\r\\n    if (stats.hacknet_node_ram_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_ram_cost_mult\\\", stats.hacknet_node_ram_cost_mult);\\r\\n    if (stats.strength_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_exp_mult\\\", stats.strength_exp_mult);\\r\\n    if (stats.strength_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_mult\\\", stats.strength_mult);\\r\\n    if (stats.work_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"work_money_mult\\\", stats.work_money_mult);\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = ns.getFactionRep(faction) >=  this.rep\\r\\n        let installedStr = this.installed ? \\\"INSTALLED\\\" : this.owned ? \\\"OWNED\\\" : this.purchaseable? \\\"PURCHASEABLE\\\" : \\\"\\\";\\r\\n        this.str = `${this.faction}: ${this.name} - ${ns.nFormat(this.price, \\\"$0.000a\\\")} [${ns.nFormat(\\r\\n            this.rep,\\r\\n            \\\"0.000a\\\"\\r\\n        )}] ${installedStr}`;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        if (this.stats.company_rep_mult) return true;\\r\\n        if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" || this.name === \\\"CashRoot Starter Kit\\\" || this.name === \\\"PCMatrix\\\")\\r\\n            return true;\\r\\n    \\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n    let incomePerSec = player.money / (player.playtimeSinceLastAug / 1000);\\r\\n\\r\\n    ns.tprintf(`Income: ${ns.nFormat(incomePerSec, \\\"$0.000a\\\")}/s`);\\r\\n\\r\\n    let allFactions = [\\r\\n        // \\\"Illuminati\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        // \\\"The Covenant\\\",\\r\\n        \\\"ECorp\\\",\\r\\n        // \\\"MegaCorp\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        // \\\"Blade Industries\\\",\\r\\n        // \\\"NWO\\\",\\r\\n        // \\\"Clarke Incorporated\\\",\\r\\n        // \\\"OmniTek Incorporated\\\",\\r\\n        // \\\"Four Sigma\\\",\\r\\n        // \\\"KuaiGong International\\\",\\r\\n        // \\\"Fulcrum Secret Technologies\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Sector-12\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        // \\\"Speakers for the Dead\\\",\\r\\n        // \\\"The Dark Army\\\",\\r\\n        // \\\"The Syndicate\\\",\\r\\n        // \\\"Silhouette\\\",\\r\\n        // \\\"Tetrads\\\",\\r\\n        // \\\"Slum Snakes\\\",\\r\\n        \\\"Netburners\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"CyberSec\\\",\\r\\n        // \\\"Bladeburners\\\",\\r\\n        // \\\"Church of the Machine God\\\",\\r\\n    ];\\r\\n\\r\\n    let sortedFactions = player.factions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a))\\r\\n\\r\\n    let allPurchaseableAugs = []\\r\\n    //for (let faction of sortedFactions) {\\r\\n    for (let faction of allFactions) {\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug)\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, ns.getFactionRep(faction));\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price)\\r\\n\\r\\n    for (let aug of allPurchaseableAugs) {\\r\\n        //ns.purchaseAugmentation(aug.faction, aug.name)\\r\\n        ns.tprintf(\\\"%s\\\", aug);\\r\\n    }\\r\\n}\",\"filename\":\"mcp.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:https://danielyxie.github.io/df296cb6-3c7d-4281-b9a7-bd2f8ce4ddd9\"},{\"filename\":\"mcp.ns\",\"url\":\"blob:https://danielyxie.github.io/3e7c4b0f-444f-4897-b4fa-aa502ce59c70\"}],\"ramUsage\":38.45,\"server\":\"home\",\"_hash\":\"1f1215797195bf865363d1731778f834b9cbf77e74b1c92c4bf9e47fca7166d7\",\"moduleSequenceNumber\":14345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns;\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts() {\\r\\n    return Object.keys(mapHosts());\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortDesc(a, b) {\\r\\n    return ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a)\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortAsc(a, b) {\\r\\n    return ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b)\\r\\n}\\r\\n\\r\\nexport function doProgramBuys() {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\",\"filename\":\"util.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"818b089434c69cdc2ffbf355864c4b74a127eb3c286474979e23fa00a2f2a3fb\",\"moduleSequenceNumber\":14346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    ns.tprintf(\\\"HELLO PUSHER #3\\\");\\r\\n}\",\"filename\":\"pusher.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"pusher.ns\",\"url\":\"blob:file:///3b9a2be6-bc7e-4d8a-9c96-ec75e70c8156\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"1cf7271a574913b375ae86f15f8c0f6d35f1bca22e0a039b2bddb19a6ffe39fc\",\"moduleSequenceNumber\":14347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let N = 4;\\r\\n    let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n    dp[0] = 1;\\r\\n\\r\\n    for (let row = 1; row < N + 1; row++) {\\r\\n        for (let col = 1; col < N + 1; col++) {\\r\\n\\t\\t\\tns.tprintf(\\\"[%s]\\\", dp)\\r\\n\\t\\t\\tns.tprintf(\\\"  => [%d:%d] dp[col]: %d\\\", dp[col])\\r\\n            if (col >= row) {\\r\\n                dp[col] = dp[col] + dp[col - row];\\r\\n\\t\\t\\t}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.tprintf(\\\"Ways: %d => %d\\\", N, dp[N]);\\r\\n}\",\"filename\":\"test.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.ns\",\"url\":\"blob:https://danielyxie.github.io/c80478f9-4e5f-41bb-acb8-3be060eac81f\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"3776265628c606f266702df138c152e74350be17b2e4fae7bdd171b35dcd613c\",\"moduleSequenceNumber\":14348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostName) {\\r\\n    let server = ns.getServer(hostName);\\r\\n\\r\\n    if (server.hasAdminRights) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!server.sshPortOpen && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.ftpPortOpen && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.httpPortOpen && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.smtpPortOpen && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.sqlPortOpen && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostName);\\r\\n    }\\r\\n\\r\\n    server = ns.getServer(hostName);\\r\\n    if (server.openPortCount >= server.numOpenPortsRequired) {\\r\\n        ns.nuke(hostName);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\",\"filename\":\"gsutil.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"5a818563b2284a541ce60c7ad9378442c3f640e406a6098346d5f6fce39b89b1\",\"moduleSequenceNumber\":14349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.ns\\\";\\r\\nimport { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction calcHackRate(ns, hostname, targetname, ramAllowance, simMinutes = 2) {\\r\\n    let env = new HackEnv(ns, targetname, hostname, ramAllowance);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    return env.simIncome / (env.simTime / 1000);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts()\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, calcHackRate(ns, host.hostname, targetname, ramAllowance, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.ns\\\";\\r\\n    let attackLib = \\\"hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys();\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            //ns.tprintf(\\\"Host %s does not have enough ram (%d) to execute a hack script\\\", value[0], ns.getServerMaxRam(value[0]))\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, killing processes on any that are attacking something not in targets and\\r\\n        // removing targets from the target array that are already being attacked\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let dokill = false;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    let attackTargetnameIdx = targetnames.indexOf(psInfo.args[0]);\\r\\n                    if (attackTargetnameIdx === -1) {\\r\\n                        ns.tprintf(\\\"Killing %s running on %s targeting %s\\\", attackScript, hostname, psInfo.args[0]);\\r\\n                        dokill = true;\\r\\n                    } else {\\r\\n                        targetnames.splice(attackTargetnameIdx, 1);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If we're killing on home, make sure to only kill attack scripts so we dont kill ourselves\\r\\n            if (dokill) {\\r\\n                if (hostname !== \\\"home\\\") {\\r\\n                    ns.killall(hostname);\\r\\n                } else {\\r\\n                    for (let psInfo of ps) {\\r\\n                        if (\\r\\n                            psInfo.filename === attackScript ||\\r\\n                            psInfo.filename === \\\"weaken.ns\\\" ||\\r\\n                            psInfo.filename === \\\"grow.ns\\\" ||\\r\\n                            psInfo.filename === \\\"hack.ns\\\"\\r\\n                        ) {\\r\\n                            ns.kill(psInfo.filename, hostname, psInfo.args);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // In case all the targets are accounted for, continue to the next bucket\\r\\n        if (targetnames.length === 0) continue;\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let hostfree = true;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    hostfree = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (hostfree) {\\r\\n                let targetname = targetnames.shift();\\r\\n                ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n\\r\\n                await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n                await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n                if (hostname === \\\"home\\\") {\\r\\n                    let allowedRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n                    if (allowedRam > 32) ns.exec(attackScript, hostname, 1, targetname, allowedRam);\\r\\n                    else\\r\\n                        ns.tprintf(\\r\\n                            \\\"WARNING: Not enough max ram on home to safely run script (%d)\\\",\\r\\n                            ns.getServerMaxRam(\\\"home\\\")\\r\\n                        );\\r\\n                } else ns.exec(attackScript, hostname, 1, targetname);\\r\\n            }\\r\\n\\r\\n            if (targetnames.length === 0) break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.ns to the host server, exec dispatcher.ns with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_env.js\",\"url\":\"blob:https://danielyxie.github.io/bf0529a4-00ec-40ad-ad27-1aa69391be6c\"},{\"filename\":\"util.ns\",\"url\":\"blob:https://danielyxie.github.io/df296cb6-3c7d-4281-b9a7-bd2f8ce4ddd9\"},{\"filename\":\"eff.ns\",\"url\":\"blob:https://danielyxie.github.io/892ae638-0ca3-43be-b9ef-45ed34ed0197\"}],\"ramUsage\":18.9,\"server\":\"home\",\"_hash\":\"01e4c06f39ee9fbbaf34455345e69069ed183425b721d0941e4128c3882b58ca\",\"moduleSequenceNumber\":14356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, allHosts } from \\\"./util.ns\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tsetns(ns)\\r\\n    for (let hostname of allHosts()) {\\r\\n\\t\\tif (hostname === \\\"home\\\")\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tns.killall(hostname)\\r\\n\\t}\\r\\n\\tns.killall(\\\"home\\\")\\r\\n}\",\"filename\":\"ka.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:https://danielyxie.github.io/df296cb6-3c7d-4281-b9a7-bd2f8ce4ddd9\"},{\"filename\":\"ka.ns\",\"url\":\"blob:https://danielyxie.github.io/0fd12219-ef32-4a6e-8df8-bf2e0e497d0a\"}],\"ramUsage\":2.3,\"server\":\"home\",\"_hash\":\"4a673b65d34bd1381407533440a1a6e8bcfc3ff99331e5c32a6f285f403ab8cb\",\"moduleSequenceNumber\":14351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts } from \\\"./util.ns\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n\\t\\tthis.print(ns)\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hosts = mapHosts();\\r\\n    let ccts = [];\\r\\n    for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n        let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n        if (ls.length === 0) continue;\\r\\n\\r\\n        ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n    }\\r\\n\\r\\n    sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n    for (const cct of ccts) {\\r\\n        cct.solve(ns);\\r\\n    }\\r\\n}\",\"filename\":\"cct.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:https://danielyxie.github.io/10ff26aa-378d-479a-8e33-dc946290da4c\"},{\"filename\":\"cct.ns\",\"url\":\"blob:https://danielyxie.github.io/9fc471a2-3049-45da-97f2-87978fe92986\"}],\"ramUsage\":27,\"server\":\"home\",\"_hash\":\"7fbe80b1f5402f7423de857bc89ad14902b5a29717a4c6e958200a7e6732fe9b\",\"moduleSequenceNumber\":14352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\tfor (let faction of ns.getPlayer().factions) {\\r\\n\\t\\tlet favor = ns.getFactionFavor(faction)\\r\\n\\t\\tlet fGain = ns.getFactionFavorGain(faction)\\r\\n\\r\\n\\t\\tif (favor > 150)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t\\r\\n\\t\\tlet successStr = \\\"\\\"\\r\\n\\t\\tif (favor + fGain > 150) {\\r\\n\\t\\t\\tsuccessStr = \\\"(SUCCESS)\\\"\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.tprintf(\\\"%s => %.2f + %.2f = %.2f %s\\\", faction, favor, fGain, favor + fGain, successStr)\\r\\n\\t}\\r\\n}\",\"filename\":\"favor.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.ns\",\"url\":\"blob:https://danielyxie.github.io/a9738841-7626-4859-b6e2-57168d862140\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"344a0e7ec12c6b13c293737062d285c214741e7596f5a6ff6c98e03c7b7f0804\",\"moduleSequenceNumber\":14353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionFavorGain\",\"cost\":0.75}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\nconst debug = false;\\r\\n\\r\\n// TODO: Manage multiple target/host combos from a single manager\\r\\n// TODO: Incorporate sim into deciding to use GW/HW vs HGW\\r\\n// TODO: Incorporate eff's bucket/target search algorithm\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!ns.args[0]) {\\r\\n        ns.tprintf(\\\"ERROR: No target server defined\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new HackEnv(ns, ns.args[0], ns.args[2], ns.args[1]);\\r\\n    await env.prep(ns);\\r\\n\\r\\n    if (debug) env.printRamOverride(ns);\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", env.ramAllowance);\\r\\n\\r\\n    env.simEnabled = false;\\r\\n    if (env.simEnabled) {\\r\\n        while (env.simTime < 1000 * 60 * 5) {\\r\\n            env.refresh(ns);\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"Time Elapsed: %s; Income %s | %s/s\\\",\\r\\n            ns.tFormat(env.simTime),\\r\\n            ns.nFormat(env.simIncome, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n        );\\r\\n    } else {\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(TSPACER);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_adv.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_env.js\",\"url\":\"blob:https://danielyxie.github.io/b2f7fb09-55a9-48b4-9552-8a6d3d96f0b8\"},{\"filename\":\"super_hack_adv.ns\",\"url\":\"blob:https://danielyxie.github.io/3ab953f0-ef60-4733-bb95-a4e3e8c0b87b\"}],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"e324e65d3f400054808a6ec0cf6f6606b01339ef1e90d69c5673c3ff3a2dbda6\",\"moduleSequenceNumber\":15013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = true;\\nexport const TSPACER = 50;\\nexport const WEAKENNS = \\\"weaken.ns\\\";\\nexport const GROWNS = \\\"grow.ns\\\";\\nexport const HACKNS = \\\"hack.ns\\\";\\n\\nexport const HackState = {\\n    UNSET: \\\"UNDEFINED STATE\\\",\\n    W: \\\"Weaken\\\",\\n    GW: \\\"Grow and Weaken\\\",\\n    HW: \\\"Hack and Weaken\\\",\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\n};\\n\\nexport class HackEnv {\\n    /** @param {import(\\\".\\\").NS } ns */\\n    constructor(ns, targetname, hostname = \\\"\\\", ramAllowance = -1, highMoney = -1, lowMoney = -1, tspacer = TSPACER) {\\n        this.targetname = targetname;\\n        this.hostname = hostname === \\\"\\\" ? ns.getHostname() : hostname;\\n        this.ramAllowance =\\n            ramAllowance === -1\\n                ? ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)\\n                : ramAllowance < 1\\n                ? (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) * ramAllowance\\n                : ramAllowance;\\n        this.highMoney = highMoney === -1 ? ns.getServerMaxMoney(this.targetname) : highMoney;\\n        this.lowMoney = lowMoney === -1 ? ns.getServerMaxMoney(this.targetname) * 0.5 : lowMoney;\\n        this.tspacer = tspacer; // CONST\\n        this.useAllRam = true;\\n\\n        this.cores = ns.getServer(this.hostname).cpuCores;\\n\\n        // Target Info\\n        this.targetSec = 0;\\n        this.targetSecMin = 0;\\n        this.targetMoneyAvailable = 0;\\n\\n        // Weaken Info\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\n        this.weakenStartSec = 0;\\n        this.weakenAmountPerThread = 0;\\n        this.weakenThreads = 0;\\n        this.weakenThreadsGrow = 0;\\n        this.weakenThreadsHack = 0;\\n        this.weakenTime = 0;\\n        this.weakenTimeFullCycle = 0;\\n\\n        // Grow Info\\n        this.growRam = ns.getScriptRam(GROWNS);\\n        this.growStartMoney = 0;\\n        this.growMult = 0;\\n        this.growThreads = 0;\\n        this.growSecIncrease = 0;\\n        this.growTime = 0;\\n\\n        // Hack Info\\n        this.hackRam = ns.getScriptRam(HACKNS);\\n        this.hackStartMoney = 0;\\n        this.hackTotalEst = 0;\\n        this.hackTotal = 0;\\n        this.hackThreads = 0;\\n        this.hackSecIncrease = 0;\\n        this.hackTime = 0;\\n        this.hackPercentPerThread = 0;\\n\\n        // Batch Cycle Info\\n        this.ramPerCycle = 0;\\n        this.cycleSpacer = this.tspacer * 4;\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\n        this.cycleTotal = 0;\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\n\\n        // State Info\\n        this.state = HackState.UNSET;\\n\\n        // Simulator Info\\n        this.simEnabled = false;\\n        this.simHost = ns.getServer(this.hostname);\\n        this.simTarget = ns.getServer(this.targetname);\\n        this.simPlayer = ns.getPlayer();\\n        this.simTime = 0;\\n        this.simIncome = 0;\\n        this.simForceState = HackState.UNSET;\\n    }\\n\\n    async prep(ns) {\\n        if (!ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\n        if (!ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\n        if (!ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\n    }\\n\\n    resetSim(ns) {\\n        this.state = HackState.UNSET;\\n        this.simHost = ns.getServer(this.hostname);\\n        this.simTarget = ns.getServer(this.targetname);\\n        this.simPlayer = ns.getPlayer();\\n        this.simTime = 0;\\n        this.simIncome = 0;\\n        this.simForceState = HackState.UNSET;\\n    }\\n\\n    saveSim(ns) {\\n        this.savedSimInfo = {\\n            simEnabled: this.simEnabled,\\n            simHost: this.simHost,\\n            simTarget: this.simTarget,\\n            simPlayer: this.simPlayer,\\n            simTime: this.simTime,\\n            simIncome: this.simIncome,\\n            simForceState: this.simForceState,\\n        };\\n    }\\n\\n    loadSim(ns) {\\n        if (this.savedSimInfo) {\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\n            this.simHost = this.savedSimInfo.simHost;\\n            this.simTarget = this.savedSimInfo.simTarget;\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\n            this.simTime = this.savedSimInfo.simTime;\\n            this.simIncome = this.savedSimInfo.simIncome;\\n            this.simForceState = this.savedSimInfo.simForceState;\\n\\n            delete this.savedSimInfo;\\n        }\\n    }\\n\\n    getServerSecurityLevel(ns) {\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\n\\n        return ns.getServerSecurityLevel(this.targetname);\\n    }\\n\\n    getServerMoneyAvailable(ns) {\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\n\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    getWeakenTime(ns) {\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\n\\n        return ns.getWeakenTime(this.targetname);\\n    }\\n\\n    getGrowTime(ns) {\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\n\\n        return ns.getGrowTime(this.targetname);\\n    }\\n\\n    getHackTime(ns) {\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\n\\n        return ns.getHackTime(this.targetname);\\n    }\\n\\n    hackAnalyze(ns) {\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\n\\n        return ns.hackAnalyze(this.targetname);\\n    }\\n\\n    calcGrowThreads(ns) {\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\n\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\n        // than growMult, then increase it back by 1\\n\\n        if (this.simEnabled) {\\n            while (\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\n                this.growMult\\n            );\\n\\n            // correct overshoot\\n            growThreads++;\\n        }\\n\\n        return growThreads;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    setState(ns) {\\n        if (this.isWRunning(ns)) {\\n            // Process is running on this target, dont update the state\\n            return;\\n        }\\n\\n        if (!this.doneWeaken(ns)) {\\n            this.state = HackState.W;\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\n        } else if (!this.doneGrow(ns)) {\\n            this.state = HackState.GW;\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\n        } else {\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\n\\n            if (this.simForceState !== HackState.UNSET) {\\n                this.state = this.simForceState;\\n\\n                if (this.state === HackState.HGW)\\n                    // force skips the hgw update, so do it here\\n                    this.updateForHGW(ns);\\n                return;\\n            }\\n\\n            this.updateForHW(ns);\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\n            this.updateForHGW(ns);\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\n\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\n            else this.state = HackState.HGW;\\n        }\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    refresh(ns) {\\n        if (this.isWRunning(ns)) {\\n            // process in progress, wait for next refresh to update\\n            return;\\n        }\\n\\n        if (debug) {\\n            switch (this.state) {\\n                case HackState.W:\\n                    ns.tprintf(\\n                        \\\"WEAKEN: %s:%s => Lowered Security from %.2f to %.2f (min: %.2f)\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        this.weakenStartSec,\\n                        this.getServerSecurityLevel(ns),\\n                        ns.getServerMinSecurityLevel(this.targetname)\\n                    );\\n                    break;\\n                case HackState.GW:\\n                    ns.tprintf(\\n                        \\\"GROW-WEAKEN: %s:%s => Grow %d; Weaken %d; Total RAM %.2f\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        this.growThreads,\\n                        this.weakenThreadsGrow,\\n                        this.ramPerCycle\\n                    );\\n                    ns.tprintf(\\n                        \\\"GROW-WEAKEN: %s:%s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\n                        this.getServerSecurityLevel(ns)\\n                    );\\n                    break;\\n                case HackState.HW:\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\n                    ns.tprintf(\\n                        \\\"HACK-WEAKEN: %s:%s => Hack %d; Weaken %d; Total RAM %.2f\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        this.hackThreads,\\n                        this.weakenThreadsHack,\\n                        this.ramPerCycle\\n                    );\\n                    ns.tprintf(\\n                        \\\"HACK-WEAKEN: %s:%s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\n                        this.getServerSecurityLevel(ns)\\n                    );\\n                    break;\\n                case HackState.HGW:\\n                    ns.tprintf(\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total RAM %.2f/%.2f; Total Cycles %d/%d\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        this.hackThreads,\\n                        this.growThreads,\\n                        this.weakenThreadsHack,\\n                        this.weakenThreadsGrow,\\n                        this.ramPerCycle,\\n                        this.ramPerCycle * this.cycleTotal,\\n                        this.cycleTotal,\\n                        this.cycleMax\\n                    );\\n                    ns.tprintf(\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\n                        this.hostname,\\n                        this.targetname,\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\n                        this.getServerSecurityLevel(ns)\\n                    );\\n                    break;\\n                default:\\n                    // Do Nothing\\n                    break;\\n            }\\n        }\\n\\n        this.setState(ns);\\n        switch (this.state) {\\n            case HackState.W:\\n                this.updateForW(ns);\\n                this.execW(ns);\\n                break;\\n            case HackState.GW:\\n                this.updateForGW(ns);\\n                this.execGW(ns);\\n                break;\\n            case HackState.HW:\\n                this.updateForHW(ns);\\n                this.execHW(ns);\\n                break;\\n            case HackState.HGW:\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\n                //this.updateForHGW(ns);\\n                this.execHGW(ns);\\n                break;\\n            default:\\n            // Do Nothing\\n        }\\n    }\\n\\n    printRamOverride(ns) {\\n        let maxRam = ns.getServerMaxRam(this.hostname);\\n        let ramFraction = maxRam / this.ramAllowance;\\n        ns.tprintf(\\n            \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\n            this.ramAllowance,\\n            (this.ramAllowance / maxRam) * 100,\\n            maxRam\\n        );\\n    }\\n\\n    doneWeaken(ns) {\\n        return this.getServerSecurityLevel(ns) === ns.getServerMinSecurityLevel(this.targetname);\\n    }\\n\\n    doneGrow(ns) {\\n        return this.getServerMoneyAvailable(ns) >= this.highMoney;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    updateForW(ns) {\\n        // Target Info\\n        this.targetSec = this.getServerSecurityLevel(ns);\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\n        let secDiff = this.targetSec - this.targetSecMin;\\n\\n        // Weaken Info\\n        this.weakenTime = this.getWeakenTime(ns);\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\n        this.weakenThreads = Math.ceil(secDiff / this.weakenAmountPerThread);\\n\\n        this.ramPerCycle = this.weakenThreads * this.weakenRam;\\n\\n        if (this.ramPerCycle > this.ramAllowance || this.useAllRam) {\\n            this.weakenThreads = Math.floor(this.ramAllowance / this.weakenRam);\\n            this.ramPerCycle = this.weakenThreads * this.weakenRam;\\n        }\\n\\n        // return true if this cycle will fully weaken the target\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    updateForGW(ns) {\\n        // Target Info\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\n        this.targetSec = this.getServerSecurityLevel(ns);\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\n        let secDiff = this.targetSec - this.targetSecMin;\\n\\n        // Grow Info\\n        this.growTime = this.getGrowTime(ns);\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\n        this.growThreads = this.calcGrowThreads(ns);\\n        let growThreadsFull = this.growThreads;\\n        if (this.useAllRam) this.growThreads = Math.floor(this.ramAllowance / this.growRam);\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\n\\n        // Weaken Info\\n        this.weakenTime = this.getWeakenTime(ns);\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\n\\n        this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\n\\n        while (this.ramPerCycle > this.ramAllowance) {\\n            this.growThreads--;\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\n            this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\n        }\\n\\n        // Returning true if this grow cycle will max out the target server\\n        return this.growThreads >= growThreadsFull;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    updateForHW(ns) {\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\n        let useAllRamState = this.useAllRam;\\n        this.useAllRam = true;\\n        this.updateForGW(ns); // to set this.growThreads\\n        this.growMult = ns.formulas.hacking.growPercent(\\n            ns.getServer(this.targetname),\\n            this.growThreads,\\n            ns.getPlayer(),\\n            this.cores\\n        );\\n        this.useAllRam = useAllRamState;\\n\\n        // Target Info\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\n        this.targetSec = this.getServerSecurityLevel(ns);\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\n        let secDiff = this.targetSec - this.targetSecMin;\\n\\n        // Hack Info\\n        this.hackTime = this.getHackTime(ns);\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\n        let hackThreadsFull = this.hackThreads;\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n        }\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\n\\n        // Grow Info\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\n\\n        // Weaken Info\\n        this.weakenTime = this.getWeakenTime(ns);\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\n\\n        this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\n\\n        while (this.ramPerCycle > this.ramAllowance || growRecoveryMult > this.growMult) {\\n            this.hackThreads--;\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\n            this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\n        }\\n\\n        // Returning true if this hack cycle will bottom out the target server\\n        return this.hackThreads >= hackThreadsFull;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    updateForHGW(ns) {\\n        // Target Info\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\n        this.targetSec = this.getServerSecurityLevel(ns);\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\n        let secDiff = this.targetSec - this.targetSecMin;\\n\\n        // Hack Info\\n        this.hackTime = this.getHackTime(ns);\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\n        let hackThreadsFull = this.hackThreads;\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n        }\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\n\\n        // Grow Info\\n        this.growTime = this.getGrowTime(ns);\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\n        this.growThreads = this.calcGrowThreads(ns);\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\n\\n        // Weaken Info\\n        this.weakenTime = this.getWeakenTime(ns);\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\n\\n        // Cycle Info\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\n\\n        let setCycle = function () {\\n            if (this.cycleTotal <= 0) return 0;\\n            let ramCycleAllowance = Math.floor((this.ramAllowance / this.cycleTotal) * 100) / 100;\\n            if (ramCycleAllowance < 16) return 0;\\n\\n            this.hackThreads = Math.floor(ramCycleAllowance / this.hackRam);\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n            }\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\n\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\n            this.growThreads = this.calcGrowThreads(ns);\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\n\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\n\\n            this.ramPerCycle =\\n                this.hackThreads * this.hackRam +\\n                this.growThreads * this.growRam +\\n                this.weakenThreadsHack * this.weakenRam +\\n                this.weakenThreadsGrow * this.weakenRam;\\n\\n            while (this.ramPerCycle > ramCycleAllowance) {\\n                this.hackThreads--;\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\n                this.growThreads = this.calcGrowThreads(ns);\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\n\\n                this.ramPerCycle =\\n                    this.hackThreads * this.hackRam +\\n                    this.growThreads * this.growRam +\\n                    this.weakenThreadsHack * this.weakenRam +\\n                    this.weakenThreadsGrow * this.weakenRam;\\n            }\\n\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\n\\n            let cycleIncome = (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\n\\n            return cycleIncome;\\n        }.bind(this);\\n\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\n\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\n        // returns 0\\n        let cycleMax;\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\n            this.cycleTotal = cycleMax;\\n            cycleIncomes[cycleMax] = setCycle();\\n\\n            if (cycleIncomes[cycleMax] > 0) break;\\n        }\\n        cycleMax++;\\n\\n        // find local maximum of cycleIncomes\\n        // target center value,\\n        //  if value to left of target is larger than target, recenter target to left of current target\\n        //  if value to right of target is larger than target, recenter target to right of current target\\n        //  if values to left and right of target are both less than target, keep target\\n        let cycleMin = 0;\\n        let cycleTarget = 0;\\n        while (true) {\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\n\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\n\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\n                this.cycleTotal = cycleTarget - 1;\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\n            }\\n            if (cycleIncomes[cycleTarget] === undefined) {\\n                this.cycleTotal = cycleTarget;\\n                cycleIncomes[cycleTarget] = setCycle();\\n            }\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\n                this.cycleTotal = cycleTarget + 1;\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\n            }\\n\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\n                cycleMin = cycleTarget;\\n                continue;\\n            }\\n\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\n                cycleMax = cycleTarget;\\n                continue;\\n            }\\n\\n            break;\\n        }\\n\\n        this.cycleTotal = cycleTarget;\\n        setCycle();\\n\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    execW(ns) {\\n        if (this.simEnabled) {\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\n            this.simTarget.hackDifficulty = Math.max(\\n                this.simTarget.hackDifficulty,\\n                ns.getServerMinSecurityLevel(this.targetname)\\n            );\\n\\n            this.simTime += this.weakenTime;\\n\\n            return;\\n        }\\n\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreads, this.targetname);\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    execGW(ns) {\\n        if (this.simEnabled) {\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\n                this.simTarget,\\n                this.growThreads,\\n                this.simPlayer,\\n                this.cores\\n            );\\n            this.simTarget.moneyAvailable *= simGrowMult;\\n            this.simTarget.moneyAvailable = Math.min(\\n                this.simTarget.moneyAvailable,\\n                ns.getServerMaxMoney(this.targetname)\\n            );\\n\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\n            this.simTarget.hackDifficulty = Math.max(\\n                this.simTarget.hackDifficulty,\\n                ns.getServerMinSecurityLevel(this.targetname)\\n            );\\n\\n            this.simTime += this.weakenTime;\\n\\n            return;\\n        }\\n\\n        // start grow such that it finishes slightly before weaken\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\n        ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, growOffsetTime);\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsGrow, this.targetname);\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    execHW(ns) {\\n        if (this.simEnabled) {\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\n            let hackTotal = 0;\\n\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\n\\n            this.simTarget.moneyAvailable -= hackTotal;\\n\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\n            this.simTarget.hackDifficulty = Math.max(\\n                this.simTarget.hackDifficulty,\\n                ns.getServerMinSecurityLevel(this.targetname)\\n            );\\n\\n            this.simTime += this.weakenTime;\\n            this.simIncome += hackTotal;\\n\\n            return;\\n        }\\n\\n        // start hack such that it finishes slightly before weaken\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\n        ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, hackOffsetTime);\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname);\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    execHGW(ns) {\\n        if (this.simEnabled) {\\n            // HACK\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\n            let hackTotal = 0;\\n\\n            for (let i = 0; i < this.cycleTotal; i++) {\\n                if (Math.random() <= hackChance) {\\n                    hackTotal += this.hackTotal;\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\n                }\\n\\n                // GROW\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\n                    this.simTarget,\\n                    this.growThreads,\\n                    this.simPlayer,\\n                    this.cores\\n                );\\n                this.simTarget.moneyAvailable *= simGrowMult;\\n                this.simTarget.moneyAvailable = Math.min(\\n                    this.simTarget.moneyAvailable,\\n                    ns.getServerMaxMoney(this.targetname)\\n                );\\n\\n                // SECURITY\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\n                this.simTarget.hackDifficulty = Math.max(\\n                    this.simTarget.hackDifficulty,\\n                    ns.getServerMinSecurityLevel(this.targetname)\\n                );\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\n                this.simTarget.hackDifficulty = Math.max(\\n                    this.simTarget.hackDifficulty,\\n                    ns.getServerMinSecurityLevel(this.targetname)\\n                );\\n            }\\n\\n            this.simTime += this.cycleBatchTime;\\n            this.simIncome += hackTotal;\\n\\n            return;\\n        }\\n\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\n\\n        console.time(\\\"cycle launch\\\");\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\n            let cycleOffsetTime = i * this.cycleSpacer;\\n\\n            ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname, cycleOffsetTime); // hack weaken, Start 1st (0ms offset), finish 2nd\\n            ns.exec(\\n                WEAKENNS,\\n                this.hostname,\\n                this.weakenThreadsGrow,\\n                this.targetname,\\n                cycleOffsetTime + weakenGrowOffsetTime\\n            ); // grow weaken, Start 2nd, finish 4th\\n            ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, cycleOffsetTime + growOffsetTime); // Start 3rd, finish 3rd\\n            ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, cycleOffsetTime + hackOffsetTime); // Start 4th, finish 1st\\n        }\\n        console.timeEnd(\\\"cycle launch\\\");\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    isWRunning(ns) {\\n        if (this.simEnabled) return false;\\n\\n        let ps = ns.ps(this.hostname);\\n        for (let psInfo of ps) {\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    async waitW(ns) {\\n        while (this.isWRunning(ns)) {\\n            await ns.sleep(this.tspacer);\\n        }\\n    }\\n\\n    /** @param {import(\\\".\\\").NS } ns */\\n    fastSim(ns, time) {\\n        this.resetSim(ns);\\n        this.simEnabled = true;\\n\\n        if (this.doneWeaken(ns)) {\\n            this.weakenTime = this.getWeakenTime(ns);\\n            this.simTime += this.weakenTime + this.tspacer;\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\n        }\\n\\n        if (this.simTime > time) return this.simIncome;\\n\\n        if (!this.doneGrow(ns)) {\\n            this.updateForGW(ns);\\n\\n            while (this.simTarget.moneyAvailable < ns.getServerMaxMoney(this.targetname)) {\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\n                    this.simTarget,\\n                    this.growThreads,\\n                    this.simPlayer,\\n                    this.cores\\n                );\\n                this.simTarget.moneyAvailable *= simGrowMult;\\n                this.simTarget.moneyAvailable = Math.min(\\n                    this.simTarget.moneyAvailable,\\n                    ns.getServerMaxMoney(this.targetname)\\n                );\\n\\n                this.simTime += this.weakenTime + this.tspacer;\\n                this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\n\\n                if (this.simTime > time) return this.simIncome;\\n            }\\n        }\\n\\n        if (this.simTime > time) return this.simIncome;\\n\\n        this.updateForHW(ns);\\n        let hwTotal = this.hackTotal;\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\n\\t\\tlet hwIncome = hwTotal / hwTime\\n        this.updateForHGW(ns);\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\n        let hgwTime = this.cycleFullTime;\\n\\t\\tlet hgwIncome = hgwTotal / hgwTime\\n\\n        while (this.simTime < time) {\\n            if (hwIncome > hgwIncome) {\\n\\t\\t\\t\\tthis.simTime += hwTime\\n\\t\\t\\t\\tthis.simIncome += hwTotal\\n            } else {\\n\\t\\t\\t\\tthis.simTime += hgwTime\\n\\t\\t\\t\\tthis.simIncome += hgwTotal\\n\\t\\t\\t}\\n        }\\n\\n\\t\\treturn this.simIncome;\\n    }\\n}\",\"filename\":\"hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"625d48161ff7b4f603de35c35c7cf41c89abd045ae717f6fa5bef6248a0e4eba\",\"moduleSequenceNumber\":15012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"28.0.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":17246789919.5,\"moneyMax\":862339495975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1249,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"22.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":29886461659.5,\"moneyMax\":1494323082975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1137,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"99.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":13150259376.5,\"moneyMax\":657512968825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1003,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"69.2.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":194,\"hackDifficulty\":194,\"minDifficulty\":65,\"moneyAvailable\":11991873235,\"moneyMax\":599593661750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"96.0.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":14915679215,\"moneyMax\":745783960750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1281,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"82.1.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":10988059140,\"moneyMax\":549402957000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1102,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"23.2.3.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":7796174242.5,\"moneyMax\":389808712125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1010,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"40.8.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":8232468016.5,\"moneyMax\":411623400825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"49.1.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192,\"hackDifficulty\":192,\"minDifficulty\":64,\"moneyAvailable\":14410265861,\"moneyMax\":720513293050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"21.3.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":873598580,\"moneyMax\":43679929000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1081,\"serverGrowth\":94}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"62.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1463,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"89.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":540516657.5,\"moneyMax\":27025832875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":943,\"serverGrowth\":70}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"69.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":439326116,\"moneyMax\":21966305800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1044,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"83.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":435546538.5,\"moneyMax\":21777326925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"74.8.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":310392445,\"moneyMax\":15519622250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"94.6.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":356220387.5,\"moneyMax\":17811019375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":76}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"27.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":459565157,\"moneyMax\":22978257850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"13.9.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":585367734.5,\"moneyMax\":29268386725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"30.6.4.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":419356582,\"moneyMax\":20967829100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"87.3.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":311628105.5,\"moneyMax\":15581405275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"41.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":449104281,\"moneyMax\":22455214050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"86.0.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":383744188.5,\"moneyMax\":19187209425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"94.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":579618831.5,\"moneyMax\":28980941575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"64.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":174,\"hackDifficulty\":174,\"minDifficulty\":58,\"moneyAvailable\":458569382.5,\"moneyMax\":22928469125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"17.7.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":531713984.5,\"moneyMax\":26585699225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"97.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":484706506,\"moneyMax\":24235325300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"81.1.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":412230922.5,\"moneyMax\":20611546125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"73.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":663814356,\"moneyMax\":33190717800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"26.5.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":803354107,\"moneyMax\":40167705350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"85.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":599666261,\"moneyMax\":29983313050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"26.2.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":747770142,\"moneyMax\":37388507100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"10.3.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":515157435.5,\"moneyMax\":25757871775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"78.4.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":381808803.5,\"moneyMax\":19090440175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":740,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"24.4.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":315755696,\"moneyMax\":15787784800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"5.2.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":311552750,\"moneyMax\":15577637500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":524,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"53.3.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":130702434.5,\"moneyMax\":6535121725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":442,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"48.1.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106,\"hackDifficulty\":106,\"minDifficulty\":35,\"moneyAvailable\":99800607,\"moneyMax\":4990030350,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":402,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"58.1.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":455459718,\"moneyMax\":22772985900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":760,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"32.5.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":103205595,\"moneyMax\":5160279750,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":462,\"serverGrowth\":53}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"48.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":245176695.5,\"moneyMax\":12258834775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":613,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"97.9.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":158867604.5,\"moneyMax\":7943380225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":438,\"serverGrowth\":51}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"98.2.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":85778384.5,\"moneyMax\":4288919225,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":301,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"34.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":110,\"hackDifficulty\":110,\"minDifficulty\":37,\"moneyAvailable\":113051114.5,\"moneyMax\":5652555725,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":365,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"84.1.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":410,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"98.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":42322692,\"moneyMax\":2116134600,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":261,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"74.3.5.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":33,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"n00dles\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"75.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":34,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":11.5,\"minDifficulty\":7,\"moneyAvailable\":1000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"66.0.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":36,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"47.4.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":40,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"joesguns\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"94.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":35,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"94.1.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"91.3.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"3.7.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":41,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"60.7.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"hack_me.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":42,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.ns\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_me.ns\",\"url\":\"blob:https://danielyxie.github.io/ca35f13f-c52b-4357-8282-49c876d891ba\"}],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":15064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"14.9.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":12000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"80.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"3.6.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":34539610.5,\"moneyMax\":1726980525,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":216,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"44.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":23554007.5,\"moneyMax\":1177700375,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":246,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"1.3.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"17.9.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":482,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"79.8.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":966,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":691,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"14.6.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"96.0.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":364,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"49.6.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"60.2.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"19.9.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"42.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"97.3.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"sa\":\"scan-analyze\",\"bs\":\"run buy_server.ns\",\"ll\":\"run ll.ns\",\"as\":\"run assess.ns\",\"brute\":\"home; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; killall; run starter.ns; run target.ns\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"mcp\":\"run mcp.ns\",\"ka\":\"run ka.ns\",\"cct\":\"run cct.ns\",\"eff\":\"run eff.ns\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641830940577","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1641865239274"}}