{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":773,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":133,\"intelligence\":65,\"hacking_chance_mult\":1.6643650944184303,\"hacking_speed_mult\":1.7314390077234922,\"hacking_money_mult\":1.6643650944184303,\"hacking_grow_mult\":1.6643650944184303,\"hacking_exp\":273308296.4805348,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":6120.108218601372,\"intelligence_exp\":3523.050000000019,\"hacking_mult\":1.83496251659632,\"strength_mult\":1.4860402628735982,\"defense_mult\":1.4860402628735982,\"dexterity_mult\":1.4860402628735982,\"agility_mult\":1.4860402628735982,\"charisma_mult\":1.634644289160958,\"hacking_exp_mult\":1.830801603860274,\"strength_exp_mult\":1.6346442891609587,\"defense_exp_mult\":1.6346442891609587,\"dexterity_exp_mult\":1.6346442891609587,\"agility_exp_mult\":1.6346442891609587,\"charisma_exp_mult\":1.6346442891609587,\"company_rep_mult\":2.4813900309463346,\"faction_rep_mult\":1.879840932535102,\"money\":3350371089145.2773,\"city\":\"Aevum\",\"location\":\"ECorp\",\"jobs\":{\"Bachman & Associates\":\"IT Intern\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"CyberSec\",\"The Black Hand\",\"NiteSec\",\"Bachman & Associates\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":2,\"n\":5},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.4860402628735982,\"crime_success_mult\":1.4860402628735982,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Bachman & Associates\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.27462024057904105,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.6041753054545627,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":71.78573088736114,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":419.3314248458243,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":64800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.634644289160958,\"hacknet_node_money_mult\":1.4860402628735982,\"hacknet_node_purchase_cost_mult\":0.6192420153417276,\"hacknet_node_ram_cost_mult\":0.6192420153417276,\"hacknet_node_core_cost_mult\":0.6192420153417276,\"hacknet_node_level_cost_mult\":0.6192420153417276,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1642090674060,\"totalPlaytime\":2383512400,\"playtimeSinceLastAug\":31877200,\"playtimeSinceLastBitnode\":49303000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8007058798724,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3350371088145.2773,\"work\":15912281.368355392,\"servers\":-4656416222859.977,\"other\":-287400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8058638303297,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3352918486087.5605,\"work\":15912281.368355392,\"servers\":-4680388251150.487,\"other\":-611500000,\"augmentations\":-24735978340.205467}},\"scriptProdSinceLastAug\":8007058798724,\"exploits\":[],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":131072,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":131020.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[30,\"go\"],\"dataMap\":{},\"filename\":\"solo.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106652,\"ramUsage\":13.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///1ae6e472-321b-4bfb-b442-751934506bf7\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"solo.js\",\"url\":\"blob:file:///a42b385d-3b6f-46bd-af3d-173b8bf26697\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106653,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":74861,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\",\"moduleSequenceNumber\":31848}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\",\"moduleSequenceNumber\":31849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nfunction canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction matchWeakenTarget(a, target) {\\r\\n    let epsilon = 0.1;\\r\\n    let targetMin = target - epsilon;\\r\\n    let targetMax = target + epsilon;\\r\\n\\r\\n    return a > targetMin && a < targetMax;\\r\\n}\\r\\n\\r\\nfunction assessHack(hostNames) {\\r\\n    let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort);\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\");\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\");\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\");\\r\\n\\r\\n    let fundThres = 0.9;\\r\\n    let targetServer = ns.getServer(hackableHosts[0]);\\r\\n    let targetFunds = targetServer.moneyMax * fundThres;\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetFunds / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s [%2.0f%% | %s]\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetFunds, \\\"($0.000a)\\\"),\\r\\n        fundThres * 100,\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    const hostSet = new Set([\\\"home\\\"]);\\r\\n    let hostQueue = [\\\"home\\\"];\\r\\n    let currentHost;\\r\\n    while ((currentHost = hostQueue.shift())) {\\r\\n        let newHosts = ns.scan(currentHost);\\r\\n\\r\\n        for (const newHost of newHosts) {\\r\\n            if (!hostSet.has(newHost)) {\\r\\n                hostQueue.push(newHost);\\r\\n                hostSet.add(newHost);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let hostNames = Array.from(hostSet);\\r\\n    //assessHack(hostNames)\\r\\n\\r\\n    let serverName = ns.args[0];\\r\\n    let targetServer = ns.getServer(serverName);\\r\\n    assessHack([targetServer.hostname]);\\r\\n}\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///fd726e10-4ae9-4fb4-8808-323329889c55\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"482a9beb35dd25b989f01392d4ab4a49e02be0cd92ad83fe35cbb3ce92bb8677\",\"moduleSequenceNumber\":31850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///7a3f868e-ff97-44e0-a02f-eccdf64fcb01\"}],\"ramUsage\":11.25,\"server\":\"home\",\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"moduleSequenceNumber\":32314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n\\t\\tthis.print(ns)\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hosts = mapHosts();\\r\\n    let ccts = [];\\r\\n    for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n        let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n        if (ls.length === 0) continue;\\r\\n\\r\\n        ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n    }\\r\\n\\r\\n    sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n    for (const cct of ccts) {\\r\\n        cct.solve(ns);\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":27,\"server\":\"home\",\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"moduleSequenceNumber\":31852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction listServers(ns, hostnames) {\\r\\n    let hackableHosts = hostnames.sort((a, b) => ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a));\\r\\n\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6dGB %5.2f\\\",\\r\\n            hostname,\\r\\n            ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"),\\r\\n            ns.getServerRequiredHackingLevel(hostname),\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            ns.getServerMaxRam(hostname),\\r\\n            Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    let hostnames = allHosts()\\r\\n\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    listServers(ns, hostnames);\\r\\n}\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///ed942569-aa5a-4452-a57d-75f7d53904e5\"}],\"ramUsage\":2.7,\"server\":\"home\",\"_hash\":\"f794cb5c9400e1bd7590de9d4c74f655abc7a9f0983d213a5828b9fb77b56e2e\",\"moduleSequenceNumber\":31906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var debug = false;\\r\\n\\r\\nfunction fltEq(a, b) {\\r\\n    let epsilon = 0.05;\\r\\n    return a > b - epsilon && a < b + epsilon;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doWeaken(ns, _hostname, _targetname, ramAllowance) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let weakenThreads = Math.min(\\r\\n        Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread),\\r\\n        Math.floor(ramAllowance / weakenRam)\\r\\n    );\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        let estSecLevelAfterWeaken = Math.max(\\r\\n            target.minDifficulty,\\r\\n            target.hackDifficulty - weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n        ns.tprintf(\\\"Weaken Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s\\\",\\r\\n            target.hostname,\\r\\n            target.hackDifficulty,\\r\\n            estSecLevelAfterWeaken,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            host.hostname,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let currentMoney = Math.max(1.0, target.moneyAvailable);\\r\\n    let targetGrowMult = highMoney / currentMoney;\\r\\n    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let growThreads = fullGrowThreads + 1,\\r\\n        weakenThreads,\\r\\n        growRamCycle,\\r\\n        growSecIncrease;\\r\\n\\r\\n    do {\\r\\n        growThreads -= 1;\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        growRamCycle = growThreads * growRam + weakenThreads * weakenRam;\\r\\n    } while (growRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Grow Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(currentMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)\\\",\\r\\n            ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(target.moneyMax, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(highMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult,\\r\\n            (growThreads / fullGrowThreads) * 100,\\r\\n            growThreads,\\r\\n            fullGrowThreads\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            growRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHackAndWeaken(ns, _hostname, _targetname) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let hackThreads = fullHackThreads + 1,\\r\\n        weakenThreads,\\r\\n        hackRamCycle;\\r\\n\\r\\n    do {\\r\\n        hackThreads -= 1;\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n    } while (hackRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Hack Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance, tspacer) {\\r\\n    /*//////////// ALGO ////////////\\r\\n        if hackRamCycle is greater than ramAllowance\\r\\n        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio\\r\\n        while hackRamCycle > ramAllowance\\r\\n        recompute everything up to hackRamCycle\\r\\n        if hackRamCycle > ramAllowance\\r\\n            reduce targetHackAmount by .1% of original targetHackAmount\\r\\n    //////////////////////////////*/\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    if (debug) {\\r\\n        ns.tprintf(\\\"Hack Process: \\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(target.moneyAvailable - hackAmount, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramAllowance) {\\r\\n        let failRatio = ramAllowance / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount);\\r\\n        if (debug)\\r\\n            ns.tprintf(\\\"  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)\\\", failRatio * 100, failRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    let cycles = 0;\\r\\n    while (hackRamCycle > ramAllowance) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n        cycles++;\\r\\n    }\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        if (cycles > 0)\\r\\n            ns.tprintf(\\r\\n                \\\"  targetHackAmount ratio: %.0f%%; Cycles: %d\\\",\\r\\n                (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100,\\r\\n                cycles\\r\\n            );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            hackWeakenThreads,\\r\\n            growWeakenThreads,\\r\\n            (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f\\\",\\r\\n            target.hackDifficulty,\\r\\n            target.hackDifficulty + hackSecIncrease + growSecIncrease,\\r\\n            ns.hackAnalyzeSecurity(1),\\r\\n            weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n    }\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tgrow = ns.getGrowTime(target.hostname);\\r\\n    let thack = ns.getHackTime(target.hostname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, hackWeakenThreads, target.hostname, 0); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, growWeakenThreads, target.hostname, tGrowWeakenOffset); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname, tGrowOffset); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname, tHackOffset); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreads(ns, _hostname, _targetname, highMoney, lowMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n    return [hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreadsSmart(ns, _hostname, _targetname, ramAllowance, tspacer) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyMax * 0.9;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let targetCycles = Math.floor(tweakenFullCycle / tCycleSpacer);\\r\\n    let ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n\\r\\n    // dont force a cycle into less than 16GB\\r\\n    while (ramFit < 16) {\\r\\n        targetCycles--;\\r\\n        ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramFit) {\\r\\n        let crunchRatio = ramFit / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (crunchRatio * 1.1), targetHackAmount);\\r\\n        if (debug) ns.tprintf(\\\"  ramFit / hackRamCycle = %.0f%% (%.0f%%)\\\", crunchRatio * 100, crunchRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    while (hackRamCycle > ramFit) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n        let dobreak = false;\\r\\n        if (targetGrowMult < 1) {\\r\\n            targetGrowMult = 1.0000001;\\r\\n            dobreak = true;\\r\\n        }\\r\\n\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n        if (dobreak) break;\\r\\n    }\\r\\n\\r\\n    //if (debug) {\\r\\n    ns.tprintf(\\r\\n        \\\"  Calling Hack (%.4f%% of Max) with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s over %d Cycles\\\",\\r\\n        (hackAmount / target.moneyMax) * 100,\\r\\n        hackThreads,\\r\\n        hackThreads * hackRam,\\r\\n        growThreads,\\r\\n        growThreads * growRam,\\r\\n        hackWeakenThreads,\\r\\n        growWeakenThreads,\\r\\n        (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n        hackRamCycle,\\r\\n        ns.tFormat(tweaken),\\r\\n        targetCycles\\r\\n    );\\r\\n    //}\\r\\n\\r\\n    return [targetCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction launchHGW(\\r\\n    ns,\\r\\n    hostname,\\r\\n    targetname,\\r\\n    tspacer,\\r\\n    tag,\\r\\n    hackWeakenThreads,\\r\\n    growWeakenThreads,\\r\\n    hackThreads,\\r\\n    growThreads\\r\\n) {\\r\\n    let tweaken = ns.getWeakenTime(targetname);\\r\\n    let tgrow = ns.getGrowTime(targetname);\\r\\n    let thack = ns.getHackTime(targetname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, hackWeakenThreads, targetname, 0, tag); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, growWeakenThreads, targetname, tGrowWeakenOffset, tag); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", hostname, growThreads, targetname, tGrowOffset, tag); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", hostname, hackThreads, targetname, tHackOffset, tag); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let ramOverride = ns.args[1];\\r\\n    let _hostname = ns.getHostname();\\r\\n    let _targetname = ns.args[0];\\r\\n    if (!_targetname) _targetname = \\\"lexo-corp\\\";\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let lowThresholdFactor = 0.94;\\r\\n    let highThresholdFactor = 1;\\r\\n    let lowMoney = target.moneyMax * lowThresholdFactor;\\r\\n    let highMoney = target.moneyMax * highThresholdFactor;\\r\\n\\r\\n    if (!ns.fileExists(\\\"grow.js\\\", host.hostname)) await ns.scp(\\\"grow.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"weaken.js\\\", host.hostname)) await ns.scp(\\\"weaken.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"hack.js\\\", host.hostname)) await ns.scp(\\\"hack.js\\\", \\\"home\\\", host.hostname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let ramAllowance = host.maxRam - host.ramUsed;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 48;\\r\\n\\r\\n    if (ramOverride) {\\r\\n        if (ramOverride < 1) {\\r\\n            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0;\\r\\n            if (debug)\\r\\n                ns.tprintf(\\r\\n                    \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n                    ramFraction,\\r\\n                    ramOverride,\\r\\n                    ramAllowance\\r\\n                );\\r\\n            ramAllowance = ramFraction;\\r\\n        } else {\\r\\n            if (debug) ns.tprintf(\\\"Overriding availble host RAM max to %.2f\\\", ramOverride);\\r\\n            ramAllowance = Math.min(ramOverride, ramAllowance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", ramAllowance);\\r\\n\\r\\n    // Weaken to minimum security\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.hackDifficulty > target.minDifficulty) {\\r\\n        doWeaken(ns, host.hostname, target.hostname, ramAllowance);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldHackDifficulty = target.hackDifficulty;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\\"  Lowered Security from %.2f to %.2f\\\", oldHackDifficulty, target.hackDifficulty);\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Grow to high threshold money\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.moneyAvailable < highMoney) {\\r\\n        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldMoney = target.moneyAvailable;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\r\\n                \\\"  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)\\\",\\r\\n                target.hostname,\\r\\n                ns.nFormat(oldMoney, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n                (target.moneyAvailable / target.moneyMax) * 100,\\r\\n                target.hackDifficulty,\\r\\n                target.minDifficulty\\r\\n            );\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Hack the world\\r\\n    let tspacer = 200;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads;\\r\\n    [hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads] = calcHGWThreadsSmart(\\r\\n        ns,\\r\\n        host.hostname,\\r\\n        target.hostname,\\r\\n        ramAllowance,\\r\\n        tspacer\\r\\n    );\\r\\n    while (true) {\\r\\n        for (let i = 0; i < hgwCycles; i++) {\\r\\n            if (i !== 0) await ns.sleep(tCycleSpacer);\\r\\n            launchHGW(\\r\\n                ns,\\r\\n                host.hostname,\\r\\n                target.hostname,\\r\\n                tspacer,\\r\\n                i,\\r\\n                hackWeakenThreads,\\r\\n                growWeakenThreads,\\r\\n                hackThreads,\\r\\n                growThreads\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let sleepTimer = tweakenFullCycle - hgwCycles * tCycleSpacer + tCycleSpacer;\\r\\n        if (sleepTimer > 0) await ns.sleep(sleepTimer);\\r\\n\\r\\n        // while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname, 400, \\\"9\\\")) {\\r\\n        //     await ns.sleep(50)\\r\\n        //     if (debug) {\\r\\n        //         let oldMoney = target.moneyAvailable\\r\\n        //         let oldSec = target.hackDifficulty\\r\\n        //         target = ns.getServer(target.hostname)\\r\\n\\r\\n        //         if (oldMoney != target.moneyAvailable)\\r\\n        //             ns.tprintf(\\\"  Hack: %s available money changed from %s to %s (%.2f%% of Max)\\\",\\r\\n        //                 target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)\\r\\n\\r\\n        //         if (oldSec != target.hackDifficulty)\\r\\n        //             ns.tprintf(\\\"  Hack: %s security changed from %.2f to %.2f (min: %.2f)\\\",\\r\\n        //                 target.hostname, oldSec, target.hackDifficulty, target.minDifficulty)\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"dispatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":12,\"server\":\"home\",\"_hash\":\"5f497832fdb533ac5996f4b7912cf8234acdd40fd8e44db2c1713b86709b6b8e\",\"moduleSequenceNumber\":31854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function calcHackRate(ns, hostname, targetname, ramAllowance, simMinutes = 2) {\\r\\n    let env = new HackEnv(ns, targetname, hostname, ramAllowance);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    ns.tprintf(\\\"Running fastSim on %s=>%s\\\", env.hostname, env.targetname)\\r\\n    await env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    //     env.hostname,\\r\\n    //     env.targetname,\\r\\n    //     env.ramAllowance,\\r\\n    //     ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n    // );\\r\\n\\r\\n    return env.simIncome / (env.simTime / 1000);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts()\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcHackRate(ns, host.hostname, targetname, ramAllowance, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys();\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, killing processes on any that are attacking something not in targets and\\r\\n        // removing targets from the target array that are already being attacked\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let dokill = false;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    let attackTargetnameIdx = targetnames.indexOf(psInfo.args[0]);\\r\\n                    if (attackTargetnameIdx === -1) {\\r\\n                        ns.tprintf(\\\"Killing %s running on %s targeting %s\\\", attackScript, hostname, psInfo.args[0]);\\r\\n                        dokill = true;\\r\\n                    } else {\\r\\n                        targetnames.splice(attackTargetnameIdx, 1);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If we're killing on home, make sure to only kill attack scripts so we dont kill ourselves\\r\\n            if (dokill) {\\r\\n                if (hostname !== \\\"home\\\") {\\r\\n                    ns.killall(hostname);\\r\\n                } else {\\r\\n                    for (let psInfo of ps) {\\r\\n                        if (\\r\\n                            psInfo.filename === attackScript ||\\r\\n                            psInfo.filename === \\\"weaken.js\\\" ||\\r\\n                            psInfo.filename === \\\"grow.js\\\" ||\\r\\n                            psInfo.filename === \\\"hack.js\\\"\\r\\n                        ) {\\r\\n                            ns.kill(psInfo.filename, hostname, psInfo.args);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // In case all the targets are accounted for, continue to the next bucket\\r\\n        if (targetnames.length === 0) continue;\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let hostfree = true;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    hostfree = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (hostfree) {\\r\\n                let targetname = targetnames.shift();\\r\\n                ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n\\r\\n                await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n                await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n                if (hostname === \\\"home\\\") {\\r\\n                    let allowedRam = ns.getServerMaxRam(\\\"home\\\") - 48;\\r\\n                    if (allowedRam >= 32) ns.exec(attackScript, hostname, 1, targetname, allowedRam);\\r\\n                    else\\r\\n                        ns.tprintf(\\r\\n                            \\\"WARNING: Not enough max ram on home to safely run script (%d)\\\",\\r\\n                            ns.getServerMaxRam(\\\"home\\\")\\r\\n                        );\\r\\n                } else ns.exec(attackScript, hostname, 1, targetname);\\r\\n            }\\r\\n\\r\\n            if (targetnames.length === 0) break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":18.9,\"server\":\"home\",\"_hash\":\"0cde1b943ec46835fbf48a05be6fb29ff3d3c8aeeb7f8926476e7bf04acbc678\",\"moduleSequenceNumber\":31855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"moduleSequenceNumber\":31856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\tfor (let faction of ns.getPlayer().factions) {\\r\\n\\t\\tlet favor = ns.getFactionFavor(faction)\\r\\n\\t\\tlet fGain = ns.getFactionFavorGain(faction)\\r\\n\\r\\n\\t\\tif (favor > 150)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t\\r\\n\\t\\tlet successStr = \\\"\\\"\\r\\n\\t\\tif (favor + fGain > 150) {\\r\\n\\t\\t\\tsuccessStr = \\\"(SUCCESS)\\\"\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.tprintf(\\\"%s => %.2f + %.2f = %.2f %s\\\", faction, favor, fGain, favor + fGain, successStr)\\r\\n\\t}\\r\\n}\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///a328140d-e4ba-44c4-bea0-713f82610740\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"efb75674e9b79cffd25dd67f44a3b7041e330622b710b46d84919d7c6c852f2b\",\"moduleSequenceNumber\":31857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionFavorGain\",\"cost\":0.75}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostName) {\\r\\n    let server = ns.getServer(hostName);\\r\\n\\r\\n    if (server.hasAdminRights) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!server.sshPortOpen && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.ftpPortOpen && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.httpPortOpen && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.smtpPortOpen && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.sqlPortOpen && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostName);\\r\\n    }\\r\\n\\r\\n    server = ns.getServer(hostName);\\r\\n    if (server.openPortCount >= server.numOpenPortsRequired) {\\r\\n        ns.nuke(hostName);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\",\"filename\":\"gsutil.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"aac5784890703b060a612aba7fa260dea62e594c9ccede0dd98309a01e30a5f3\",\"moduleSequenceNumber\":31859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":32158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 50;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"Weaken\\\",\\r\\n    GW: \\\"Grow and Weaken\\\",\\r\\n    HW: \\\"Hack and Weaken\\\",\\r\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\r\\n};\\r\\n\\r\\nexport class HackEnv {\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostname = \\\"\\\", ramAllowance = -1, highMoney = -1, lowMoney = -1, tspacer = TSPACER) {\\r\\n        this.targetname = targetname;\\r\\n        this.hostname = hostname === \\\"\\\" ? ns.getHostname() : hostname;\\r\\n        this.ramAllowance =\\r\\n            ramAllowance === -1\\r\\n                ? ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)\\r\\n                : ramAllowance < 1\\r\\n                ? (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) * ramAllowance\\r\\n                : ramAllowance;\\r\\n        this.highMoney = highMoney === -1 ? ns.getServerMaxMoney(this.targetname) : highMoney;\\r\\n        this.lowMoney = lowMoney === -1 ? ns.getServerMaxMoney(this.targetname) * 0.5 : lowMoney;\\r\\n        this.tspacer = tspacer; // CONST\\r\\n        this.useAllRam = true;\\r\\n\\r\\n        this.cores = ns.getServer(this.hostname).cpuCores;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.ramPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    async prep(ns) {\\r\\n        if (!ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getWeakenTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getGrowTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getHackTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (debug) {\\r\\n            switch (this.state) {\\r\\n                case HackState.W:\\r\\n                    ns.tprintf(\\r\\n                        \\\"WEAKEN: %s:%s => Lowered Security from %.2f to %.2f (min: %.2f)\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns),\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.GW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Grow %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HW:\\r\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Hack %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HGW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total RAM %.2f/%.2f; Total Cycles %d/%d\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle,\\r\\n                        this.ramPerCycle * this.cycleTotal,\\r\\n                        this.cycleTotal,\\r\\n                        this.cycleMax\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                default:\\r\\n                    // Do Nothing\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    printRamOverride(ns) {\\r\\n        let maxRam = ns.getServerMaxRam(this.hostname);\\r\\n        let ramFraction = maxRam / this.ramAllowance;\\r\\n        ns.tprintf(\\r\\n            \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n            this.ramAllowance,\\r\\n            (this.ramAllowance / maxRam) * 100,\\r\\n            maxRam\\r\\n        );\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = Math.ceil(secDiff / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n\\r\\n        if (this.ramPerCycle > this.ramAllowance || this.useAllRam) {\\r\\n            this.weakenThreads = Math.floor(this.ramAllowance / this.weakenRam);\\r\\n            this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        let growThreadsFull = this.growThreads;\\r\\n        if (this.useAllRam) this.growThreads = Math.floor(this.ramAllowance / this.growRam);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        let useAllRamState = this.useAllRam;\\r\\n        this.useAllRam = true;\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n        this.useAllRam = useAllRamState;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        let setCycle = function () {\\r\\n            if (this.cycleTotal <= 0) return 0;\\r\\n            let ramCycleAllowance = Math.floor((this.ramAllowance / this.cycleTotal) * 100) / 100;\\r\\n            if (ramCycleAllowance < 16) return 0;\\r\\n\\r\\n            this.hackThreads = Math.floor(ramCycleAllowance / this.hackRam);\\r\\n            this.hackThreadStep = Math.floor(this.hackThreads * .01)\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.ramPerCycle =\\r\\n                this.hackThreads * this.hackRam +\\r\\n                this.growThreads * this.growRam +\\r\\n                this.weakenThreadsHack * this.weakenRam +\\r\\n                this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n            let failcycles = 0\\r\\n\\r\\n            if (this.ramPerCycle > ramCycleAllowance) {\\r\\n                let failRatio = ramCycleAllowance / this.ramPerCycle;\\r\\n                this.hackThreads = Math.min(this.hackThreads * (failRatio * 1.1), this.hackThreads);\\r\\n            }\\r\\n\\r\\n            while (this.ramPerCycle > ramCycleAllowance) {\\r\\n                failcycles++;\\r\\n                this.hackThreads -= this.hackThreadStep\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.ramPerCycle =\\r\\n                    this.hackThreads * this.hackRam +\\r\\n                    this.growThreads * this.growRam +\\r\\n                    this.weakenThreadsHack * this.weakenRam +\\r\\n                    this.weakenThreadsGrow * this.weakenRam;\\r\\n            }\\r\\n\\r\\n            //ns.tprintf(\\\"failcycles: %d\\\", failcycles)\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            let cycleIncome = (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\r\\n\\r\\n            return cycleIncome;\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n\\r\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n        // returns 0\\r\\n        let cycleMax;\\r\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n            this.cycleTotal = cycleMax;\\r\\n            cycleIncomes[cycleMax] = setCycle();\\r\\n\\r\\n            if (cycleIncomes[cycleMax] > 0) break;\\r\\n        }\\r\\n        cycleMax++;\\r\\n\\r\\n        // find local maximum of cycleIncomes\\r\\n        // target center value,\\r\\n        //  if value to left of target is larger than target, recenter target to left of current target\\r\\n        //  if value to right of target is larger than target, recenter target to right of current target\\r\\n        //  if values to left and right of target are both less than target, keep target\\r\\n        let cycleMin = 0;\\r\\n        let cycleTarget = 0;\\r\\n        while (true) {\\r\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget - 1;\\r\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                this.cycleTotal = cycleTarget;\\r\\n                cycleIncomes[cycleTarget] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget + 1;\\r\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\r\\n                cycleMin = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\r\\n                cycleMax = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        this.cycleTotal = cycleTarget;\\r\\n        setCycle();\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreads, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, growOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsGrow, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, hackOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n            ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname, cycleOffsetTime); // hack weaken, Start 1st (0ms offset), finish 2nd\\r\\n            ns.exec(\\r\\n                WEAKENNS,\\r\\n                this.hostname,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.targetname,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime\\r\\n            ); // grow weaken, Start 2nd, finish 4th\\r\\n            ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, cycleOffsetTime + growOffsetTime); // Start 3rd, finish 3rd\\r\\n            ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, cycleOffsetTime + hackOffsetTime); // Start 4th, finish 1st\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        let ps = ns.ps(this.hostname);\\r\\n        for (let psInfo of ps) {\\r\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.weakenTime = this.getWeakenTime(ns);\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n        }\\r\\n\\r\\n        if (this.simTime > time) \\r\\n            return this.simIncome;\\r\\n\\r\\n            //x = pow(y, 5)\\r\\n            //y = pow(x, 1/5)\\r\\n\\r\\n        if (!this.doneGrow(ns)) {\\r\\n            this.updateForGW(ns);\\r\\n\\r\\n            while ((this.simTarget.moneyAvailable + 1000) < ns.getServerMaxMoney(this.targetname)) {\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                this.simTime += this.weakenTime + this.tspacer;\\r\\n                this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (this.simTime > time) \\r\\n            return this.simIncome;\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleFullTime;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime)\\r\\n            this.simTime += hackCycles * hwTime\\r\\n            this.simIncome += hackCycles * hwTotal\\r\\n        } else {\\r\\n            hackCycles = Math.floor(timeRemaining / hgwTime)\\r\\n            this.simTime += hackCycles * hgwTime\\r\\n            this.simIncome += hackCycles * hwTotal\\r\\n        }\\r\\n\\r\\n        return this.simIncome;\\r\\n    }\\r\\n}\",\"filename\":\"hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"e47aa2c0806e11aca1088451d53ae0d74e95b0e1071f51ed8114efa63350b062\",\"moduleSequenceNumber\":31861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":31862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, allHosts } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tsetns(ns)\\r\\n    for (let hostname of allHosts()) {\\r\\n\\t\\tif (hostname === \\\"home\\\")\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tns.killall(hostname)\\r\\n\\t}\\r\\n\\tns.killall(\\\"home\\\")\\r\\n}\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"ka.js\",\"url\":\"blob:file:///bf07e7b9-c87c-4fb5-8ceb-74fe905f43f1\"}],\"ramUsage\":2.3,\"server\":\"home\",\"_hash\":\"8ffc66a4f4c782bc2d31acabff1feb05113f9f4d72dcca4fb049cde61623fd38\",\"moduleSequenceNumber\":31905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    filenames.map(function (name) {\\r\\n        if (name.length > maxFileLength) maxFileLength = name.length;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s [RAM: %5.2fGB] %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///e185c00b-752a-4775-bfec-7e12691a2f45\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"moduleSequenceNumber\":31864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nimport { setns, mapHosts, doBuyAndSoftenAll } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    if (stats.agility_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_exp_mult\\\", stats.agility_exp_mult);\\r\\n    if (stats.agility_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_mult\\\", stats.agility_mult);\\r\\n    if (stats.bladeburner_analysis_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_analysis_mult\\\", stats.bladeburner_analysis_mult);\\r\\n    if (stats.bladeburner_max_stamina_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_max_stamina_mult\\\", stats.bladeburner_max_stamina_mult);\\r\\n    if (stats.bladeburner_stamina_gain_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_stamina_gain_mult\\\", stats.bladeburner_stamina_gain_mult);\\r\\n    if (stats.bladeburner_success_chance_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_success_chance_mult\\\", stats.bladeburner_success_chance_mult);\\r\\n    if (stats.charisma_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_exp_mult\\\", stats.charisma_exp_mult);\\r\\n    if (stats.charisma_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_mult\\\", stats.charisma_mult);\\r\\n    if (stats.company_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"company_rep_mult\\\", stats.company_rep_mult);\\r\\n    if (stats.crime_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_money_mult\\\", stats.crime_money_mult);\\r\\n    if (stats.crime_success_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_success_mult\\\", stats.crime_success_mult);\\r\\n    if (stats.defense_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_exp_mult\\\", stats.defense_exp_mult);\\r\\n    if (stats.defense_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_mult\\\", stats.defense_mult);\\r\\n    if (stats.dexterity_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_exp_mult\\\", stats.dexterity_exp_mult);\\r\\n    if (stats.dexterity_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_mult\\\", stats.dexterity_mult);\\r\\n    if (stats.faction_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"faction_rep_mult\\\", stats.faction_rep_mult);\\r\\n    if (stats.hacking_chance_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_chance_mult\\\", stats.hacking_chance_mult);\\r\\n    if (stats.hacking_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_exp_mult\\\", stats.hacking_exp_mult);\\r\\n    if (stats.hacking_grow_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_grow_mult\\\", stats.hacking_grow_mult);\\r\\n    if (stats.hacking_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_money_mult\\\", stats.hacking_money_mult);\\r\\n    if (stats.hacking_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_mult\\\", stats.hacking_mult);\\r\\n    if (stats.hacking_speed_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_speed_mult\\\", stats.hacking_speed_mult);\\r\\n    if (stats.hacknet_node_core_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_core_cost_mult\\\", stats.hacknet_node_core_cost_mult);\\r\\n    if (stats.hacknet_node_level_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_level_cost_mult\\\", stats.hacknet_node_level_cost_mult);\\r\\n    if (stats.hacknet_node_money_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_money_mult\\\", stats.hacknet_node_money_mult);\\r\\n    if (stats.hacknet_node_purchase_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_purchase_cost_mult\\\", stats.hacknet_node_purchase_cost_mult);\\r\\n    if (stats.hacknet_node_ram_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_ram_cost_mult\\\", stats.hacknet_node_ram_cost_mult);\\r\\n    if (stats.strength_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_exp_mult\\\", stats.strength_exp_mult);\\r\\n    if (stats.strength_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_mult\\\", stats.strength_mult);\\r\\n    if (stats.work_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"work_money_mult\\\", stats.work_money_mult);\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = ns.getFactionRep(faction) >= this.rep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n            ? \\\"OWNED\\\"\\r\\n            : this.purchaseable\\r\\n            ? \\\"PURCHASEABLE\\\"\\r\\n            : \\\"\\\";\\r\\n        this.str = `${this.faction}: ${this.name} - ${ns.nFormat(this.price, \\\"$0.000a\\\")} [${ns.nFormat(\\r\\n            this.rep,\\r\\n            \\\"0.000a\\\"\\r\\n        )}] ${installedStr}`;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        if (this.stats.company_rep_mult) return true;\\r\\n        if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" || this.name === \\\"CashRoot Starter Kit\\\" || this.name === \\\"PCMatrix\\\")\\r\\n            return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    doBuyAndSoftenAll();\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n    let incomePerSec = player.money / (player.playtimeSinceLastAug / 1000);\\r\\n\\r\\n    ns.tprintf(`Income: ${ns.nFormat(incomePerSec, \\\"$0.000a\\\")}/s`);\\r\\n\\r\\n    let allFactions = [\\r\\n        // \\\"Illuminati\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        // \\\"The Covenant\\\",\\r\\n        \\\"ECorp\\\",\\r\\n        // \\\"MegaCorp\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        // \\\"Blade Industries\\\",\\r\\n        // \\\"NWO\\\",\\r\\n        // \\\"Clarke Incorporated\\\",\\r\\n        // \\\"OmniTek Incorporated\\\",\\r\\n        // \\\"Four Sigma\\\",\\r\\n        // \\\"KuaiGong International\\\",\\r\\n        // \\\"Fulcrum Secret Technologies\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Sector-12\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        // \\\"Speakers for the Dead\\\",\\r\\n        // \\\"The Dark Army\\\",\\r\\n        // \\\"The Syndicate\\\",\\r\\n        // \\\"Silhouette\\\",\\r\\n        // \\\"Tetrads\\\",\\r\\n        // \\\"Slum Snakes\\\",\\r\\n        \\\"Netburners\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"CyberSec\\\",\\r\\n        // \\\"Bladeburners\\\",\\r\\n        // \\\"Church of the Machine God\\\",\\r\\n    ];\\r\\n\\r\\n    let sortedFactions = player.factions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n\\r\\n    let allPurchaseableAugs = [];\\r\\n    for (let faction of sortedFactions) {\\r\\n        //for (let faction of allFactions) {\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, ns.getFactionRep(faction));\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n\\r\\n    for (let aug of allPurchaseableAugs) {\\r\\n        ns.purchaseAugmentation(aug.faction, aug.name)\\r\\n        ns.tprintf(\\\"%s\\\", aug);\\r\\n    }\\r\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///a3255cb7-aa6d-4bf0-96a6-644fcb277e0b\"}],\"ramUsage\":43.9,\"server\":\"home\",\"_hash\":\"34beb801b613768b33c227ca2efea2ee2d343799eee436fd7bfbe43241e48469\",\"moduleSequenceNumber\":32313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    ns.tprintf(\\\"HELLO PUSHER #3\\\");\\r\\n}\",\"filename\":\"pusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"1cf7271a574913b375ae86f15f8c0f6d35f1bca22e0a039b2bddb19a6ffe39fc\",\"moduleSequenceNumber\":31866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, mapHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    for (const hostName of allHosts()) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    await doBackdoors(ns);\\r\\n}\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///ddd41388-fefd-42c8-9ca8-8171c394b599\"}],\"ramUsage\":8.4,\"server\":\"home\",\"_hash\":\"0970d4484663f0afa74b5cbdf735a0acd1a80d1fe0f7c8d5d58a92513dd4d0a2\",\"moduleSequenceNumber\":31907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer, serverIsHackable, serverMaxMoneySortDesc, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hostnames = allHosts();\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    let hackableHosts = hostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0)\\r\\n        .sort(serverMaxMoneySortDesc);\\r\\n    let rootHostsNoPurchased = hostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => (hostname.indexOf(\\\"pserv\\\") === -1 && hostname !== \\\"home\\\"));\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.js\\\", \\\"home\\\");\\r\\n\\r\\n    let roundRobin = 0;\\r\\n    for (const hostname of rootHostsNoPurchased) {\\r\\n        let execMaxArgs = [\\\"hack_me.js\\\", hostname, hackableHosts[roundRobin % hackableHosts.length]];\\r\\n        ns.tprintf(\\\"%s %s %s\\\", \\\"exec_maxjns\\\", \\\"home\\\", execMaxArgs.toString());\\r\\n\\r\\n        while (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") < ns.getScriptRam(\\\"exec_max.js\\\"))\\r\\n            await ns.sleep(500);\\r\\n\\r\\n        ns.exec(\\\"exec_maxjns\\\", \\\"home\\\", 1, ...execMaxArgs);\\r\\n        roundRobin += 1;\\r\\n    }\\r\\n\\r\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n    let ramSlice = homeRam / hackableHosts.length;\\r\\n    let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam);\\r\\n\\r\\n    if (hackMeHomeThreads <= 0) return;\\r\\n    for (const hostName of hackableHosts) {\\r\\n        ns.exec(\\\"hack_me.js\\\", \\\"home\\\", 1, hostName, ramSlice);\\r\\n    }\\r\\n}\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"1c52e2e782f18832fed1d8c762765990cfb35fb902803f608e7718213e8ab3ad\",\"moduleSequenceNumber\":31868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\nconst debug = false;\\r\\n\\r\\n// TODO: Manage multiple target/host combos from a single manager\\r\\n// TODO: Incorporate sim into deciding to use GW/HW vs HGW\\r\\n// TODO: Incorporate eff's bucket/target search algorithm\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!ns.args[0]) {\\r\\n        ns.tprintf(\\\"ERROR: No target server defined\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new HackEnv(ns, ns.args[0], ns.args[2], ns.args[1]);\\r\\n    await env.prep(ns);\\r\\n\\r\\n    if (debug) env.printRamOverride(ns);\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", env.ramAllowance);\\r\\n\\r\\n    env.simEnabled = false;\\r\\n    if (env.simEnabled) {\\r\\n        while (env.simTime < 1000 * 60 * 2) {\\r\\n            env.refresh(ns);\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"Time Elapsed: %s; Income %s | %s/s\\\",\\r\\n            ns.tFormat(env.simTime),\\r\\n            ns.nFormat(env.simIncome, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n        );\\r\\n    } else {\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(TSPACER);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack_env.js\",\"url\":\"blob:file:///227cdb1d-fa5a-4555-8014-8188396f6710\"},{\"filename\":\"super_hack_adv.js\",\"url\":\"blob:file:///73318a39-15a1-4461-bae7-f27b4876ed04\"}],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"7a0a9ec1ba5a67c700e1d90cc49bc45db65ad8a37ff8436b5be6a3afd66d510a\",\"moduleSequenceNumber\":31869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// THIS IS A TEST\\r\\n\\r\\nfunction printServer(ns, serverArg) {\\r\\n    let server = serverArg;\\r\\n    if (server instanceof String) server = ns.getServer(server);\\r\\n\\r\\n    let labelBuffer = 23;\\r\\n\\r\\n    ns.tprintf(server.hostname + \\\":\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Root Access\\\", server.hasAdminRights ? \\\"TRUE\\\" : \\\"FALSE\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Money\\\", ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\r\\n        \\\"  %23s: %s/%s\\\",\\r\\n        \\\"Available Money\\\",\\r\\n        ns.nFormat(server.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(server.moneyMax * 0.75, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %23s: %.2f\\\", \\\"Hack Difficulty\\\", server.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %.2f%%\\\", \\\"Hack Chance\\\", ns.hackAnalyzeChance(server.hostname) * 100);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (MIN)\\\", server.minDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (BASE)\\\", server.baseDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Hacking Requirement\\\", server.requiredHackingSkill);\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports\\\", server.openPortCount)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports Required\\\", server.numOpenPortsRequired)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Ram\\\", server.maxRam)\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    // let env = new HackEnv(ns, \\\"max-hardware\\\", \\\"rothman-uni\\\");\\r\\n    // env.simEnabled = true;\\r\\n\\r\\n    // // simulate for 10 minutes\\r\\n    // env.fastSim(ns, 1000 * 60 * 100);\\r\\n\\r\\n    // ns.tprintf(\\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    // env.hostname, env.targetname, env.ramAllowance, ns.nFormat(env.simIncome / env.simTime, \\\"($0.000a)\\\"),)\\r\\n\\r\\n    printServer(ns, \\\"foodnstuff\\\")\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"d3f157ac41516c1a02cd75c52012b523249c34cc63b79e9de9e91fd773e33356\",\"moduleSequenceNumber\":31870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns;\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts() {\\r\\n    return Object.keys(mapHosts());\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortDesc(a, b) {\\r\\n    return ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a)\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortAsc(a, b) {\\r\\n    return ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b)\\r\\n}\\r\\n\\r\\nexport function doProgramBuys() {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\n\\r\\nexport function doBuyAndSoftenAll() {\\r\\n    doProgramBuys()\\r\\n    for (const hostname of allHosts()) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"30670f52320d5317f580fb482aac2b3ad3723692230bd443c0268ef0f84854e7\",\"moduleSequenceNumber\":31871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nfunction calcIncome(ns, target, allHostnames, simMinutes = 2) {\\r\\n    return new SuperHackEnv(ns, target, allHostnames.filter(canExecuteOnServer)).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    // ns.exec(\\\"buy_programs.js\\\", \\\"home\\\")\\r\\n    // await ns.sleep(500)\\r\\n    // ns.exec(\\\"soften.js\\\", \\\"home\\\")\\r\\n    // await ns.sleep(500)\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n\\r\\n    let orderedTargetArr = allHostnames\\r\\n        .filter(serverIsHackable).filter((x) => ns.getServerMaxMoney(x) > 1)\\r\\n        .map((x) => [x, calcIncome(ns, x, allHostnames, ns.args[0])])\\r\\n        .sort((a, b) => b[1] - a[1]);\\r\\n\\r\\n    for (const [target, income] of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", target, ns.nFormat(income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n\\r\\n    if (ns.args[1]) {\\r\\n        let env = new SuperHackEnv(ns, orderedTargetArr[0][0], allHostnames.filter(canExecuteOnServer))\\r\\n        await env.init(ns)\\r\\n\\r\\n        while (true) {\\r\\n            env.refresh(ns)\\r\\n            await ns.sleep(20)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"solo.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///1ae6e472-321b-4bfb-b442-751934506bf7\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"solo.js\",\"url\":\"blob:file:///a42b385d-3b6f-46bd-af3d-173b8bf26697\"}],\"ramUsage\":13.4,\"server\":\"home\",\"_hash\":\"dc9adaefb0b542dc1305bdf588d672b536850e4a21878e559e6ceb4caeab25fd\",\"moduleSequenceNumber\":40656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { setns, doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n}\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///6b65c624-dbd1-4681-b7a7-4cb5a77aca70\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"moduleSequenceNumber\":31874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = true;\\r\\nexport const TSPACER = 50;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"Weaken\\\",\\r\\n    GW: \\\"Grow and Weaken\\\",\\r\\n    HW: \\\"Hack and Weaken\\\",\\r\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\r\\n};\\r\\n\\r\\nclass Host {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n        this.reservedScriptCalls = [];\\r\\n\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            let homeram = ns.getServerMaxRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n\\r\\n    getReservedThreadCount() {\\r\\n        let reservedThreadCount = 0;\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            reservedThreadCount += scriptCall.threads;\\r\\n        }\\r\\n\\r\\n        return reservedThreadCount;\\r\\n    }\\r\\n\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, offset: offset });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    executeScripts(ns, target) {\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            ns.exec(scriptCall.script, this.hostname, scriptCall.threads, target, scriptCall.offset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class SuperHackEnv {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n\\r\\n        this.cores = 1; // Simplify\\r\\n\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n\\r\\n        this.updateHosts(ns, hostnames);\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    updateHosts(ns, hostnames) {\\r\\n        if (hostnames)\\r\\n            this.hosts = hostnames\\r\\n                .map((x) => new Host(ns, x, this.threadSize), this)\\r\\n                .filter((x) => x.maxThreads > 0)\\r\\n                .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n\\r\\n        this.maxThreads = 0;\\r\\n        this.hosts.map((x) => (this.maxThreads += x.maxThreads), this);\\r\\n\\r\\n        // if (debug) {\\r\\n        //     this.hosts.map((x) => ns.tprintf(\\\"  %32s: %d\\\", x.hostname, x.maxThreads));\\r\\n        //     ns.tprintf(\\\"Max Threads: %d\\\", this.maxThreads);\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) await host.prep(ns, force);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getWeakenTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getGrowTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getHackTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n\\r\\n        if (debug) {\\r\\n            switch (this.state) {\\r\\n                case HackState.W:\\r\\n                    ns.tprintf(\\r\\n                        \\\"WEAKEN: %s => Lowered Security from %.2f to %.2f (min: %.2f); Total Threads %d\\\",\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns),\\r\\n                        ns.getServerMinSecurityLevel(this.targetname),\\r\\n                        this.threadsPerCycle\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.GW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s => Grow %d; Weaken %d; Total Threads %d\\\",\\r\\n                        this.targetname,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.threadsPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HW:\\r\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s => Hack %d; Weaken %d; Total Threads %d\\\",\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.threadsPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HGW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d/%d; Total Cycles %d/%d\\\",\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.threadsPerCycle,\\r\\n                        this.threadsPerCycle * this.cycleTotal,\\r\\n                        this.cycleTotal,\\r\\n                        this.cycleMax\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                default:\\r\\n                    // Do Nothing\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) + 100 >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = this.maxThreads;\\r\\n\\r\\n        this.threadsPerCycle = this.weakenThreads;\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        let growThreadsFull = this.calcGrowThreads(ns);\\r\\n        this.growThreads = this.maxThreads;\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        console.time(`updateForHGW ${this.targetname}`);\\r\\n        console.time(`updateForHGW PRE ${this.targetname}`);\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n        console.timeEnd(`updateForHGW PRE ${this.targetname}`);\\r\\n\\r\\n        let hackReduceCounter = 0;\\r\\n        let setCycle = function () {\\r\\n            if (this.cycleTotal <= 0) return 0;\\r\\n            let cycleThreadAllowance = Math.floor((this.maxThreads / this.cycleTotal) * 100) / 100;\\r\\n\\r\\n            this.hackThreads = cycleThreadAllowance;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.threadsPerCycle =\\r\\n                this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n            // attempt to estimate the optimal number of hack threads by reducing the hack thread count\\r\\n            // by the current ratio of hack threads to grow + weaken threads. Overestimate a little bit\\r\\n            // and let the reducer take care of the extra.\\r\\n            if (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n                //let hackRatio = this.maxThreads * (this.hackThreads / this.threadsPerCycle);\\r\\n                //this.hackThreads = Math.min(this.maxThreads * hackRatio * 1.1, this.hackThreads);\\r\\n                this.hackThreads = cycleThreadAllowance * (this.hackThreads / this.threadsPerCycle);\\r\\n            }\\r\\n\\r\\n            while (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n                hackReduceCounter++\\r\\n                this.hackThreads--;\\r\\n\\r\\n                if (this.hackThreads <= 0) return 0;\\r\\n\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.threadsPerCycle =\\r\\n                    this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n            }\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            return (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n\\r\\n        console.time(`updateForHGW Cycle Max Calc ${this.targetname}`);\\r\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n        // returns 0\\r\\n        let cycleMax;\\r\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n            this.cycleTotal = cycleMax;\\r\\n            cycleIncomes[cycleMax] = setCycle();\\r\\n\\r\\n            if (cycleIncomes[cycleMax] > 0) break;\\r\\n        }\\r\\n        cycleMax++;\\r\\n\\r\\n        console.timeEnd(`updateForHGW Cycle Max Calc ${this.targetname}`);\\r\\n\\r\\n        console.time(`updateForHGW Cycle Target Calc ${this.targetname}`);\\r\\n\\r\\n        // find local maximum of cycleIncomes\\r\\n        // target center value,\\r\\n        //  if value to left of target is larger than target, recenter target to left of current target\\r\\n        //  if value to right of target is larger than target, recenter target to right of current target\\r\\n        //  if values to left and right of target are both less than target, keep target\\r\\n        let cycleMin = 0;\\r\\n        let cycleTarget = 0;\\r\\n        let cycleSearch = 0;\\r\\n        while (true) {\\r\\n            cycleSearch++;\\r\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget - 1;\\r\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                this.cycleTotal = cycleTarget;\\r\\n                cycleIncomes[cycleTarget] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget + 1;\\r\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\r\\n                cycleMin = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\r\\n                cycleMax = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        this.cycleTotal = cycleTarget;\\r\\n        setCycle();\\r\\n        console.log(`${this.targetname} cycleSearch: ${cycleSearch}; hackReduceCounter: ${hackReduceCounter}`);\\r\\n\\r\\n        console.timeEnd(`updateForHGW Cycle Target Calc ${this.targetname}`);\\r\\n\\r\\n        console.timeEnd(`updateForHGW ${this.targetname}`);\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    reserveThreadsForExecution(ns, script, threads, offset = 0) {\\r\\n        let unallocatedThreads = threads;\\r\\n        for (const host of this.hosts) {\\r\\n            unallocatedThreads -= host.tryReserveThreads(ns, script, unallocatedThreads, offset);\\r\\n            if (unallocatedThreads === 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", threads - unallocatedThreads, threads, script);\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    execute(ns) {\\r\\n        for (const host of this.hosts) {\\r\\n            host.executeScripts(ns, this.targetname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            ns.tprintf(\\\"WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true));\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreads);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            ns.tprintf(\\\"GROW-WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true));\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, growOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsGrow);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.tprintf(\\r\\n                \\\"HACK-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                ns.tFormat(this.simTime, true),\\r\\n                ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, hackOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack);\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime + this.tspacer;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.tprintf(\\r\\n                \\\"HACK-GROW-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                ns.tFormat(this.simTime, true),\\r\\n                ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n            this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack, cycleOffsetTime);\\r\\n            this.reserveThreadsForExecution(\\r\\n                ns,\\r\\n                WEAKENNS,\\r\\n                this.weakenThreadsGrow,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime\\r\\n            );\\r\\n            this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, cycleOffsetTime + hackOffsetTime);\\r\\n            this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, cycleOffsetTime + growOffsetTime);\\r\\n        }\\r\\n\\r\\n        this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let ps = ns.ps(host.hostname);\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                    return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.tprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.tprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.tprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.tprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13,\"server\":\"home\",\"_hash\":\"bf95505e505a52070f8326f3012c100a5dfb4f668aac89961b8a17d27263a8f2\",\"moduleSequenceNumber\":40655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"58.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":20428505690,\"moneyMax\":1021425284500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"5.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":25722934259.5,\"moneyMax\":1286146712975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1142,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"91.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":12839935850.5,\"moneyMax\":641996792525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1113,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"50.4.3.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106680,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":292,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":17628514472,\"moneyMax\":881425723600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1150,\"serverGrowth\":64}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"31.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":12349633016,\"moneyMax\":617481650800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1128,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"11.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":10584488311.5,\"moneyMax\":529224415575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1079,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"90.3.0.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106679,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":292,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":8693766228,\"moneyMax\":434688311400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"16.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":110,\"hackDifficulty\":110,\"minDifficulty\":37,\"moneyAvailable\":8361355790.5,\"moneyMax\":418067789525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1213,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"25.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":11684724140.5,\"moneyMax\":584236207025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1125,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"37.2.6.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106681,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":292,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":845307367,\"moneyMax\":42265368350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"67.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1524,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"16.7.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":511743559,\"moneyMax\":25587177950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":976,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-460955.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[145,196,68,13,64,29,129,166,16,25,33,160,3,108,191,98,25,107,188,103,34,170,158,1,146,118,196,85,33,190,137,105,41],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"99.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":453787219,\"moneyMax\":22689360950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1012,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"97.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":327393321,\"moneyMax\":16369666050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":35}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903675.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"41167169165\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"9.7.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106682,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":146,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":326494441,\"moneyMax\":16324722050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"37.0.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106691,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":387413994.5,\"moneyMax\":19370699725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"73.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":467839691.5,\"moneyMax\":23391984575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"61.4.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106694,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":566929054,\"moneyMax\":28346452700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":877,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"54.4.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106690,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":397642912,\"moneyMax\":19882145600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"18.8.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106692,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":261993539.5,\"moneyMax\":13099676975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":87}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638177.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[15,9,46,15,32,28,30,11,4,18,32,33],[17,3,35,37,30,23,38,37,8,3,25,49],[32,25,38,19,13,27,5,13,29,29,41,16],[30,31,17,47,28,7,34,1,32,6,47,43],[8,25,12,31,14,24,11,47,46,2,31,44],[5,35,46,17,7,50,26,28,18,36,30,5],[37,15,42,17,35,29,31,47,24,50,5,47],[21,37,17,6,47,26,8,5,4,5,41,37],[25,24,12,1,46,45,7,37,4,26,16,45],[31,10,24,44,25,40,34,27,43,9,4,2],[32,29,10,50,8,6,12,34,15,9,28,23]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"73.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":437026493.5,\"moneyMax\":21851324675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511155.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-10,7,-3,-3,2,6,10,2,7,1],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-53644.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[79,51,87,158,125,193,172,6,188,38,20,18,160,12,32,4,152,56,196,71,92,186,160,192,1,53,38,5,88,193,3,118,182,193,97,36,7,200,87,54,72],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645429.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-6,0,-6,9,-4,-1,2,3,-5,10,8,-5,-10,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"41.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":415579270.5,\"moneyMax\":20778963525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":86}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"85.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":508653656,\"moneyMax\":25432682800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"25.2.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106701,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":493715199,\"moneyMax\":24685759950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"35.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":522604510.5,\"moneyMax\":26130225525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":777,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"66.2.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":420824649,\"moneyMax\":21041232450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":785,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"28.6.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106684,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":388847647,\"moneyMax\":19442382350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"21.8.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":716964617,\"moneyMax\":35848230850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"32.3.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106720,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":32579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":831972209,\"moneyMax\":41598610450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":805,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"40.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":574219816,\"moneyMax\":28710990800,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"88.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":672937052,\"moneyMax\":33646852600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752414.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,13],[19,21],[6,15],[14,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"10.4.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106714,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":532340297,\"moneyMax\":26617014850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424396-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[111,102,96,195,39,46,196,189,188,108,4,193,99,170,30,167,28,119,27,114,179,21,172,18,168,12,55]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"91.3.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106688,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":383295630,\"moneyMax\":19164781500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":704,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"27.6.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106699,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106,\"hackDifficulty\":106,\"minDifficulty\":35,\"moneyAvailable\":340454397.5,\"moneyMax\":17022719875,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":494,\"serverGrowth\":43}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"80.1.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106712,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":340370454.5,\"moneyMax\":17018522725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":545,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"11.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106702,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":173858353,\"moneyMax\":8692917650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":415,\"serverGrowth\":30}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"65.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106713,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":95020293.5,\"moneyMax\":4751014675,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"11.4.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106718,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":32567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":458767794,\"moneyMax\":22938389700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"25.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106700,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":34106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":171656424.5,\"moneyMax\":8582821225,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":444,\"serverGrowth\":43}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"18.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":230092791.5,\"moneyMax\":11504639575,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":559,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736596.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[25,18,4,34,38,14,31,14,48,50,1,9,18,47,15],[9,42,47,28,1,22,13,16,41,36,32,24,2,16,33],[28,4,4,3,23,40,50,39,22,35,32,22,37,15,16]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"0.1.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106693,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":267519711,\"moneyMax\":13375985550,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":423,\"serverGrowth\":48}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-15565.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,18,91,164,146,5,93,15,32,47,106,31,140,33,196,75,196,2,156,114,145,40,45,28,115,123,111,117,52,41,98],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-861346.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"23.3.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106696,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":99332425,\"moneyMax\":4966621250,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":304,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958058-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,1,0],[1,0,0,0,0],[1,0,1,0,0],[0,0,0,0,0],[1,0,0,1,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"78.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":115236760,\"moneyMax\":5761838000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":314,\"serverGrowth\":49}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"72.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106707,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":389,\"serverGrowth\":48}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"28.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":40452810.5,\"moneyMax\":2022640525,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":262,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"73.8.8.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106721,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":31949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"84.0.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106708,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"46.3.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106710,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":34112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"38.7.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106711,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":34431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57291-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"89.1.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106697,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"4.2.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106709,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":34111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"2.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106706,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"44.0.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106687,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"42.2.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106716,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"74.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106717,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":32164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":31956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-535631-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,3,2,0,0,2,0,0,9,8,7,0,0,6,0,8,4,10,2,0,4,2],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"98.8.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106698,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.084000000000001,\"minDifficulty\":13,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-753271.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"67.0.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106705,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"97.8.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106703,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":34108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":1695540225,\"moneyMax\":1695540225,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":182,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"91.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":20855728,\"moneyMax\":1042786400,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":262,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"12.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106704,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-491330.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"133216129224\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"3.5.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106683,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":110,\"hackDifficulty\":110,\"minDifficulty\":37,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":497,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"98.3.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106695,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1053,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32834-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[123,137,169,186,10,98,135,12,10,95,121,128,129,134,173,118,161,38,124,16,178,173,143,62,108,112,184,1,36,160,75,22,90,24,141,150,70,171,43,152,56,26,68,35],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"7.0.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":729,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"72.4.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106685,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"54.1.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106689,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"65.9.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106686,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"83.3.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106715,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":33943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":518,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"73.0.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106719,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":33947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":32614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":32573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"31.7.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"88.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"42.4.2.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"98.9.3.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106662,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"30.5.9.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106663,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"98.1.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106664,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"18.4.6.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106665,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"73.2.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106666,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"84.8.3.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106667,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"48.5.5.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106668,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"37.6.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106669,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"81.4.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106670,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"63.3.2.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106671,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"88.0.7.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106672,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"99.7.0.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106673,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"82.0.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106674,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"76.4.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106675,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"74.2.5.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106676,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"35.1.8.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106677,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"91.0.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106678,\"ramUsage\":1.75,\"server\":\"pserv-24\",\"threads\":585,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":35293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":35291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-24\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":35292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"71.5.6.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106654,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":37449,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"26.0.5.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106655,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":18724,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"50.2.5.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106656,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":4681,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"18.7.4.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106657,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4681,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"57.4.9.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106658,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":4681,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"61.9.5.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106659,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":4681,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"61.6.0.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106660,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":4681,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"29.7.4.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":106661,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":2340,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1361817c-6b1c-493b-b933-51dfe7733cd8\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":43248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aa485604-70f0-4174-8233-d78a427893b0\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":41384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a306525d-fa6f-4ca7-bce4-3b9e10cb568d\"}],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":44100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":238863.93810751583,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":0.45233916032332305}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0.2522,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":4352.399144660084}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0.2522,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":12764.151578417795}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":10.16255313526399}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0.5257,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":4480.7850572905145}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":12.3622,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":21.032,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":15904.781644444756}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"brute\":\"home; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; killall; run starter.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"eff\":\"run eff.ns\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"solo\":\"run solo.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642016579302","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642090674246"}}