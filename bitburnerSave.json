{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1632,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":165,\"intelligence\":62,\"hacking_chance_mult\":2.3281467046974376,\"hacking_speed_mult\":2.3165192512628314,\"hacking_money_mult\":3.642678517553813,\"hacking_grow_mult\":2.399656467426755,\"hacking_exp\":1548226868.1105497,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":6767.915900842467,\"intelligence_exp\":3118.1500000000124,\"hacking_mult\":3.4205180406871767,\"strength_mult\":2.044151805585754,\"defense_mult\":1.7775233092050033,\"dexterity_mult\":2.044151805585754,\"agility_mult\":1.7775233092050033,\"charisma_mult\":1.9552756401255038,\"hacking_exp_mult\":4.515828558211464,\"strength_exp_mult\":2.248566986144329,\"defense_exp_mult\":2.248566986144329,\"dexterity_exp_mult\":2.248566986144329,\"agility_exp_mult\":2.248566986144329,\"charisma_exp_mult\":2.248566986144329,\"company_rep_mult\":2.968108421710515,\"faction_rep_mult\":2.248566986144328,\"money\":1814452326155.5469,\"city\":\"Aevum\",\"location\":\"Bachman & Associates\",\"jobs\":{\"Bachman & Associates\":\"IT Intern\"},\"companyName\":\"Bachman & Associates\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"NiteSec\",\"BitRunners\",\"CyberSec\",\"Tian Di Hui\",\"Chongqing\",\"Bachman & Associates\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.7775233092050033,\"crime_success_mult\":1.7775233092050033,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Bachman & Associates\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.6773742837317195,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":3.983940762464619,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":18770.583301638126,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":109906.60467458869,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":5557400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.9552756401255038,\"hacknet_node_money_mult\":1.7775233092050033,\"hacknet_node_purchase_cost_mult\":0.5167659834707579,\"hacknet_node_ram_cost_mult\":0.5167659834707579,\"hacknet_node_core_cost_mult\":0.5167659834707579,\"hacknet_node_level_cost_mult\":0.5167659834707579,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1642009093144,\"totalPlaytime\":2301932000,\"playtimeSinceLastAug\":38357000,\"playtimeSinceLastBitnode\":145791600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1814721091720,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1814452325155.5469,\"work\":19033435.191217076,\"servers\":0,\"other\":-287800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8499143967136.472,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2729609540739.168,\"work\":33918327.863283806,\"servers\":-3784554203867.2334,\"other\":-1436600000,\"augmentations\":-1983577540843.5776}},\"scriptProdSinceLastAug\":1814721091720,\"exploits\":[],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":34159.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0.98],\"dataMap\":{},\"filename\":\"super_hack_adv.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58373316.992853485,\"onlineMoneyMade\":656338427710,\"onlineRunningTime\":2161.4100000002254,\"pid\":129541,\"ramUsage\":13.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack_env.js\",\"url\":\"blob:file:///69d1c9b9-c974-4ff1-a398-a7d36451d5e4\"},{\"filename\":\"super_hack_adv.js\",\"url\":\"blob:file:///5a1822b0-919a-4e13-8227-afc437bf3903\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",2200],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134345,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",2300],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134346,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5933.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134347,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",15961.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134348,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",2000],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134349,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",2100],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134350,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5733.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134351,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",15761.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134352,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1800],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134353,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1900],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134354,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5533.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134355,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",15561.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134356,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1600],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134357,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1700],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134358,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5333.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134359,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",15361.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134360,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1400],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134361,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1500],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134362,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5133.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134363,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",15161.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134364,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1200],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134365,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1300],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134366,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4933.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134367,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",14961.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134368,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1000],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134369,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1100],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134370,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4733.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134371,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",14761.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134372,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",800],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134373,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",900],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134374,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4533.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134375,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",14561.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134376,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",600],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134377,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",700],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134378,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4333.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134379,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",14361.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134380,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",400],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134381,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",500],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134382,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4133.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134383,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",14161.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134384,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",200],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134385,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",300],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134386,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",3933.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134387,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",13961.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134388,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134389,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",100],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134390,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",3733.010556212039],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134391,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1061,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",13761.289585795148],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":134392,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":490,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\",\"moduleSequenceNumber\":5676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\",\"moduleSequenceNumber\":5677}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nfunction canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction matchWeakenTarget(a, target) {\\r\\n    let epsilon = 0.1;\\r\\n    let targetMin = target - epsilon;\\r\\n    let targetMax = target + epsilon;\\r\\n\\r\\n    return a > targetMin && a < targetMax;\\r\\n}\\r\\n\\r\\nfunction assessHack(hostNames) {\\r\\n    let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort);\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\");\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\");\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\");\\r\\n\\r\\n    let fundThres = 0.9;\\r\\n    let targetServer = ns.getServer(hackableHosts[0]);\\r\\n    let targetFunds = targetServer.moneyMax * fundThres;\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetFunds / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s [%2.0f%% | %s]\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetFunds, \\\"($0.000a)\\\"),\\r\\n        fundThres * 100,\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    const hostSet = new Set([\\\"home\\\"]);\\r\\n    let hostQueue = [\\\"home\\\"];\\r\\n    let currentHost;\\r\\n    while ((currentHost = hostQueue.shift())) {\\r\\n        let newHosts = ns.scan(currentHost);\\r\\n\\r\\n        for (const newHost of newHosts) {\\r\\n            if (!hostSet.has(newHost)) {\\r\\n                hostQueue.push(newHost);\\r\\n                hostSet.add(newHost);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let hostNames = Array.from(hostSet);\\r\\n    //assessHack(hostNames)\\r\\n\\r\\n    let serverName = ns.args[0];\\r\\n    let targetServer = ns.getServer(serverName);\\r\\n    assessHack([targetServer.hostname]);\\r\\n}\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///e3c6ab8b-f8e7-4e44-9919-2be12813a997\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"67ebd2a2a1874cbfb99eea96a7bf1512b54923111c2710da7967eb61809eceb3\",\"moduleSequenceNumber\":5988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///bcc2727e-5471-4878-a40d-a0d7c9c5eac3\"}],\"ramUsage\":11.25,\"server\":\"home\",\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"moduleSequenceNumber\":5961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n\\t\\tthis.print(ns)\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hosts = mapHosts();\\r\\n    let ccts = [];\\r\\n    for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n        let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n        if (ls.length === 0) continue;\\r\\n\\r\\n        ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n    }\\r\\n\\r\\n    sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n    for (const cct of ccts) {\\r\\n        cct.solve(ns);\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"moduleSequenceNumber\":5873}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction printServer(serverArg) {\\r\\n    let server = serverArg;\\r\\n    if (server instanceof String) server = ns.getServer(server);\\r\\n\\r\\n    let labelBuffer = 23;\\r\\n\\r\\n    ns.tprintf(server.hostname + \\\":\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Root Access\\\", server.hasAdminRights ? \\\"TRUE\\\" : \\\"FALSE\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Money\\\", ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\r\\n        \\\"  %23s: %s/%s\\\",\\r\\n        \\\"Available Money\\\",\\r\\n        ns.nFormat(server.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(server.moneyMax * 0.75, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %23s: %.2f\\\", \\\"Hack Difficulty\\\", server.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %.2f%%\\\", \\\"Hack Chance\\\", ns.hackAnalyzeChance(server.hostname) * 100);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (MIN)\\\", server.minDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (BASE)\\\", server.baseDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Hacking Requirement\\\", server.requiredHackingSkill);\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports\\\", server.openPortCount)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports Required\\\", server.numOpenPortsRequired)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Ram\\\", server.maxRam)\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nasync function hackHost(hostName, targetName) {\\r\\n    const hostServer = ns.getServer(hostName);\\r\\n    const targetServer = ns.getServer(targetName);\\r\\n\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.js\\\");\\r\\n    let hackThreads = Math.floor(hostServer.maxRam / hackMeRam);\\r\\n\\r\\n    if (hackThreads === 0) {\\r\\n        ns.tprint(hostName + \\\" unable to execute hack_me.js (\\\" + hostServer.maxRam + \\\"/\\\" + hackMeRam + \\\")\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    ns.tprint(\\r\\n        \\\"Running hack_me.js on \\\" +\\r\\n            hostName +\\r\\n            \\\" on \\\" +\\r\\n            hackThreads +\\r\\n            \\\" threads, targeting \\\" +\\r\\n            targetName +\\r\\n            \\\" [\\\" +\\r\\n            ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\") +\\r\\n            \\\"]\\\"\\r\\n    );\\r\\n    ns.killall(hostName);\\r\\n    await ns.scp(\\\"hack_me.js\\\", \\\"home\\\", hostName);\\r\\n    ns.exec(\\\"hack_me.js\\\", hostName, hackThreads, targetName);\\r\\n}\\r\\n\\r\\nfunction listServers(hosts) {\\r\\n    let hostNames = Object.keys(hosts);\\r\\n    let hackableHosts = hostNames.sort(serverValueSort);\\r\\n\\r\\n    for (const hostName of hackableHosts) {\\r\\n        const server = ns.getServer(hostName);\\r\\n        const rootStr = server.hasAdminRights ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= server.requiredHackingSkill ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        let trailStr = \\\"\\\";\\r\\n        // for (const i of hosts[hostName]) {\\r\\n        //     if (i === hosts[hostName][hosts[hostName].length - 1]) trailStr += `${i}`;\\r\\n        //     else trailStr += `${i}.`;\\r\\n        // }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6d %.2f %s\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"),\\r\\n            server.requiredHackingSkill,\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            server.maxRam,\\r\\n            Math.ceil(ns.getWeakenTime(server.hostname) / 1000) / 60,\\r\\n            trailStr\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction mapHosts(hosts, parents, current) {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hosts = {};\\r\\n    mapHosts(hosts, [], \\\"home\\\");\\r\\n\\r\\n    listServers(hosts);\\r\\n\\r\\n    //await distributeHack(hostNames)\\r\\n\\r\\n    //let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort)\\r\\n    //printServer(ns.getServer(hackableHosts[0]))\\r\\n}\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"crawl.js\",\"url\":\"blob:file:///cf8e0122-4e1d-4dfb-8987-d80e0507a882\"}],\"ramUsage\":7.4,\"server\":\"home\",\"_hash\":\"2a0a863110304804284986e6d7e6004b6b3d910c1c18717b1342eb1d9ca27363\",\"moduleSequenceNumber\":6212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var debug = false;\\r\\n\\r\\nfunction fltEq(a, b) {\\r\\n    let epsilon = 0.05;\\r\\n    return a > b - epsilon && a < b + epsilon;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doWeaken(ns, _hostname, _targetname, ramAllowance) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let weakenThreads = Math.min(\\r\\n        Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread),\\r\\n        Math.floor(ramAllowance / weakenRam)\\r\\n    );\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        let estSecLevelAfterWeaken = Math.max(\\r\\n            target.minDifficulty,\\r\\n            target.hackDifficulty - weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n        ns.tprintf(\\\"Weaken Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s\\\",\\r\\n            target.hostname,\\r\\n            target.hackDifficulty,\\r\\n            estSecLevelAfterWeaken,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            host.hostname,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let currentMoney = Math.max(1.0, target.moneyAvailable);\\r\\n    let targetGrowMult = highMoney / currentMoney;\\r\\n    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let growThreads = fullGrowThreads + 1,\\r\\n        weakenThreads,\\r\\n        growRamCycle,\\r\\n        growSecIncrease;\\r\\n\\r\\n    do {\\r\\n        growThreads -= 1;\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        growRamCycle = growThreads * growRam + weakenThreads * weakenRam;\\r\\n    } while (growRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Grow Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(currentMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)\\\",\\r\\n            ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(target.moneyMax, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(highMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult,\\r\\n            (growThreads / fullGrowThreads) * 100,\\r\\n            growThreads,\\r\\n            fullGrowThreads\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            growRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHackAndWeaken(ns, _hostname, _targetname) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let hackThreads = fullHackThreads + 1,\\r\\n        weakenThreads,\\r\\n        hackRamCycle;\\r\\n\\r\\n    do {\\r\\n        hackThreads -= 1;\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n    } while (hackRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Hack Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance, tspacer) {\\r\\n    /*//////////// ALGO ////////////\\r\\n        if hackRamCycle is greater than ramAllowance\\r\\n        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio\\r\\n        while hackRamCycle > ramAllowance\\r\\n        recompute everything up to hackRamCycle\\r\\n        if hackRamCycle > ramAllowance\\r\\n            reduce targetHackAmount by .1% of original targetHackAmount\\r\\n    //////////////////////////////*/\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    if (debug) {\\r\\n        ns.tprintf(\\\"Hack Process: \\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(target.moneyAvailable - hackAmount, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramAllowance) {\\r\\n        let failRatio = ramAllowance / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount);\\r\\n        if (debug)\\r\\n            ns.tprintf(\\\"  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)\\\", failRatio * 100, failRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    let cycles = 0;\\r\\n    while (hackRamCycle > ramAllowance) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n        cycles++;\\r\\n    }\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        if (cycles > 0)\\r\\n            ns.tprintf(\\r\\n                \\\"  targetHackAmount ratio: %.0f%%; Cycles: %d\\\",\\r\\n                (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100,\\r\\n                cycles\\r\\n            );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            hackWeakenThreads,\\r\\n            growWeakenThreads,\\r\\n            (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f\\\",\\r\\n            target.hackDifficulty,\\r\\n            target.hackDifficulty + hackSecIncrease + growSecIncrease,\\r\\n            ns.hackAnalyzeSecurity(1),\\r\\n            weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n    }\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tgrow = ns.getGrowTime(target.hostname);\\r\\n    let thack = ns.getHackTime(target.hostname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, hackWeakenThreads, target.hostname, 0); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, growWeakenThreads, target.hostname, tGrowWeakenOffset); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname, tGrowOffset); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname, tHackOffset); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreads(ns, _hostname, _targetname, highMoney, lowMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n    return [hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreadsSmart(ns, _hostname, _targetname, ramAllowance, tspacer) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyMax * 0.9;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let targetCycles = Math.floor(tweakenFullCycle / tCycleSpacer);\\r\\n    let ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n\\r\\n    // dont force a cycle into less than 16GB\\r\\n    while (ramFit < 16) {\\r\\n        targetCycles--;\\r\\n        ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramFit) {\\r\\n        let crunchRatio = ramFit / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (crunchRatio * 1.1), targetHackAmount);\\r\\n        if (debug) ns.tprintf(\\\"  ramFit / hackRamCycle = %.0f%% (%.0f%%)\\\", crunchRatio * 100, crunchRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    while (hackRamCycle > ramFit) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n        let dobreak = false;\\r\\n        if (targetGrowMult < 1) {\\r\\n            targetGrowMult = 1.0000001;\\r\\n            dobreak = true;\\r\\n        }\\r\\n\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n        if (dobreak) break;\\r\\n    }\\r\\n\\r\\n    //if (debug) {\\r\\n    ns.tprintf(\\r\\n        \\\"  Calling Hack (%.4f%% of Max) with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s over %d Cycles\\\",\\r\\n        (hackAmount / target.moneyMax) * 100,\\r\\n        hackThreads,\\r\\n        hackThreads * hackRam,\\r\\n        growThreads,\\r\\n        growThreads * growRam,\\r\\n        hackWeakenThreads,\\r\\n        growWeakenThreads,\\r\\n        (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n        hackRamCycle,\\r\\n        ns.tFormat(tweaken),\\r\\n        targetCycles\\r\\n    );\\r\\n    //}\\r\\n\\r\\n    return [targetCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction launchHGW(\\r\\n    ns,\\r\\n    hostname,\\r\\n    targetname,\\r\\n    tspacer,\\r\\n    tag,\\r\\n    hackWeakenThreads,\\r\\n    growWeakenThreads,\\r\\n    hackThreads,\\r\\n    growThreads\\r\\n) {\\r\\n    let tweaken = ns.getWeakenTime(targetname);\\r\\n    let tgrow = ns.getGrowTime(targetname);\\r\\n    let thack = ns.getHackTime(targetname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, hackWeakenThreads, targetname, 0, tag); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, growWeakenThreads, targetname, tGrowWeakenOffset, tag); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", hostname, growThreads, targetname, tGrowOffset, tag); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", hostname, hackThreads, targetname, tHackOffset, tag); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let ramOverride = ns.args[1];\\r\\n    let _hostname = ns.getHostname();\\r\\n    let _targetname = ns.args[0];\\r\\n    if (!_targetname) _targetname = \\\"lexo-corp\\\";\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let lowThresholdFactor = 0.94;\\r\\n    let highThresholdFactor = 1;\\r\\n    let lowMoney = target.moneyMax * lowThresholdFactor;\\r\\n    let highMoney = target.moneyMax * highThresholdFactor;\\r\\n\\r\\n    if (!ns.fileExists(\\\"grow.js\\\", host.hostname)) await ns.scp(\\\"grow.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"weaken.js\\\", host.hostname)) await ns.scp(\\\"weaken.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"hack.js\\\", host.hostname)) await ns.scp(\\\"hack.js\\\", \\\"home\\\", host.hostname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let ramAllowance = host.maxRam - host.ramUsed;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 48;\\r\\n\\r\\n    if (ramOverride) {\\r\\n        if (ramOverride < 1) {\\r\\n            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0;\\r\\n            if (debug)\\r\\n                ns.tprintf(\\r\\n                    \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n                    ramFraction,\\r\\n                    ramOverride,\\r\\n                    ramAllowance\\r\\n                );\\r\\n            ramAllowance = ramFraction;\\r\\n        } else {\\r\\n            if (debug) ns.tprintf(\\\"Overriding availble host RAM max to %.2f\\\", ramOverride);\\r\\n            ramAllowance = Math.min(ramOverride, ramAllowance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", ramAllowance);\\r\\n\\r\\n    // Weaken to minimum security\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.hackDifficulty > target.minDifficulty) {\\r\\n        doWeaken(ns, host.hostname, target.hostname, ramAllowance);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldHackDifficulty = target.hackDifficulty;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\\"  Lowered Security from %.2f to %.2f\\\", oldHackDifficulty, target.hackDifficulty);\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Grow to high threshold money\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.moneyAvailable < highMoney) {\\r\\n        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldMoney = target.moneyAvailable;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\r\\n                \\\"  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)\\\",\\r\\n                target.hostname,\\r\\n                ns.nFormat(oldMoney, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n                (target.moneyAvailable / target.moneyMax) * 100,\\r\\n                target.hackDifficulty,\\r\\n                target.minDifficulty\\r\\n            );\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Hack the world\\r\\n    let tspacer = 200;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads;\\r\\n    [hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads] = calcHGWThreadsSmart(\\r\\n        ns,\\r\\n        host.hostname,\\r\\n        target.hostname,\\r\\n        ramAllowance,\\r\\n        tspacer\\r\\n    );\\r\\n    while (true) {\\r\\n        for (let i = 0; i < hgwCycles; i++) {\\r\\n            if (i !== 0) await ns.sleep(tCycleSpacer);\\r\\n            launchHGW(\\r\\n                ns,\\r\\n                host.hostname,\\r\\n                target.hostname,\\r\\n                tspacer,\\r\\n                i,\\r\\n                hackWeakenThreads,\\r\\n                growWeakenThreads,\\r\\n                hackThreads,\\r\\n                growThreads\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let sleepTimer = tweakenFullCycle - hgwCycles * tCycleSpacer + tCycleSpacer;\\r\\n        if (sleepTimer > 0) await ns.sleep(sleepTimer);\\r\\n\\r\\n        // while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname, 400, \\\"9\\\")) {\\r\\n        //     await ns.sleep(50)\\r\\n        //     if (debug) {\\r\\n        //         let oldMoney = target.moneyAvailable\\r\\n        //         let oldSec = target.hackDifficulty\\r\\n        //         target = ns.getServer(target.hostname)\\r\\n\\r\\n        //         if (oldMoney != target.moneyAvailable)\\r\\n        //             ns.tprintf(\\\"  Hack: %s available money changed from %s to %s (%.2f%% of Max)\\\",\\r\\n        //                 target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)\\r\\n\\r\\n        //         if (oldSec != target.hackDifficulty)\\r\\n        //             ns.tprintf(\\\"  Hack: %s security changed from %.2f to %.2f (min: %.2f)\\\",\\r\\n        //                 target.hostname, oldSec, target.hackDifficulty, target.minDifficulty)\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"dispatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":12,\"server\":\"home\",\"_hash\":\"5f497832fdb533ac5996f4b7912cf8234acdd40fd8e44db2c1713b86709b6b8e\",\"moduleSequenceNumber\":5879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function calcHackRate(ns, hostname, targetname, ramAllowance, simMinutes = 2) {\\r\\n    let env = new HackEnv(ns, targetname, hostname, ramAllowance);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    ns.tprintf(\\\"Running fastSim on %s=>%s\\\", env.hostname, env.targetname)\\r\\n    await env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    //     env.hostname,\\r\\n    //     env.targetname,\\r\\n    //     env.ramAllowance,\\r\\n    //     ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n    // );\\r\\n\\r\\n    return env.simIncome / (env.simTime / 1000);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts()\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcHackRate(ns, host.hostname, targetname, ramAllowance, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys();\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, killing processes on any that are attacking something not in targets and\\r\\n        // removing targets from the target array that are already being attacked\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let dokill = false;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    let attackTargetnameIdx = targetnames.indexOf(psInfo.args[0]);\\r\\n                    if (attackTargetnameIdx === -1) {\\r\\n                        ns.tprintf(\\\"Killing %s running on %s targeting %s\\\", attackScript, hostname, psInfo.args[0]);\\r\\n                        dokill = true;\\r\\n                    } else {\\r\\n                        targetnames.splice(attackTargetnameIdx, 1);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If we're killing on home, make sure to only kill attack scripts so we dont kill ourselves\\r\\n            if (dokill) {\\r\\n                if (hostname !== \\\"home\\\") {\\r\\n                    ns.killall(hostname);\\r\\n                } else {\\r\\n                    for (let psInfo of ps) {\\r\\n                        if (\\r\\n                            psInfo.filename === attackScript ||\\r\\n                            psInfo.filename === \\\"weaken.js\\\" ||\\r\\n                            psInfo.filename === \\\"grow.js\\\" ||\\r\\n                            psInfo.filename === \\\"hack.js\\\"\\r\\n                        ) {\\r\\n                            ns.kill(psInfo.filename, hostname, psInfo.args);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // In case all the targets are accounted for, continue to the next bucket\\r\\n        if (targetnames.length === 0) continue;\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let hostfree = true;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    hostfree = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (hostfree) {\\r\\n                let targetname = targetnames.shift();\\r\\n                ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n\\r\\n                await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n                await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n                if (hostname === \\\"home\\\") {\\r\\n                    let allowedRam = ns.getServerMaxRam(\\\"home\\\") - 48;\\r\\n                    if (allowedRam >= 32) ns.exec(attackScript, hostname, 1, targetname, allowedRam);\\r\\n                    else\\r\\n                        ns.tprintf(\\r\\n                            \\\"WARNING: Not enough max ram on home to safely run script (%d)\\\",\\r\\n                            ns.getServerMaxRam(\\\"home\\\")\\r\\n                        );\\r\\n                } else ns.exec(attackScript, hostname, 1, targetname);\\r\\n            }\\r\\n\\r\\n            if (targetnames.length === 0) break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"0cde1b943ec46835fbf48a05be6fb29ff3d3c8aeeb7f8926476e7bf04acbc678\",\"moduleSequenceNumber\":5882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.3,\"server\":\"home\",\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"moduleSequenceNumber\":5885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\tfor (let faction of ns.getPlayer().factions) {\\r\\n\\t\\tlet favor = ns.getFactionFavor(faction)\\r\\n\\t\\tlet fGain = ns.getFactionFavorGain(faction)\\r\\n\\r\\n\\t\\tif (favor > 150)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t\\r\\n\\t\\tlet successStr = \\\"\\\"\\r\\n\\t\\tif (favor + fGain > 150) {\\r\\n\\t\\t\\tsuccessStr = \\\"(SUCCESS)\\\"\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.tprintf(\\\"%s => %.2f + %.2f = %.2f %s\\\", faction, favor, fGain, favor + fGain, successStr)\\r\\n\\t}\\r\\n}\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"efb75674e9b79cffd25dd67f44a3b7041e330622b710b46d84919d7c6c852f2b\",\"moduleSequenceNumber\":5888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionFavorGain\",\"cost\":0.75}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2486cac7-7b54-4b76-806e-75040ef1a6fc\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"a115e577515ded544a5ad1016115c47a9bec05ce244e6f186cc7ef2edf195375\",\"moduleSequenceNumber\":6118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostName) {\\r\\n    let server = ns.getServer(hostName);\\r\\n\\r\\n    if (server.hasAdminRights) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!server.sshPortOpen && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.ftpPortOpen && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.httpPortOpen && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.smtpPortOpen && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.sqlPortOpen && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostName);\\r\\n    }\\r\\n\\r\\n    server = ns.getServer(hostName);\\r\\n    if (server.openPortCount >= server.numOpenPortsRequired) {\\r\\n        ns.nuke(hostName);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\",\"filename\":\"gsutil.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"aac5784890703b060a612aba7fa260dea62e594c9ccede0dd98309a01e30a5f3\",\"moduleSequenceNumber\":5894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    let tsleep = ns.args[1];\\r\\n    if (tsleep) await ns.sleep(tsleep);\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e1b803cd-460e-4478-b1c3-20705999a6a0\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"a2659837da951297696686be8913ec9badcb44757ce0388531132cccbd015278\",\"moduleSequenceNumber\":6121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 50;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"Weaken\\\",\\r\\n    GW: \\\"Grow and Weaken\\\",\\r\\n    HW: \\\"Hack and Weaken\\\",\\r\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\r\\n};\\r\\n\\r\\nexport class HackEnv {\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostname = \\\"\\\", ramAllowance = -1, highMoney = -1, lowMoney = -1, tspacer = TSPACER) {\\r\\n        this.targetname = targetname;\\r\\n        this.hostname = hostname === \\\"\\\" ? ns.getHostname() : hostname;\\r\\n        this.ramAllowance =\\r\\n            ramAllowance === -1\\r\\n                ? ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)\\r\\n                : ramAllowance < 1\\r\\n                ? (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) * ramAllowance\\r\\n                : ramAllowance;\\r\\n        this.highMoney = highMoney === -1 ? ns.getServerMaxMoney(this.targetname) : highMoney;\\r\\n        this.lowMoney = lowMoney === -1 ? ns.getServerMaxMoney(this.targetname) * 0.5 : lowMoney;\\r\\n        this.tspacer = tspacer; // CONST\\r\\n        this.useAllRam = true;\\r\\n\\r\\n        this.cores = ns.getServer(this.hostname).cpuCores;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.ramPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    async prep(ns) {\\r\\n        if (!ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getWeakenTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getGrowTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getHackTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (debug) {\\r\\n            switch (this.state) {\\r\\n                case HackState.W:\\r\\n                    ns.tprintf(\\r\\n                        \\\"WEAKEN: %s:%s => Lowered Security from %.2f to %.2f (min: %.2f)\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns),\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.GW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Grow %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HW:\\r\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Hack %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HGW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total RAM %.2f/%.2f; Total Cycles %d/%d\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle,\\r\\n                        this.ramPerCycle * this.cycleTotal,\\r\\n                        this.cycleTotal,\\r\\n                        this.cycleMax\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                default:\\r\\n                    // Do Nothing\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    printRamOverride(ns) {\\r\\n        let maxRam = ns.getServerMaxRam(this.hostname);\\r\\n        let ramFraction = maxRam / this.ramAllowance;\\r\\n        ns.tprintf(\\r\\n            \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n            this.ramAllowance,\\r\\n            (this.ramAllowance / maxRam) * 100,\\r\\n            maxRam\\r\\n        );\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = Math.ceil(secDiff / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n\\r\\n        if (this.ramPerCycle > this.ramAllowance || this.useAllRam) {\\r\\n            this.weakenThreads = Math.floor(this.ramAllowance / this.weakenRam);\\r\\n            this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        let growThreadsFull = this.growThreads;\\r\\n        if (this.useAllRam) this.growThreads = Math.floor(this.ramAllowance / this.growRam);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        let useAllRamState = this.useAllRam;\\r\\n        this.useAllRam = true;\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n        this.useAllRam = useAllRamState;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        let setCycle = function () {\\r\\n            if (this.cycleTotal <= 0) return 0;\\r\\n            let ramCycleAllowance = Math.floor((this.ramAllowance / this.cycleTotal) * 100) / 100;\\r\\n            if (ramCycleAllowance < 16) return 0;\\r\\n\\r\\n            this.hackThreads = Math.floor(ramCycleAllowance / this.hackRam);\\r\\n            this.hackThreadStep = Math.floor(this.hackThreads * .01)\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.ramPerCycle =\\r\\n                this.hackThreads * this.hackRam +\\r\\n                this.growThreads * this.growRam +\\r\\n                this.weakenThreadsHack * this.weakenRam +\\r\\n                this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n            let failcycles = 0\\r\\n\\r\\n            if (this.ramPerCycle > ramCycleAllowance) {\\r\\n                let failRatio = ramCycleAllowance / this.ramPerCycle;\\r\\n                this.hackThreads = Math.min(this.hackThreads * (failRatio * 1.1), this.hackThreads);\\r\\n            }\\r\\n\\r\\n            while (this.ramPerCycle > ramCycleAllowance) {\\r\\n                failcycles++;\\r\\n                this.hackThreads -= this.hackThreadStep\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.ramPerCycle =\\r\\n                    this.hackThreads * this.hackRam +\\r\\n                    this.growThreads * this.growRam +\\r\\n                    this.weakenThreadsHack * this.weakenRam +\\r\\n                    this.weakenThreadsGrow * this.weakenRam;\\r\\n            }\\r\\n\\r\\n            //ns.tprintf(\\\"failcycles: %d\\\", failcycles)\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            let cycleIncome = (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\r\\n\\r\\n            return cycleIncome;\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n\\r\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n        // returns 0\\r\\n        let cycleMax;\\r\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n            this.cycleTotal = cycleMax;\\r\\n            cycleIncomes[cycleMax] = setCycle();\\r\\n\\r\\n            if (cycleIncomes[cycleMax] > 0) break;\\r\\n        }\\r\\n        cycleMax++;\\r\\n\\r\\n        // find local maximum of cycleIncomes\\r\\n        // target center value,\\r\\n        //  if value to left of target is larger than target, recenter target to left of current target\\r\\n        //  if value to right of target is larger than target, recenter target to right of current target\\r\\n        //  if values to left and right of target are both less than target, keep target\\r\\n        let cycleMin = 0;\\r\\n        let cycleTarget = 0;\\r\\n        while (true) {\\r\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget - 1;\\r\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                this.cycleTotal = cycleTarget;\\r\\n                cycleIncomes[cycleTarget] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget + 1;\\r\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\r\\n                cycleMin = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\r\\n                cycleMax = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        this.cycleTotal = cycleTarget;\\r\\n        setCycle();\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreads, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, growOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsGrow, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, hackOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n            ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname, cycleOffsetTime); // hack weaken, Start 1st (0ms offset), finish 2nd\\r\\n            ns.exec(\\r\\n                WEAKENNS,\\r\\n                this.hostname,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.targetname,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime\\r\\n            ); // grow weaken, Start 2nd, finish 4th\\r\\n            ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, cycleOffsetTime + growOffsetTime); // Start 3rd, finish 3rd\\r\\n            ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, cycleOffsetTime + hackOffsetTime); // Start 4th, finish 1st\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        let ps = ns.ps(this.hostname);\\r\\n        for (let psInfo of ps) {\\r\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.weakenTime = this.getWeakenTime(ns);\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n        }\\r\\n\\r\\n        if (this.simTime > time) \\r\\n            return this.simIncome;\\r\\n\\r\\n            //x = pow(y, 5)\\r\\n            //y = pow(x, 1/5)\\r\\n\\r\\n        if (!this.doneGrow(ns)) {\\r\\n            this.updateForGW(ns);\\r\\n\\r\\n            while ((this.simTarget.moneyAvailable + 1000) < ns.getServerMaxMoney(this.targetname)) {\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                this.simTime += this.weakenTime + this.tspacer;\\r\\n                this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (this.simTime > time) \\r\\n            return this.simIncome;\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleFullTime;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime)\\r\\n            this.simTime += hackCycles * hwTime\\r\\n            this.simIncome += hackCycles * hwTotal\\r\\n        } else {\\r\\n            hackCycles = Math.floor(timeRemaining / hgwTime)\\r\\n            this.simTime += hackCycles * hgwTime\\r\\n            this.simIncome += hackCycles * hwTotal\\r\\n        }\\r\\n\\r\\n        return this.simIncome;\\r\\n    }\\r\\n}\",\"filename\":\"hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"e47aa2c0806e11aca1088451d53ae0d74e95b0e1071f51ed8114efa63350b062\",\"moduleSequenceNumber\":5900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"moduleSequenceNumber\":5903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, allHosts } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tsetns(ns)\\r\\n    for (let hostname of allHosts()) {\\r\\n\\t\\tif (hostname === \\\"home\\\")\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\tns.killall(hostname)\\r\\n\\t}\\r\\n\\tns.killall(\\\"home\\\")\\r\\n}\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:file:///66cfcb8a-626a-4205-97fa-a6c80a82796a\"},{\"filename\":\"ka.js\",\"url\":\"blob:file:///05933b02-2a40-4158-a2c2-67b1ef7219b5\"}],\"ramUsage\":2.3,\"server\":\"home\",\"_hash\":\"8ffc66a4f4c782bc2d31acabff1feb05113f9f4d72dcca4fb049cde61623fd38\",\"moduleSequenceNumber\":22099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    filenames.map(function (name) {\\r\\n        if (name.length > maxFileLength) maxFileLength = name.length;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s [RAM: %5.2fGB] %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///940ba130-0006-4618-b978-668dc58244a1\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"moduleSequenceNumber\":5934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nimport { setns, mapHosts, doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    if (stats.agility_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_exp_mult\\\", stats.agility_exp_mult);\\r\\n    if (stats.agility_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_mult\\\", stats.agility_mult);\\r\\n    if (stats.bladeburner_analysis_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_analysis_mult\\\", stats.bladeburner_analysis_mult);\\r\\n    if (stats.bladeburner_max_stamina_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_max_stamina_mult\\\", stats.bladeburner_max_stamina_mult);\\r\\n    if (stats.bladeburner_stamina_gain_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_stamina_gain_mult\\\", stats.bladeburner_stamina_gain_mult);\\r\\n    if (stats.bladeburner_success_chance_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_success_chance_mult\\\", stats.bladeburner_success_chance_mult);\\r\\n    if (stats.charisma_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_exp_mult\\\", stats.charisma_exp_mult);\\r\\n    if (stats.charisma_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_mult\\\", stats.charisma_mult);\\r\\n    if (stats.company_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"company_rep_mult\\\", stats.company_rep_mult);\\r\\n    if (stats.crime_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_money_mult\\\", stats.crime_money_mult);\\r\\n    if (stats.crime_success_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_success_mult\\\", stats.crime_success_mult);\\r\\n    if (stats.defense_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_exp_mult\\\", stats.defense_exp_mult);\\r\\n    if (stats.defense_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_mult\\\", stats.defense_mult);\\r\\n    if (stats.dexterity_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_exp_mult\\\", stats.dexterity_exp_mult);\\r\\n    if (stats.dexterity_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_mult\\\", stats.dexterity_mult);\\r\\n    if (stats.faction_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"faction_rep_mult\\\", stats.faction_rep_mult);\\r\\n    if (stats.hacking_chance_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_chance_mult\\\", stats.hacking_chance_mult);\\r\\n    if (stats.hacking_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_exp_mult\\\", stats.hacking_exp_mult);\\r\\n    if (stats.hacking_grow_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_grow_mult\\\", stats.hacking_grow_mult);\\r\\n    if (stats.hacking_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_money_mult\\\", stats.hacking_money_mult);\\r\\n    if (stats.hacking_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_mult\\\", stats.hacking_mult);\\r\\n    if (stats.hacking_speed_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_speed_mult\\\", stats.hacking_speed_mult);\\r\\n    if (stats.hacknet_node_core_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_core_cost_mult\\\", stats.hacknet_node_core_cost_mult);\\r\\n    if (stats.hacknet_node_level_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_level_cost_mult\\\", stats.hacknet_node_level_cost_mult);\\r\\n    if (stats.hacknet_node_money_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_money_mult\\\", stats.hacknet_node_money_mult);\\r\\n    if (stats.hacknet_node_purchase_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_purchase_cost_mult\\\", stats.hacknet_node_purchase_cost_mult);\\r\\n    if (stats.hacknet_node_ram_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_ram_cost_mult\\\", stats.hacknet_node_ram_cost_mult);\\r\\n    if (stats.strength_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_exp_mult\\\", stats.strength_exp_mult);\\r\\n    if (stats.strength_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_mult\\\", stats.strength_mult);\\r\\n    if (stats.work_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"work_money_mult\\\", stats.work_money_mult);\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = ns.getFactionRep(faction) >=  this.rep\\r\\n        let installedStr = this.installed ? \\\"INSTALLED\\\" : this.owned ? \\\"OWNED\\\" : this.purchaseable? \\\"PURCHASEABLE\\\" : \\\"\\\";\\r\\n        this.str = `${this.faction}: ${this.name} - ${ns.nFormat(this.price, \\\"$0.000a\\\")} [${ns.nFormat(\\r\\n            this.rep,\\r\\n            \\\"0.000a\\\"\\r\\n        )}] ${installedStr}`;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        if (this.stats.company_rep_mult) return true;\\r\\n        if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (this.name === \\\"BitRunners Neurolink\\\" || this.name === \\\"CashRoot Starter Kit\\\" || this.name === \\\"PCMatrix\\\")\\r\\n            return true;\\r\\n    \\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n    let incomePerSec = player.money / (player.playtimeSinceLastAug / 1000);\\r\\n\\r\\n    ns.tprintf(`Income: ${ns.nFormat(incomePerSec, \\\"$0.000a\\\")}/s`);\\r\\n\\r\\n    let allFactions = [\\r\\n        // \\\"Illuminati\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        // \\\"The Covenant\\\",\\r\\n        \\\"ECorp\\\",\\r\\n        // \\\"MegaCorp\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        // \\\"Blade Industries\\\",\\r\\n        // \\\"NWO\\\",\\r\\n        // \\\"Clarke Incorporated\\\",\\r\\n        // \\\"OmniTek Incorporated\\\",\\r\\n        // \\\"Four Sigma\\\",\\r\\n        // \\\"KuaiGong International\\\",\\r\\n        // \\\"Fulcrum Secret Technologies\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Sector-12\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        // \\\"Speakers for the Dead\\\",\\r\\n        // \\\"The Dark Army\\\",\\r\\n        // \\\"The Syndicate\\\",\\r\\n        // \\\"Silhouette\\\",\\r\\n        // \\\"Tetrads\\\",\\r\\n        // \\\"Slum Snakes\\\",\\r\\n        \\\"Netburners\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"CyberSec\\\",\\r\\n        // \\\"Bladeburners\\\",\\r\\n        // \\\"Church of the Machine God\\\",\\r\\n    ];\\r\\n\\r\\n    let sortedFactions = player.factions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a))\\r\\n\\r\\n    let allPurchaseableAugs = []\\r\\n    for (let faction of sortedFactions) {\\r\\n    //for (let faction of allFactions) {\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug)\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, ns.getFactionRep(faction));\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price)\\r\\n\\r\\n    for (let aug of allPurchaseableAugs) {\\r\\n        //ns.purchaseAugmentation(aug.faction, aug.name)\\r\\n        ns.tprintf(\\\"%s\\\", aug);\\r\\n    }\\r\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:file:///66cfcb8a-626a-4205-97fa-a6c80a82796a\"},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///62a97a50-c27d-4cba-b7ba-e829cb5a4d8e\"}],\"ramUsage\":38.45,\"server\":\"home\",\"_hash\":\"c160495998260c6ac9b516eeac88eae702f34ee8c2ad43e030ee87f332d76630\",\"moduleSequenceNumber\":6868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    ns.tprintf(\\\"HELLO PUSHER #3\\\");\\r\\n}\",\"filename\":\"pusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"1cf7271a574913b375ae86f15f8c0f6d35f1bca22e0a039b2bddb19a6ffe39fc\",\"moduleSequenceNumber\":5915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { allHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns)\\r\\n\\r\\n    for (const hostName of allHosts()) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n}\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:file:///66cfcb8a-626a-4205-97fa-a6c80a82796a\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///2f255fa2-c85c-4838-bb3f-c5fcc1ddfada\"}],\"ramUsage\":2.35,\"server\":\"home\",\"_hash\":\"3b914a61b540a3687fb1aaf7ad5e58b6036e942950a1295a677a9ddccc1c45de\",\"moduleSequenceNumber\":6241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer, serverIsHackable, serverMaxMoneySortDesc, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hostnames = allHosts();\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    let hackableHosts = hostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0)\\r\\n        .sort(serverMaxMoneySortDesc);\\r\\n    let rootHostsNoPurchased = hostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => (hostname.indexOf(\\\"pserv\\\") === -1 && hostname !== \\\"home\\\"));\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.js\\\", \\\"home\\\");\\r\\n\\r\\n    let roundRobin = 0;\\r\\n    for (const hostname of rootHostsNoPurchased) {\\r\\n        let execMaxArgs = [\\\"hack_me.js\\\", hostname, hackableHosts[roundRobin % hackableHosts.length]];\\r\\n        ns.tprintf(\\\"%s %s %s\\\", \\\"exec_maxjns\\\", \\\"home\\\", execMaxArgs.toString());\\r\\n\\r\\n        while (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") < ns.getScriptRam(\\\"exec_max.js\\\"))\\r\\n            await ns.sleep(500);\\r\\n\\r\\n        ns.exec(\\\"exec_maxjns\\\", \\\"home\\\", 1, ...execMaxArgs);\\r\\n        roundRobin += 1;\\r\\n    }\\r\\n\\r\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n    let ramSlice = homeRam / hackableHosts.length;\\r\\n    let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam);\\r\\n\\r\\n    if (hackMeHomeThreads <= 0) return;\\r\\n    for (const hostName of hackableHosts) {\\r\\n        ns.exec(\\\"hack_me.js\\\", \\\"home\\\", 1, hostName, ramSlice);\\r\\n    }\\r\\n}\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"1c52e2e782f18832fed1d8c762765990cfb35fb902803f608e7718213e8ab3ad\",\"moduleSequenceNumber\":5921}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HackEnv, TSPACER } from \\\"./hack_env.js\\\";\\r\\n\\r\\nconst debug = false;\\r\\n\\r\\n// TODO: Manage multiple target/host combos from a single manager\\r\\n// TODO: Incorporate sim into deciding to use GW/HW vs HGW\\r\\n// TODO: Incorporate eff's bucket/target search algorithm\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!ns.args[0]) {\\r\\n        ns.tprintf(\\\"ERROR: No target server defined\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new HackEnv(ns, ns.args[0], ns.args[2], ns.args[1]);\\r\\n    await env.prep(ns);\\r\\n\\r\\n    if (debug) env.printRamOverride(ns);\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", env.ramAllowance);\\r\\n\\r\\n    env.simEnabled = false;\\r\\n    if (env.simEnabled) {\\r\\n        while (env.simTime < 1000 * 60 * 2) {\\r\\n            env.refresh(ns);\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"Time Elapsed: %s; Income %s | %s/s\\\",\\r\\n            ns.tFormat(env.simTime),\\r\\n            ns.nFormat(env.simIncome, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n        );\\r\\n    } else {\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(TSPACER);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_adv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack_env.js\",\"url\":\"blob:file:///69d1c9b9-c974-4ff1-a398-a7d36451d5e4\"},{\"filename\":\"super_hack_adv.js\",\"url\":\"blob:file:///5a1822b0-919a-4e13-8227-afc437bf3903\"}],\"ramUsage\":13.1,\"server\":\"home\",\"_hash\":\"7a0a9ec1ba5a67c700e1d90cc49bc45db65ad8a37ff8436b5be6a3afd66d510a\",\"moduleSequenceNumber\":6066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function printServer(ns, serverArg) {\\r\\n    let server = serverArg;\\r\\n    if (server instanceof String) server = ns.getServer(server);\\r\\n\\r\\n    let labelBuffer = 23;\\r\\n\\r\\n    ns.tprintf(server.hostname + \\\":\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Root Access\\\", server.hasAdminRights ? \\\"TRUE\\\" : \\\"FALSE\\\");\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Money\\\", ns.nFormat(server.moneyMax, \\\"($0.000a)\\\"));\\r\\n    ns.tprintf(\\r\\n        \\\"  %23s: %s/%s\\\",\\r\\n        \\\"Available Money\\\",\\r\\n        ns.nFormat(server.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(server.moneyMax * 0.75, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %23s: %.2f\\\", \\\"Hack Difficulty\\\", server.hackDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %.2f%%\\\", \\\"Hack Chance\\\", ns.hackAnalyzeChance(server.hostname) * 100);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (MIN)\\\", server.minDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %d\\\", \\\"Hack Difficulty (BASE)\\\", server.baseDifficulty);\\r\\n    ns.tprintf(\\\"  %23s: %s\\\", \\\"Hacking Requirement\\\", server.requiredHackingSkill);\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports\\\", server.openPortCount)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Open Ports Required\\\", server.numOpenPortsRequired)\\r\\n    // ns.tprintf(\\\"  %23s: %s\\\", \\\"Maximum Ram\\\", server.maxRam)\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    // let env = new HackEnv(ns, \\\"max-hardware\\\", \\\"rothman-uni\\\");\\r\\n    // env.simEnabled = true;\\r\\n\\r\\n    // // simulate for 10 minutes\\r\\n    // env.fastSim(ns, 1000 * 60 * 100);\\r\\n\\r\\n    // ns.tprintf(\\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    // env.hostname, env.targetname, env.ramAllowance, ns.nFormat(env.simIncome / env.simTime, \\\"($0.000a)\\\"),)\\r\\n\\r\\n    printServer(ns, \\\"foodnstuff\\\")\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.6,\"server\":\"home\",\"_hash\":\"4caa7584bbfc8c6458e2fd40c11336e00081a81582b8969d0c507f2a77aa6780\",\"moduleSequenceNumber\":5927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns;\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts() {\\r\\n    return Object.keys(mapHosts());\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortDesc(a, b) {\\r\\n    return ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a)\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortAsc(a, b) {\\r\\n    return ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b)\\r\\n}\\r\\n\\r\\nexport function doProgramBuys() {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"818b089434c69cdc2ffbf355864c4b74a127eb3c286474979e23fa00a2f2a3fb\",\"moduleSequenceNumber\":5930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst hostname = ns.args[0]\\r\\n\\tlet tsleep = ns.args[1]\\r\\n\\tif (tsleep) await ns.sleep(tsleep)\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1f963fac-9e51-41a6-9e6c-51de41318616\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"0870eb8866c74cf1664f2bdbb79795b62e7596d6f8271950ea204c7ee6058a0d\",\"moduleSequenceNumber\":6067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { HackEnv } from \\\"./hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"hack_env.js\\\";\\r\\n\\r\\n    // maybe run soften and program_buys with some waits first\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, killing processes on any that are attacking something not in targets and\\r\\n        // removing targets from the target array that are already being attacked\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let dokill = false;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    let attackTargetnameIdx = targetnames.indexOf(psInfo.args[0]);\\r\\n                    if (attackTargetnameIdx === -1) {\\r\\n                        ns.tprintf(\\\"Killing %s running on %s targeting %s\\\", attackScript, hostname, psInfo.args[0]);\\r\\n                        dokill = true;\\r\\n                    } else {\\r\\n                        targetnames.splice(attackTargetnameIdx, 1);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If we're killing on home, make sure to only kill attack scripts so we dont kill ourselves\\r\\n            if (dokill) {\\r\\n                if (hostname !== \\\"home\\\") {\\r\\n                    ns.killall(hostname);\\r\\n                } else {\\r\\n                    for (let psInfo of ps) {\\r\\n                        if (\\r\\n                            psInfo.filename === attackScript ||\\r\\n                            psInfo.filename === \\\"weaken.js\\\" ||\\r\\n                            psInfo.filename === \\\"grow.js\\\" ||\\r\\n                            psInfo.filename === \\\"hack.js\\\"\\r\\n                        ) {\\r\\n                            ns.kill(psInfo.filename, hostname, psInfo.args);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // In case all the targets are accounted for, continue to the next bucket\\r\\n        if (targetnames.length === 0) continue;\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            let ps = ns.ps(hostname);\\r\\n            let hostfree = true;\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === attackScript) {\\r\\n                    hostfree = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (hostfree) {\\r\\n                let targetname = targetnames.shift();\\r\\n                ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n\\r\\n                await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n                await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n                if (hostname === \\\"home\\\") {\\r\\n                    let allowedRam = ns.getServerMaxRam(\\\"home\\\") - 48;\\r\\n                    if (allowedRam >= 32) ns.exec(attackScript, hostname, 1, targetname, allowedRam);\\r\\n                    else\\r\\n                        ns.tprintf(\\r\\n                            \\\"WARNING: Not enough max ram on home to safely run script (%d)\\\",\\r\\n                            ns.getServerMaxRam(\\\"home\\\")\\r\\n                        );\\r\\n                } else ns.exec(attackScript, hostname, 1, targetname);\\r\\n            }\\r\\n\\r\\n            if (targetnames.length === 0) break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect all useable servers with > hackRam ram\\r\\n        evaluate servers to detect how many hack or weaken/grow threads can run on it - assign those values to that server\\r\\n\\r\\n        host database will include all hosts\\r\\n            name\\r\\n            maxRam\\r\\n            unusedRam\\r\\n            hackThreads\\r\\n            weakenThreads\\r\\n            growThreads\\r\\n\\r\\n            functions to allocate threads, when allocate for each thread type is called, unused ram is updated\\r\\n            function to reset, clearing all thread counters and reset unused ram to maxRam\\r\\n            functions to call on a thread type with arguments, returns actual number of threads executed\\r\\n                maybe wont work, perhaps track what threads execute where on state evaluation to prevent mis-allocation of resources\\r\\n\\r\\n        ---- need to update or write new version of hack_env that uses entire ecosystem instead of a single host to evaluate targets\\r\\n          super_hack_env (SHE)\\r\\n          Takes a mapping of servers {name, available H, available WG, max H, max WG} instead of a single host\\r\\n          dont worry about cores on servers for calculations\\r\\n          isWRunning() -- check on all servers instead of just hostserver\\r\\n          all calculations using ramallowance need to change\\r\\n            instead of checking if ram cycle fits in ram allowance, ram cycle needs to be an array of hack/grow/weaken threads that fit in the\\r\\n            host server database\\r\\n            every evaluation will go in order, reducing the hack threads, then the grow threads, then the weaken threads. At each step, the\\r\\n            host resources will be re-calculated\\r\\n\\r\\n          SHE will have an allocate threads function that receives H, G, and W threads and attempts to map them to the server database,\\r\\n            if allocation is successful, return true, otherwise return false\\r\\n\\r\\n          ?? Create a way to queue up exec calls based on the server/script/args combinations that need to be called in rapid succession\\r\\n\\r\\n          not sure if hgw < ramAllowance algorithm needs to include assigning sleep timers, or maybe that can be taken care of at execution time.\\r\\n\\r\\n          if we pretend all scripts are the same size (1.75GB) instead of 1.70GB for hack, it simplifies the algorithm\\r\\n\\r\\n    */\\r\\n}\",\"filename\":\"solo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":14.35,\"server\":\"home\",\"_hash\":\"7a3609f39e093094ae9a0ab953bbd9a8e014a698bd0efc026dacb80a47465079\",\"moduleSequenceNumber\":7140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { setns, doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n}\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.ns\",\"url\":\"blob:file:///66cfcb8a-626a-4205-97fa-a6c80a82796a\"},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///596f32e7-5386-4ba3-a71f-39d31de8277e\"}],\"ramUsage\":6.2,\"server\":\"home\",\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"moduleSequenceNumber\":6240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"19.7.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":32008326279,\"moneyMax\":1600416313950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1355,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"27.4.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":23481440529.5,\"moneyMax\":1174072026475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1137,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"98.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":13453272375,\"moneyMax\":672663618750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1118,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"88.8.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":16323236417.5,\"moneyMax\":816161820875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1162,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"2.7.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":12616936594,\"moneyMax\":630846829700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1123,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"59.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":11974506411.5,\"moneyMax\":598725320575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1230,\"serverGrowth\":63}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"55.1.6.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":9646812835,\"moneyMax\":482340641750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1054,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"87.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":9837171341.5,\"moneyMax\":491858567075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1175,\"serverGrowth\":90}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"48.5.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":196,\"hackDifficulty\":196,\"minDifficulty\":65,\"moneyAvailable\":10702108932.5,\"moneyMax\":535105446625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1201,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"90.8.7.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":792886214.5,\"moneyMax\":39644310725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1212,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-786182-Bachman&Associates.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,12],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"82.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1302,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"85.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182,\"hackDifficulty\":182,\"minDifficulty\":61,\"moneyAvailable\":514107357.5,\"moneyMax\":25705367875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-975455.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"34915825\",-72],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"56.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":471562621.5,\"moneyMax\":23578131075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"57.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":407455963,\"moneyMax\":20372798150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":35}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"77.3.5.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":186,\"minDifficulty\":62,\"moneyAvailable\":348881549,\"moneyMax\":17444077450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"95.3.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":350594079,\"moneyMax\":17529703950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":776,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643351.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[123,130,120,136,200,187,116,132,150,43,181,179,104,141,186,107,124,199,5,69,84,101,83,67,126,131,164,130,40,179,42,61,13,151,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"34.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":493621727,\"moneyMax\":24681086350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-851921-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[76,83,3,168,35],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"58.5.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":554617021,\"moneyMax\":27730851050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"98.3.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":399599346.5,\"moneyMax\":19979967325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"57.4.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":134,\"hackDifficulty\":134,\"minDifficulty\":45,\"moneyAvailable\":298385660,\"moneyMax\":14919283000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"9.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":442912158.5,\"moneyMax\":22145607925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"3.0.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":112,\"minDifficulty\":37,\"moneyAvailable\":414656081,\"moneyMax\":20732804050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":81}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"67.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":164,\"hackDifficulty\":164,\"minDifficulty\":55,\"moneyAvailable\":581646530,\"moneyMax\":29082326500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"57.2.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":488799075,\"moneyMax\":24439953750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"33.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":464706145,\"moneyMax\":23235307250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"27.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":387993317.5,\"moneyMax\":19399665875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"90.2.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":434869982,\"moneyMax\":21743499100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"89.4.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":760962554.5,\"moneyMax\":38048127725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"79.0.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":805890950.5,\"moneyMax\":40294547525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"82.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":600650790,\"moneyMax\":30032539500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86391.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":668120648,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"17.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":651547907.5,\"moneyMax\":32577395375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203059-Bachman&Associates.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-8,5,-5,-1,5,0,10,6,6,-6,1,-8,-7,8,7,-6,10,0,-7,0,-2,-5,-6,-8,-3,-2,-4,6],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"62.4.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":512705869,\"moneyMax\":25635293450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"11.0.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":366666998.5,\"moneyMax\":18333349925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638557.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[171,21,61,129,77,17,14,98,62,108,137,29,184,105,67,117,110,4,8,82,53,56,101,181,24,172,123,56,3,109,141,77,139,73,173,48]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"39.3.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":267000447.5,\"moneyMax\":13350022375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":488,\"serverGrowth\":42}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"94.2.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":353804580,\"moneyMax\":17690229000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":571,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"72.7.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":175596171.5,\"moneyMax\":8779808575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":444,\"serverGrowth\":47}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"43.3.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":108097448.5,\"moneyMax\":5404872425,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":420,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"63.4.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":479995079,\"moneyMax\":23999753950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"82.2.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":115291161.5,\"moneyMax\":5764558075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":438,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"22.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":298993483,\"moneyMax\":14949674150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":590,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"88.7.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":151866836.5,\"moneyMax\":7593341825,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"80.3.9.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":76750412,\"moneyMax\":3837520600,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":294,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316905.cct\",\"type\":\"Total Ways to Sum\",\"data\":33,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-13495-NiteSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-831298.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,1,1,0,0],[0,1,0,0,0],[0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"7.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":124212909.5,\"moneyMax\":6210645475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":334,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"58.7.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"58.3.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":40130293.5,\"moneyMax\":2006514675,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":266,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"92.2.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"61.9.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"29.9.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"11.7.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"90.7.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420806-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[69,59,62,4,173,133,68,155,84,164,26,60],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"24.6.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"49.7.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"36.8.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"66.5.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"30.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"2.7.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"11.7.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-750146-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))(()()((\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"28.6.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":31689813.5,\"moneyMax\":1584490675,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":183,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-497254-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,6],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"18.1.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":25148192.5,\"moneyMax\":1257409625,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":258,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824138-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,6],[4,5,2],[8,6,4,2],[5,2,7,9,3],[3,4,8,2,3,8],[4,6,4,5,6,7,7],[4,4,7,3,5,5,8,9],[1,8,1,2,7,6,1,5,9],[1,8,2,1,8,5,1,6,3,6],[3,7,4,6,5,9,2,8,6,4,6]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"66.6.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"89.9.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":104,\"hackDifficulty\":104,\"minDifficulty\":35,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":499,\"serverGrowth\":27}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"10.5.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-531885.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,50,44,10,9,37,14,50,23,23,28,34,27,32],[15,20,42,17,17,35,10,21,49,1,50,19,39,20],[29,48,21,49,36,38,49,31,16,15,11,20,4,30],[1,13,39,45,22,36,18,41,45,47,31,38,32,14],[34,18,32,34,12,32,14,50,35,39,47,31,10,30],[21,29,21,3,9,24,39,41,40,44,47,26,17,38],[44,26,20,50,4,3,47,49,11,25,10,27,13,45],[23,28,33,40,17,14,29,3,45,6,6,41,18,27],[23,41,32,35,11,2,19,44,30,4,25,13,14,45],[26,44,50,13,45,29,4,17,17,32,6,23,22,33],[6,10,40,38,42,43,40,29,31,12,15,7,48,22]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"69.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":697,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"3.3.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"18.5.1.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"9.0.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-236434-BitRunners.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"28.2.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"37.5.5.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"37.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"2.0.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928702-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[25,33],[23,24],[19,28],[4,9]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"48.5.3.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":763153.5427473965,\"favor\":67,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":3.5485723417161834}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":84.2052,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":262775.47602955834}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":105.8057,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":311655.9724087562}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":99.4365,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":302004.01283000736}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0.1693,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":36.8555,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":97035.59430323227}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":3.2568,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":27.8569,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":73278.64351747138}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":64.9361,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":187156.4901635011}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"brute\":\"home; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; killall; run starter.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"eff\":\"run eff.ns\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641928641426","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642009093189"}}