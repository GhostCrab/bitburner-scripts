{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":327,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":217,\"agility\":217,\"charisma\":1,\"intelligence\":103,\"hacking_chance_mult\":1.4871093084964102,\"hacking_speed_mult\":1.4871093084964102,\"hacking_money_mult\":1.4871093084964102,\"hacking_grow_mult\":1.4871093084964102,\"hacking_exp\":2802234.446475202,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":63816.24348659522,\"agility_exp\":63816.24348659522,\"charisma_exp\":0,\"intelligence_exp\":12732.213078934743,\"hacking_mult\":1.4871093084964102,\"strength_mult\":1.408840397522915,\"defense_mult\":1.408840397522915,\"dexterity_mult\":1.408840397522915,\"agility_mult\":1.408840397522915,\"charisma_mult\":1.8523642263727211,\"hacking_exp_mult\":1.4871093084964102,\"strength_exp_mult\":1.408840397522915,\"defense_exp_mult\":1.408840397522915,\"dexterity_exp_mult\":1.408840397522915,\"agility_exp_mult\":1.408840397522915,\"charisma_exp_mult\":1.3044818495582544,\"company_rep_mult\":1.3044818495582544,\"faction_rep_mult\":1.3044818495582544,\"money\":400796849.18828404,\"city\":\"Sector-12\",\"location\":\"The Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"NiteSec\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":1}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":10},{\"lvl\":1,\"n\":6},{\"lvl\":1,\"n\":9},{\"lvl\":1,\"n\":12},{\"lvl\":3,\"n\":2}],\"numPeopleKilled\":0,\"karma\":-595.0000000000006,\"crime_money_mult\":1.8523642263727211,\"crime_success_mult\":1.8523642263727211,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":90000,\"work_money_mult\":1.3044818495582544,\"hacknet_node_money_mult\":1.408840397522915,\"hacknet_node_purchase_cost_mult\":0.6498975689333613,\"hacknet_node_ram_cost_mult\":0.6498975689333613,\"hacknet_node_core_cost_mult\":0.6498975689333613,\"hacknet_node_level_cost_mult\":0.6498975689333613,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Shitballs\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Shittech\",\"type\":\"Software\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":1595.4169677735672,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prodMats\":[\"AICores\"],\"products\":{\"software-1\":{\"ctor\":\"Product\",\"data\":{\"name\":\"software-1\",\"dmd\":30.643486190937,\"cmp\":48.75439999999846,\"mku\":10.836339827636955,\"pCost\":26854.199818139074,\"sCost\":0,\"fin\":true,\"prog\":100.06601598485621,\"createCity\":\"Sector-12\",\"designCost\":10000000000,\"advCost\":10000000000,\"rat\":378.6154441573799,\"qlt\":397.4617485734632,\"per\":455.92657564008533,\"dur\":371.6879050895923,\"rel\":279.8367285213428,\"aes\":215.3664143579555,\"fea\":388.1642629624159,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[2856.930786528938,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":3.0603757499999995,\"popularity\":0.720925750000035,\"startingCost\":25000000000,\"reFac\":0.15,\"sciFac\":0.62,\"hwFac\":0.25,\"robFac\":0.05,\"aiFac\":0.18,\"advFac\":0.16,\"prodMult\":1,\"upgrades\":[0,1],\"state\":\"SALE\",\"newInd\":false,\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jFTs9Vg\",\"mor\":100,\"hap\":96.51695499919346,\"ene\":96.51695499919346,\"int\":52,\"cha\":89,\"exp\":92.64800000000037,\"cre\":56,\"eff\":90,\"sal\":1110,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2i8SCQ3\",\"mor\":100,\"hap\":96.56445084823268,\"ene\":96.56445084823268,\"int\":79,\"cha\":92,\"exp\":104.64800000000037,\"cre\":63,\"eff\":61,\"sal\":1170,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KVenMY8\",\"mor\":100,\"hap\":96.50153588056136,\"ene\":96.50153588056136,\"int\":89,\"cha\":99,\"exp\":89.64800000000037,\"cre\":93,\"eff\":85,\"sal\":1338,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NDt2FEW\",\"mor\":100,\"hap\":96.55549022018235,\"ene\":96.55549022018235,\"int\":80,\"cha\":73,\"exp\":62.645000000000366,\"cre\":73,\"eff\":62,\"sal\":1023,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YkZPdgs\",\"mor\":100,\"hap\":96.54684530843898,\"ene\":96.54684530843898,\"int\":89,\"cha\":78,\"exp\":75.64500000000037,\"cre\":78,\"eff\":86,\"sal\":1191,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JKVVhZ6\",\"mor\":100,\"hap\":96.477256901628,\"ene\":96.477256901628,\"int\":62,\"cha\":56.78614691293929,\"exp\":77.43114691293925,\"cre\":61,\"eff\":63.78614691293929,\"sal\":891,\"loc\":\"\",\"pos\":\"Training\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ysunrmi\",\"mor\":100,\"hap\":96.56981992880029,\"ene\":96.56981992880029,\"int\":71,\"cha\":88,\"exp\":107.52800000000036,\"cre\":83,\"eff\":84,\"sal\":1272,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Xnp39tO\",\"mor\":100,\"hap\":96.57112334158242,\"ene\":96.57112334158242,\"int\":63,\"cha\":84,\"exp\":70.52800000000036,\"cre\":75,\"eff\":80,\"sal\":1089,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RGFKH2F\",\"mor\":100,\"hap\":96.54656845898545,\"ene\":96.54656845898545,\"int\":99,\"cha\":69,\"exp\":67.52800000000036,\"cre\":51,\"eff\":50,\"sal\":981,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XUoJ4bM\",\"mor\":100,\"hap\":96.6402964285384,\"ene\":96.6402964285384,\"int\":74,\"cha\":54,\"exp\":82.52800000000036,\"cre\":62,\"eff\":89,\"sal\":1056,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0FeOeV2\",\"mor\":100,\"hap\":96.5283949227042,\"ene\":96.5283949227042,\"int\":85,\"cha\":97,\"exp\":66.52800000000036,\"cre\":91,\"eff\":74,\"sal\":1212,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XZqu9rK\",\"mor\":100,\"hap\":96.66576399418211,\"ene\":96.66576399418211,\"int\":99,\"cha\":72,\"exp\":93.52800000000036,\"cre\":53,\"eff\":85,\"sal\":1179,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eSja82d\",\"mor\":100,\"hap\":96.53561936495014,\"ene\":96.53561936495014,\"int\":56,\"cha\":81,\"exp\":68.52800000000036,\"cre\":66,\"eff\":71,\"sal\":999,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qLjMAXX\",\"mor\":100,\"hap\":96.58476715175908,\"ene\":96.58476715175908,\"int\":66,\"cha\":56,\"exp\":84.52800000000036,\"cre\":64,\"eff\":94,\"sal\":1065,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0pu4CPF\",\"mor\":100,\"hap\":96.49922922380644,\"ene\":96.49922922380644,\"int\":96,\"cha\":94,\"exp\":69.52800000000036,\"cre\":71,\"eff\":90,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cfI47Fs\",\"mor\":100,\"hap\":96.60089977370403,\"ene\":96.60089977370403,\"int\":54,\"cha\":99.82136023367308,\"exp\":79.34936023367344,\"cre\":52,\"eff\":97.82136023367308,\"sal\":1077,\"loc\":\"\",\"pos\":\"Training\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1kpq3zR\",\"mor\":100,\"hap\":96.62196229987252,\"ene\":96.62196229987252,\"int\":69,\"cha\":62,\"exp\":88.52800000000036,\"cre\":77,\"eff\":68,\"sal\":1065,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lj7dN3J\",\"mor\":100,\"hap\":96.56617653305656,\"ene\":96.56617653305656,\"int\":80,\"cha\":89,\"exp\":106.52800000000036,\"cre\":56,\"eff\":98,\"sal\":1260,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AQ8HAWa\",\"mor\":100,\"hap\":96.62438103625378,\"ene\":96.62438103625378,\"int\":54,\"cha\":67,\"exp\":75.52800000000036,\"cre\":66,\"eff\":56,\"sal\":927,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3v2CaPd\",\"mor\":100,\"hap\":96.55232959895383,\"ene\":96.55232959895383,\"int\":91,\"cha\":55,\"exp\":67.52800000000036,\"cre\":58,\"eff\":64,\"sal\":978,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cfFRxJb\",\"mor\":100,\"hap\":96.57759783734613,\"ene\":96.57759783734613,\"int\":72,\"cha\":73,\"exp\":61.52800000000036,\"cre\":71,\"eff\":57,\"sal\":975,\"loc\":\"\",\"pos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1433.0823892136027,\"Engineer\":1622.0648777855615,\"Business\":300.78299722414397,\"Management\":505.24851925089405,\"Research & Development\":862.9241407170437,\"total\":4724.102924191246,\"Unassigned\":0,\"Training\":0},\"loc\":\"Sector-12\",\"size\":21}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":0,\"lastCycleExpenses\":23091,\"thisCycleRevenue\":0,\"thisCycleExpenses\":230910,\"warehouses\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":99.99257752851281,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0.7914674315282579,\"loc\":\"Sector-12\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.98482011829009,\"dmdR\":[80,99],\"cmp\":90.84170113014946,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0.3957370041833889,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1994.8955400003395,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.92436113009873,\"dmdR\":[80,90],\"cmp\":68.5803375649048,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.3957370041833889,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8746.78438725529,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70368.14534346538,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":62.922056170782874,\"dmd\":84.88892229261326,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10999.422479684787,\"sCost\":15000,\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":39.437985999305255,\"dmdR\":[5,99],\"cmp\":25.482576694891033,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":103933.95975906658,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":33584597446.386894,\"revenue\":0,\"expenses\":23091,\"fundingRound\":0,\"public\":false,\"totalShares\":1500000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":10.991326306655782,\"storedCycles\":4,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":4}},\"unlockUpgrades\":[0,1,0,0,0,0,0,0,0],\"upgrades\":[1,0,0,1,0,0,1,0,0,1],\"upgradeMultipliers\":[1.03,1,1,1.005,1,1,1.1,1,1,1.05]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":28.129691867551248,\"hacking_speed_mult\":15.972358892905014,\"hacking_money_mult\":12335.583693146458,\"hacking_grow_mult\":226.68743133544928,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":7.633148260546874,\"hacknet_node_purchase_cost_mult\":0.49744124999999995,\"hacknet_node_ram_cost_mult\":0.85,\"hacknet_node_core_cost_mult\":0.85,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.9001449815844444,\"hacking_speed_mult\":2.8756656664266576,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.9001449815844444,\"hacking_speed_mult\":2.875665666426657,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.9001449815844444,\"hacking_speed_mult\":2.875665666426658,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.900144981584445,\"hacking_speed_mult\":2.875665666426658,\"hacking_money_mult\":67.09496647958107,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.9001449815844444,\"hacking_speed_mult\":2.875665666426657,\"hacking_money_mult\":67.09496647958106,\"hacking_grow_mult\":15.791015625000004,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":38408000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":58.612000000002034,\"storedCycles\":1,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":3,\"lastUpdate\":1643645673706,\"totalPlaytime\":3938504600,\"playtimeSinceLastAug\":38408200,\"playtimeSinceLastBitnode\":38408200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":136658170.80064636,\"gang\":0,\"hacking\":281462026,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":400795849.18828404,\"work\":0,\"servers\":-15124347.612364803,\"other\":-2200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":136658170.80064636,\"gang\":0,\"hacking\":281462026,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":400795849.18828404,\"work\":0,\"servers\":-15124347.612364803,\"other\":-2200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":281462026,\"exploits\":[\"EditSaveFile\",\"N00dles\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641708178429},{\"ID\":\"SF1.1\",\"unlockedOn\":1641708178438},{\"ID\":\"SF4.1\",\"unlockedOn\":1641708178440},{\"ID\":\"SF5.1\",\"unlockedOn\":1641708178443},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641708178445},{\"ID\":\"NS2\",\"unlockedOn\":1641708178447},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641708178450},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641708238434},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641708238441},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641708238443},{\"ID\":\"TOR\",\"unlockedOn\":1641708238444},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641709738429},{\"ID\":\"NITESEC\",\"unlockedOn\":1641709738432},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641709738433},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641709798438},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641710578432},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641715138431},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641715978434},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641749518438},{\"ID\":\"FROZE\",\"unlockedOn\":1641796192129},{\"ID\":\"DONATION\",\"unlockedOn\":1641837570104},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641847680353},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641854828167},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641856807959},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642127766724},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642182124813},{\"ID\":\"N00DLES\",\"unlockedOn\":1642182124817},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642449915574},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642464675621},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642464675627},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642464675630},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642464795526},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642481669631},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642487205385},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1642500348152},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1642522248149},{\"ID\":\"SF10.1\",\"unlockedOn\":1642522608143},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1642576495422},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1642577095422},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1642730615920},{\"ID\":\"DEVMENU\",\"unlockedOn\":1642744104484},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1642744273812},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1642744333814},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1642744725024},{\"ID\":\"BYPASS\",\"unlockedOn\":1642744801529},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1642744981454},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1642744981461},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1642745701455},{\"ID\":\"SF6.1\",\"unlockedOn\":1642785770037},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1642788950040},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1642807972554},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1642816068703},{\"ID\":\"SF9.1\",\"unlockedOn\":1643235429747},{\"ID\":\"SF12.1\",\"unlockedOn\":1643323114293},{\"ID\":\"GANG\",\"unlockedOn\":1643331994294},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643355274307},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643359714297},{\"ID\":\"SF2.1\",\"unlockedOn\":1643416557483},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643613074511}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"78.9.5.3\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"ramUsed\":15.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"clock.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38326.81000000326,\"pid\":12,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///6e7e0633-6210-4346-9174-a73aff993dac\",\"moduleSequenceNumber\":76607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[30,\"go\"],\"dataMap\":{},\"filename\":\"solo.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2595903.107344808,\"onlineMoneyMade\":278466751,\"onlineRunningTime\":32878.810000082536,\"pid\":2883,\"ramUsage\":13.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///905e5ef6-4ca2-4476-b183-47f60ad5dcb2\",\"moduleSequenceNumber\":76844},{\"filename\":\"util.js\",\"url\":\"blob:file:///73b9fd83-6ce4-4f19-aa6f-488a35c13f51\",\"moduleSequenceNumber\":76840},{\"filename\":\"solo.js\",\"url\":\"blob:file:///645b7afa-ab45-4849-bd24-c5a7a31b9170\",\"moduleSequenceNumber\":76898}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"test me\",\"filename\":\"job.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":76817,\"_hash\":\"e437d8916edcbc62e47f2dfa71786a999732804cbd1e99c5341e1659728e9753\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"12/20/2021, 10:46:49 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:20 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:23 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1} \\n12/20/2021, 10:47:25 AM:\\n  hack_me.ns {t=1600} phantasy\\n  job.ns {t=1}\",\"filename\":\"out.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":76818,\"_hash\":\"cd9e9b4b8033ea304743475d442987cf5760d0bb94e63296c690c3e821b6c5d9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nfunction canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\\r\\n\\r\\nfunction serverValueSort(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.moneyMax > s2.moneyMax) return -1;\\r\\n    if (s1.moneyMax < s2.moneyMax) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction matchWeakenTarget(a, target) {\\r\\n    let epsilon = 0.1;\\r\\n    let targetMin = target - epsilon;\\r\\n    let targetMax = target + epsilon;\\r\\n\\r\\n    return a > targetMin && a < targetMax;\\r\\n}\\r\\n\\r\\nfunction assessHack(hostNames) {\\r\\n    let hackableHosts = hostNames.filter(serverIsHackable).sort(serverValueSort);\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\");\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\");\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\");\\r\\n\\r\\n    let fundThres = 0.9;\\r\\n    let targetServer = ns.getServer(hackableHosts[0]);\\r\\n    let targetFunds = targetServer.moneyMax * fundThres;\\r\\n    let availableFunds = targetServer.moneyAvailable <= 1 ? 1 : targetServer.moneyAvailable;\\r\\n    let growthRequired = targetFunds / availableFunds;\\r\\n    let growThreadsNeeded = 0;\\r\\n    if (growthRequired > 1) growThreadsNeeded = Math.ceil(ns.growthAnalyze(targetServer.hostname, growthRequired));\\r\\n\\r\\n    let targetGrowTime = ns.getGrowTime(targetServer.hostname);\\r\\n    let targetWeakenTime = ns.getWeakenTime(targetServer.hostname);\\r\\n\\r\\n    ns.tprintf(\\\"%s:\\\", targetServer.hostname);\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s/%s [%2.0f%% | %s]\\\",\\r\\n        \\\"Target Funds\\\",\\r\\n        ns.nFormat(targetServer.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n        ns.nFormat(targetFunds, \\\"($0.000a)\\\"),\\r\\n        fundThres * 100,\\r\\n        ns.nFormat(targetServer.moneyMax, \\\"($0.000a)\\\")\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %.2fx, %d Threads\\\", \\\"Growth Required\\\", growthRequired, growThreadsNeeded);\\r\\n    ns.tprintf(\\\"  %25s: %s @ %s\\\", \\\"Server Growth\\\", targetServer.serverGrowth, ns.tFormat(targetGrowTime));\\r\\n    ns.tprintf(\\\"  %25s: %s\\\", \\\"Weaken Time\\\", ns.tFormat(targetWeakenTime));\\r\\n    ns.tprintf(\\r\\n        \\\"  %25s: %s / %s / %s\\\",\\r\\n        \\\"Hack Difficulty [M/B/H]\\\",\\r\\n        targetServer.minDifficulty,\\r\\n        targetServer.baseDifficulty,\\r\\n        targetServer.hackDifficulty\\r\\n    );\\r\\n    ns.tprintf(\\\"  %25s: %d/%d\\\", \\\"Ram Available\\\", targetServer.maxRam - targetServer.ramUsed, targetServer.maxRam);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    const hostSet = new Set([\\\"home\\\"]);\\r\\n    let hostQueue = [\\\"home\\\"];\\r\\n    let currentHost;\\r\\n    while ((currentHost = hostQueue.shift())) {\\r\\n        let newHosts = ns.scan(currentHost);\\r\\n\\r\\n        for (const newHost of newHosts) {\\r\\n            if (!hostSet.has(newHost)) {\\r\\n                hostQueue.push(newHost);\\r\\n                hostSet.add(newHost);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let hostNames = Array.from(hostSet);\\r\\n    //assessHack(hostNames)\\r\\n\\r\\n    let serverName = ns.args[0];\\r\\n    let targetServer = ns.getServer(serverName);\\r\\n    assessHack([targetServer.hostname]);\\r\\n}\",\"filename\":\"assess.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"assess.js\",\"url\":\"blob:file:///c02ce3bb-0065-41ce-8234-ed400a35a336\",\"moduleSequenceNumber\":90265}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":76819,\"_hash\":\"482a9beb35dd25b989f01392d4ab4a49e02be0cd92ad83fe35cbb3ce92bb8677\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction serverRamSortAsc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return 1;\\r\\n    if (s1.maxRam < s2.maxRam) return -1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\nfunction serverRamSortDesc(h1, h2) {\\r\\n    const s1 = ns.getServer(h1);\\r\\n    const s2 = ns.getServer(h2);\\r\\n\\r\\n    if (s1.maxRam > s2.maxRam) return -1;\\r\\n    if (s1.maxRam < s2.maxRam) return 1;\\r\\n    return 0;\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let ram = ns.args[0];\\r\\n    let count = ns.args[1];\\r\\n    let cash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (count === undefined) count = 1;\\r\\n\\r\\n    if (ram === undefined) {\\r\\n        // ns.tprintf(\\\"Calculating maximum ram allocation for new server (Cash: %s)\\\", ns.nFormat(cash, '($0.000a)'))\\r\\n        ram = 0;\\r\\n        for (let i = 0; i <= 20; i++) {\\r\\n            let curRam = Math.pow(2, i);\\r\\n            let cost = ns.getPurchasedServerCost(curRam);\\r\\n            if (cost <= cash) ram = curRam;\\r\\n            else break;\\r\\n        }\\r\\n\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        let maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        ram /= 2;\\r\\n        if (ram < 256) return;\\r\\n        cost = ns.getPurchasedServerCost(ram);\\r\\n        maxServers = Math.min(Math.floor(cash / cost), 25);\\r\\n        ns.tprintf(\\\"run buy_server.js %d %d %s\\\", ram, maxServers, ns.nFormat(cost * maxServers, \\\"($0.000a)\\\"));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let cost = ns.getPurchasedServerCost(ram) * count;\\r\\n    if (cash < cost) {\\r\\n        ns.tprintf(\\r\\n            \\\"Unable to purchase %d server(s) with %d ram (%s < %s)\\\",\\r\\n            count,\\r\\n            ram,\\r\\n            ns.nFormat(cash, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(cost, \\\"($0.000a)\\\")\\r\\n        );\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < count; i++) {\\r\\n        let pservers = ns.getPurchasedServers().sort(serverRamSortAsc);\\r\\n        let nextIdx = pservers.length;\\r\\n        let nextServerName = \\\"pserv-\\\" + nextIdx;\\r\\n\\r\\n        if (pservers.length === ns.getPurchasedServerLimit()) {\\r\\n            let delServer = ns.getServer(pservers[0]);\\r\\n\\r\\n            if (delServer.maxRam >= ram) {\\r\\n                ns.tprintf(\\r\\n                    \\\"Max servers reached and new server is not an improvement (%dGB/%dGB ram)\\\",\\r\\n                    delServer.maxRam,\\r\\n                    ram\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ns.tprintf(\\\"Deleting server %s with %dGB ram\\\", delServer.hostname, delServer.maxRam);\\r\\n            nextServerName = delServer.hostname;\\r\\n            ns.killall(delServer.hostname);\\r\\n            ns.deleteServer(delServer.hostname);\\r\\n        }\\r\\n\\r\\n        let hostname = ns.purchaseServer(nextServerName, ram);\\r\\n        ns.tprintf(\\\"Purchased server %s with %d ram for %s\\\", hostname, ram, ns.nFormat(cost / count, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"buy_server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"buy_server.js\",\"url\":\"blob:file:///ffa40de0-aa2c-4b71-b3b7-9369aa71da29\",\"moduleSequenceNumber\":84630}],\"dependents\":[],\"ramUsage\":11.25,\"server\":\"home\",\"moduleSequenceNumber\":84630,\"_hash\":\"c381d9613086b2403bd33c0a5aed251ff3a52b0ae780de338dc3f3b541e9bb75\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printCCT(ns, cct) {\\r\\n    ns.tprintf(\\\"%s %s:\\\", cct.host, cct.name);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.type);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.desc);\\r\\n    ns.tprintf(\\\"  %s\\\", cct.data);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction answerCCT(ns, cct, answer) {\\r\\n    let reward = ns.codingcontract.attempt(answer, cct.name, cct.host, { returnReward: true });\\r\\n\\r\\n    if (reward === \\\"\\\") {\\r\\n        ns.tprintf(\\\"ERROR: Failed to solve %s:%s of type %s\\\", cct.host, cct.name, cct.type);\\r\\n        ns.tprintf(\\\"  data: %s; answer: %s\\\", cct.data.toString(), answer.toString());\\r\\n    } else {\\r\\n        ns.tprintf(\\\"SUCCESS: Solved %s:%s => %s\\\", cct.host, cct.name, reward);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass CCT {\\r\\n    constructor(ns, hostname, filename) {\\r\\n        this.name = filename;\\r\\n        this.host = hostname;\\r\\n        this.type = ns.codingcontract.getContractType(filename, hostname);\\r\\n        this.desc = ns.codingcontract.getDescription(filename, hostname);\\r\\n        this.data = ns.codingcontract.getData(filename, hostname);\\r\\n\\r\\n        this.solve = _.bind(CCT[\\\"solve\\\" + this.type.replace(/\\\\s/g, \\\"\\\")], null, _, this);\\r\\n\\r\\n\\t\\tthis.print(ns)\\r\\n    }\\r\\n    print(ns) {\\r\\n        ns.tprintf(\\\"%s %s:\\\", this.host, this.name);\\r\\n        ns.tprintf(\\\"  %s\\\", this.type);\\r\\n        ns.tprintf(\\\"  %s\\\", this.desc);\\r\\n        ns.tprintf(\\\"  %s\\\", this.data);\\r\\n    }\\r\\n\\r\\n    static solveTotalWaystoSum(ns, cct) {\\r\\n        let N = cct.data;\\r\\n        let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\r\\n\\r\\n        dp[0] = 1;\\r\\n\\r\\n        for (let row = 1; row < N + 1; row++) {\\r\\n            for (let col = 1; col < N + 1; col++) {\\r\\n                if (col >= row) {\\r\\n                    dp[col] = dp[col] + dp[col - row];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, dp[N] - 1);\\r\\n    }\\r\\n    static solveSubarraywithMaximumSum(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSpiralizeMatrix(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveArrayJumpingGame(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMergeOverlappingIntervals(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveGenerateIPAddresses(ns, cct) {\\r\\n        function validate(str) {\\r\\n            if (str === \\\"0\\\") return true;\\r\\n            if (str.length > 1 && str[0] === \\\"0\\\") return false;\\r\\n            if (str.length > 3) return false;\\r\\n            return parseInt(str) < 255;\\r\\n        }\\r\\n\\r\\n        let results = [];\\r\\n        for (let i = 1; i <= 3; i++) {\\r\\n            if (cct.data.length - i > 9) continue;\\r\\n\\r\\n            let a = cct.data.substr(0, i);\\r\\n\\r\\n            if (!validate(a)) continue;\\r\\n\\r\\n            for (let j = 1; j <= 3; j++) {\\r\\n                if (cct.data.length - (i + j) > 6) continue;\\r\\n\\r\\n                let b = cct.data.substr(i, j);\\r\\n\\r\\n                if (!validate(b)) continue;\\r\\n\\r\\n                for (let k = 1; k <= 3; k++) {\\r\\n                    if (cct.data.length - (i + j + k) > 3) continue;\\r\\n\\r\\n                    let c = cct.data.substr(i + j, k);\\r\\n                    let d = cct.data.substr(i + j + k);\\r\\n\\r\\n                    if (validate(c) && validate(d)) {\\r\\n                        results.push(a + \\\".\\\" + b + \\\".\\\" + c + \\\".\\\" + d);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, results);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveAlgorithmicStockTraderIV(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveMinimumPathSuminaTriangle(ns, cct) {\\r\\n        function trav(tree, paths = [], tally = 0, level = 0, idx = 0) {\\r\\n            let newTally = tally + tree[level][idx];\\r\\n\\r\\n            if (level === tree.length - 1) {\\r\\n                paths.push(newTally);\\r\\n            } else {\\r\\n                trav(tree, paths, newTally, level + 1, idx);\\r\\n                trav(tree, paths, newTally, level + 1, idx + 1);\\r\\n            }\\r\\n\\r\\n            return paths;\\r\\n        }\\r\\n\\r\\n        answerCCT(ns, cct, trav(cct.data).sort((a, b) => a - b)[0]);\\r\\n    }\\r\\n    static solveUniquePathsinaGridI(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveUniquePathsinaGridII(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveSanitizeParenthesesinExpression(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindAllValidMathExpressions(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n    static solveFindLargestPrimeFactor(ns, cct) {\\r\\n        ns.tprintf(\\\"WARNING: TODO: Write solver for cct's of type '%s' to solve %s:%s\\\", cct.type, cct.host, cct.name);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hosts = mapHosts();\\r\\n    let ccts = [];\\r\\n    for (const [hostname, trail] of Object.entries(hosts)) {\\r\\n        let ls = ns.ls(hostname).filter((filename) => filename.indexOf(\\\".cct\\\") !== -1);\\r\\n\\r\\n        if (ls.length === 0) continue;\\r\\n\\r\\n        ccts.push(new CCT(ns, hostname, ls[0]));\\r\\n    }\\r\\n\\r\\n    sprintf(\\\"found %d ccts\\\", ccts.length);\\r\\n\\r\\n    for (const cct of ccts) {\\r\\n        cct.solve(ns);\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///c27c11ba-e724-4306-821d-ed811bab1965\",\"moduleSequenceNumber\":172},{\"filename\":\"cct.js\",\"url\":\"blob:file:///5f1ad755-c297-4ac5-8dab-89e2e4579433\",\"moduleSequenceNumber\":30972}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":76821,\"_hash\":\"e7414618ba83a6c445e80e1c6a20c93e5657417f1683c1a0fe207f5abd260f87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction listServers(ns, hostnames) {\\r\\n    let hackableHosts = hostnames.sort((a, b) => ns.getServerRequiredHackingLevel(b) - ns.getServerRequiredHackingLevel(a));\\r\\n\\r\\n    for (const hostname of hackableHosts) {\\r\\n        const rootStr = ns.hasRootAccess(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        const hackStr = ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname) ? \\\"[O]\\\" : \\\"[X]\\\";\\r\\n        ns.tprintf(\\r\\n            \\\"%20s %-9s %4d %s %s %6dGB %8.2f\\\",\\r\\n            hostname,\\r\\n            ns.nFormat(ns.getServerMaxMoney(hostname), \\\"($0.000a)\\\"),\\r\\n            ns.getServerRequiredHackingLevel(hostname),\\r\\n            rootStr,\\r\\n            hackStr,\\r\\n            ns.getServerMaxRam(hostname),\\r\\n            Math.ceil(ns.getWeakenTime(hostname) / 1000) / 60\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    let hostnames = allHosts()\\r\\n\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    listServers(ns, hostnames);\\r\\n}\",\"filename\":\"crawl.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///34a89be0-bd8f-4eb1-b09a-c0f00c6a0577\",\"moduleSequenceNumber\":76840},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///53e57786-d12f-49e5-8b4d-950c99da73cc\",\"moduleSequenceNumber\":76857}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":76857,\"_hash\":\"f794cb5c9400e1bd7590de9d4c74f655abc7a9f0983d213a5828b9fb77b56e2e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var debug = false;\\r\\n\\r\\nfunction fltEq(a, b) {\\r\\n    let epsilon = 0.05;\\r\\n    return a > b - epsilon && a < b + epsilon;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doWeaken(ns, _hostname, _targetname, ramAllowance) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let weakenThreads = Math.min(\\r\\n        Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread),\\r\\n        Math.floor(ramAllowance / weakenRam)\\r\\n    );\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        let estSecLevelAfterWeaken = Math.max(\\r\\n            target.minDifficulty,\\r\\n            target.hackDifficulty - weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n        ns.tprintf(\\\"Weaken Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s\\\",\\r\\n            target.hostname,\\r\\n            target.hackDifficulty,\\r\\n            estSecLevelAfterWeaken,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            host.hostname,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n\\r\\n    let currentMoney = Math.max(1.0, target.moneyAvailable);\\r\\n    let targetGrowMult = highMoney / currentMoney;\\r\\n    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let growThreads = fullGrowThreads + 1,\\r\\n        weakenThreads,\\r\\n        growRamCycle,\\r\\n        growSecIncrease;\\r\\n\\r\\n    do {\\r\\n        growThreads -= 1;\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        growRamCycle = growThreads * growRam + weakenThreads * weakenRam;\\r\\n    } while (growRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Grow Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(currentMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)\\\",\\r\\n            ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(target.moneyMax, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(highMoney, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult,\\r\\n            (growThreads / fullGrowThreads) * 100,\\r\\n            growThreads,\\r\\n            fullGrowThreads\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            growRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHackAndWeaken(ns, _hostname, _targetname) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney));\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n    let hackThreads = fullHackThreads + 1,\\r\\n        weakenThreads,\\r\\n        hackRamCycle;\\r\\n\\r\\n    do {\\r\\n        hackThreads -= 1;\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n    } while (hackRamCycle > ramAllowance);\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        ns.tprintf(\\\"Hack Process:\\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            weakenThreads,\\r\\n            weakenThreads * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, weakenThreads, target.hostname);\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance, tspacer) {\\r\\n    /*//////////// ALGO ////////////\\r\\n        if hackRamCycle is greater than ramAllowance\\r\\n        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio\\r\\n        while hackRamCycle > ramAllowance\\r\\n        recompute everything up to hackRamCycle\\r\\n        if hackRamCycle > ramAllowance\\r\\n            reduce targetHackAmount by .1% of original targetHackAmount\\r\\n    //////////////////////////////*/\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    if (debug) {\\r\\n        ns.tprintf(\\\"Hack Process: \\\");\\r\\n        ns.tprintf(\\r\\n            \\\"  Grow assuming low money is %s, multiplier from low money x%.8f\\\",\\r\\n            ns.nFormat(target.moneyAvailable - hackAmount, \\\"($0.000a)\\\"),\\r\\n            targetGrowMult\\r\\n        );\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramAllowance) {\\r\\n        let failRatio = ramAllowance / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount);\\r\\n        if (debug)\\r\\n            ns.tprintf(\\\"  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)\\\", failRatio * 100, failRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    let cycles = 0;\\r\\n    while (hackRamCycle > ramAllowance) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n        cycles++;\\r\\n    }\\r\\n\\r\\n    if (debug) {\\r\\n        let tweaken = ns.getWeakenTime(target.hostname);\\r\\n        if (cycles > 0)\\r\\n            ns.tprintf(\\r\\n                \\\"  targetHackAmount ratio: %.0f%%; Cycles: %d\\\",\\r\\n                (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100,\\r\\n                cycles\\r\\n            );\\r\\n        ns.tprintf(\\r\\n            \\\"  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s\\\",\\r\\n            hackThreads,\\r\\n            hackThreads * hackRam,\\r\\n            growThreads,\\r\\n            growThreads * growRam,\\r\\n            hackWeakenThreads,\\r\\n            growWeakenThreads,\\r\\n            (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n            hackRamCycle,\\r\\n            ns.tFormat(tweaken)\\r\\n        );\\r\\n        ns.tprintf(\\r\\n            \\\"  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f\\\",\\r\\n            target.hackDifficulty,\\r\\n            target.hackDifficulty + hackSecIncrease + growSecIncrease,\\r\\n            ns.hackAnalyzeSecurity(1),\\r\\n            weakenThreads * weakenAmountPerThread\\r\\n        );\\r\\n    }\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tgrow = ns.getGrowTime(target.hostname);\\r\\n    let thack = ns.getHackTime(target.hostname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, hackWeakenThreads, target.hostname, 0); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", host.hostname, growWeakenThreads, target.hostname, tGrowWeakenOffset); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", host.hostname, growThreads, target.hostname, tGrowOffset); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", host.hostname, hackThreads, target.hostname, tHackOffset); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreads(ns, _hostname, _targetname, highMoney, lowMoney) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let targetHackAmount = target.moneyAvailable - lowMoney;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n    return [hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction calcHGWThreadsSmart(ns, _hostname, _targetname, ramAllowance, tspacer) {\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let targetHackAmount = target.moneyMax * 0.9;\\r\\n    let targetHackAmountStep = targetHackAmount * 0.001;\\r\\n    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n    let hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n    let targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores);\\r\\n\\r\\n    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n    let hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n    let growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n    let hackRamCycle =\\r\\n        hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let targetCycles = Math.floor(tweakenFullCycle / tCycleSpacer);\\r\\n    let ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n\\r\\n    // dont force a cycle into less than 16GB\\r\\n    while (ramFit < 16) {\\r\\n        targetCycles--;\\r\\n        ramFit = Math.floor(ramAllowance / targetCycles);\\r\\n    }\\r\\n\\r\\n    if (hackRamCycle > ramFit) {\\r\\n        let crunchRatio = ramFit / hackRamCycle;\\r\\n        targetHackAmount = Math.min(targetHackAmount * (crunchRatio * 1.1), targetHackAmount);\\r\\n        if (debug) ns.tprintf(\\\"  ramFit / hackRamCycle = %.0f%% (%.0f%%)\\\", crunchRatio * 100, crunchRatio * 1.1 * 100);\\r\\n    }\\r\\n\\r\\n    while (hackRamCycle > ramFit) {\\r\\n        targetHackAmount -= targetHackAmountStep;\\r\\n        hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount));\\r\\n        hackAmount = ns.hackAnalyze(target.hostname) * hackThreads * target.moneyAvailable;\\r\\n\\r\\n        targetGrowMult = target.moneyMax / (target.moneyMax - hackAmount);\\r\\n        let dobreak = false;\\r\\n        if (targetGrowMult < 1) {\\r\\n            targetGrowMult = 1.0000001;\\r\\n            dobreak = true;\\r\\n        }\\r\\n\\r\\n        growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores));\\r\\n\\r\\n        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        hackWeakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        growWeakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n        hackRamCycle =\\r\\n            hackThreads * hackRam + growThreads * growRam + (hackWeakenThreads + growWeakenThreads) * weakenRam;\\r\\n\\r\\n        if (dobreak) break;\\r\\n    }\\r\\n\\r\\n    //if (debug) {\\r\\n    ns.tprintf(\\r\\n        \\\"  Calling Hack (%.4f%% of Max) with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d/%d threads (%.2fGB); Total %.2fGB for %s over %d Cycles\\\",\\r\\n        (hackAmount / target.moneyMax) * 100,\\r\\n        hackThreads,\\r\\n        hackThreads * hackRam,\\r\\n        growThreads,\\r\\n        growThreads * growRam,\\r\\n        hackWeakenThreads,\\r\\n        growWeakenThreads,\\r\\n        (hackWeakenThreads + growWeakenThreads) * weakenRam,\\r\\n        hackRamCycle,\\r\\n        ns.tFormat(tweaken),\\r\\n        targetCycles\\r\\n    );\\r\\n    //}\\r\\n\\r\\n    return [targetCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction launchHGW(\\r\\n    ns,\\r\\n    hostname,\\r\\n    targetname,\\r\\n    tspacer,\\r\\n    tag,\\r\\n    hackWeakenThreads,\\r\\n    growWeakenThreads,\\r\\n    hackThreads,\\r\\n    growThreads\\r\\n) {\\r\\n    let tweaken = ns.getWeakenTime(targetname);\\r\\n    let tgrow = ns.getGrowTime(targetname);\\r\\n    let thack = ns.getHackTime(targetname);\\r\\n\\r\\n    let tHackOffset = tweaken - thack - tspacer;\\r\\n    let tGrowOffset = tweaken + tspacer - tgrow;\\r\\n    let tGrowWeakenOffset = tspacer + tspacer;\\r\\n\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, hackWeakenThreads, targetname, 0, tag); // hack weaken, 0ms offset, finish 2nd\\r\\n    ns.exec(\\\"weaken.js\\\", hostname, growWeakenThreads, targetname, tGrowWeakenOffset, tag); // grow weaken, --ms offset, finish 4th\\r\\n    ns.exec(\\\"grow.js\\\", hostname, growThreads, targetname, tGrowOffset, tag); // --ms offset, finish 3rd\\r\\n    ns.exec(\\\"hack.js\\\", hostname, hackThreads, targetname, tHackOffset, tag); // --ms offset, finish 1st\\r\\n}\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    let ramOverride = ns.args[1];\\r\\n    let _hostname = ns.getHostname();\\r\\n    let _targetname = ns.args[0];\\r\\n    if (!_targetname) _targetname = \\\"lexo-corp\\\";\\r\\n    let host = ns.getServer(_hostname);\\r\\n    let target = ns.getServer(_targetname);\\r\\n\\r\\n    let lowThresholdFactor = 0.94;\\r\\n    let highThresholdFactor = 1;\\r\\n    let lowMoney = target.moneyMax * lowThresholdFactor;\\r\\n    let highMoney = target.moneyMax * highThresholdFactor;\\r\\n\\r\\n    if (!ns.fileExists(\\\"grow.js\\\", host.hostname)) await ns.scp(\\\"grow.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"weaken.js\\\", host.hostname)) await ns.scp(\\\"weaken.js\\\", \\\"home\\\", host.hostname);\\r\\n    if (!ns.fileExists(\\\"hack.js\\\", host.hostname)) await ns.scp(\\\"hack.js\\\", \\\"home\\\", host.hostname);\\r\\n\\r\\n    let growRam = ns.getScriptRam(\\\"grow.js\\\"); // 1.75GB\\r\\n    let weakenRam = ns.getScriptRam(\\\"weaken.js\\\"); // 1.75GB\\r\\n    let hackRam = ns.getScriptRam(\\\"hack.js\\\"); // 1.70GB\\r\\n\\r\\n    let ramAllowance = host.maxRam - host.ramUsed;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 48;\\r\\n\\r\\n    if (ramOverride) {\\r\\n        if (ramOverride < 1) {\\r\\n            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0;\\r\\n            if (debug)\\r\\n                ns.tprintf(\\r\\n                    \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n                    ramFraction,\\r\\n                    ramOverride,\\r\\n                    ramAllowance\\r\\n                );\\r\\n            ramAllowance = ramFraction;\\r\\n        } else {\\r\\n            if (debug) ns.tprintf(\\\"Overriding availble host RAM max to %.2f\\\", ramOverride);\\r\\n            ramAllowance = Math.min(ramOverride, ramAllowance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", ramAllowance);\\r\\n\\r\\n    // Weaken to minimum security\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.hackDifficulty > target.minDifficulty) {\\r\\n        doWeaken(ns, host.hostname, target.hostname, ramAllowance);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldHackDifficulty = target.hackDifficulty;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\\"  Lowered Security from %.2f to %.2f\\\", oldHackDifficulty, target.hackDifficulty);\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Grow to high threshold money\\r\\n    target = ns.getServer(target.hostname);\\r\\n    while (target.moneyAvailable < highMoney) {\\r\\n        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney);\\r\\n        while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname)) await ns.sleep(500);\\r\\n\\r\\n        if (debug) {\\r\\n            let oldMoney = target.moneyAvailable;\\r\\n            target = ns.getServer(target.hostname);\\r\\n            ns.tprintf(\\r\\n                \\\"  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)\\\",\\r\\n                target.hostname,\\r\\n                ns.nFormat(oldMoney, \\\"($0.000a)\\\"),\\r\\n                ns.nFormat(target.moneyAvailable, \\\"($0.000a)\\\"),\\r\\n                (target.moneyAvailable / target.moneyMax) * 100,\\r\\n                target.hackDifficulty,\\r\\n                target.minDifficulty\\r\\n            );\\r\\n        } else {\\r\\n            target = ns.getServer(target.hostname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Hack the world\\r\\n    let tspacer = 200;\\r\\n    let tCycleSpacer = tspacer * 4;\\r\\n    let tweaken = ns.getWeakenTime(target.hostname);\\r\\n    let tweakenFullCycle = tweaken + tspacer * 3;\\r\\n    let hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads;\\r\\n    [hgwCycles, hackWeakenThreads, growWeakenThreads, hackThreads, growThreads] = calcHGWThreadsSmart(\\r\\n        ns,\\r\\n        host.hostname,\\r\\n        target.hostname,\\r\\n        ramAllowance,\\r\\n        tspacer\\r\\n    );\\r\\n    while (true) {\\r\\n        for (let i = 0; i < hgwCycles; i++) {\\r\\n            if (i !== 0) await ns.sleep(tCycleSpacer);\\r\\n            launchHGW(\\r\\n                ns,\\r\\n                host.hostname,\\r\\n                target.hostname,\\r\\n                tspacer,\\r\\n                i,\\r\\n                hackWeakenThreads,\\r\\n                growWeakenThreads,\\r\\n                hackThreads,\\r\\n                growThreads\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let sleepTimer = tweakenFullCycle - hgwCycles * tCycleSpacer + tCycleSpacer;\\r\\n        if (sleepTimer > 0) await ns.sleep(sleepTimer);\\r\\n\\r\\n        // while (ns.isRunning(\\\"weaken.js\\\", host.hostname, target.hostname, 400, \\\"9\\\")) {\\r\\n        //     await ns.sleep(50)\\r\\n        //     if (debug) {\\r\\n        //         let oldMoney = target.moneyAvailable\\r\\n        //         let oldSec = target.hackDifficulty\\r\\n        //         target = ns.getServer(target.hostname)\\r\\n\\r\\n        //         if (oldMoney != target.moneyAvailable)\\r\\n        //             ns.tprintf(\\\"  Hack: %s available money changed from %s to %s (%.2f%% of Max)\\\",\\r\\n        //                 target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)\\r\\n\\r\\n        //         if (oldSec != target.hackDifficulty)\\r\\n        //             ns.tprintf(\\\"  Hack: %s security changed from %.2f to %.2f (min: %.2f)\\\",\\r\\n        //                 target.hostname, oldSec, target.hackDifficulty, target.minDifficulty)\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"dispatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12,\"server\":\"home\",\"moduleSequenceNumber\":76823,\"_hash\":\"5f497832fdb533ac5996f4b7912cf8234acdd40fd8e44db2c1713b86709b6b8e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, softenServer, doProgramBuys, canExecuteOnServer } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function calcHackRate(ns, hostname, targetname, simMinutes = 2) {\\r\\n    let env = new SuperHackEnv(ns, targetname, [hostname]);\\r\\n    env.simEnabled = true;\\r\\n\\r\\n    // simulate for 10 minutes\\r\\n    //ns.tprintf(\\\"Running fastSim on %s=>%s\\\", env.hostname, env.targetname)\\r\\n    let income = env.fastSim(ns, 1000 * 60 * simMinutes);\\r\\n\\r\\n    // ns.tprintf(\\r\\n    //     \\\"Running Hack Rate on %s=>%s (%.2fGB Ram Allowance): %s/s\\\",\\r\\n    //     env.hostname,\\r\\n    //     env.targetname,\\r\\n    //     env.ramAllowance,\\r\\n    //     ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n    // );\\r\\n\\r\\n    return income;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nfunction getRamAllowance(ns, _host) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = host.maxRam;\\r\\n    //if (host.hostname === \\\"home\\\") ramAllowance -= 64;\\r\\n\\r\\n    return ramAllowance;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nasync function getOrderedTargetArr(ns, _host, simMinutes) {\\r\\n    let host = _host;\\r\\n    if (typeof host === \\\"string\\\" || host instanceof String) host = ns.getServer(host);\\r\\n\\r\\n    let ramAllowance = getRamAllowance(ns, host);\\r\\n    let hackRates = [];\\r\\n    let targetnames = allHosts()\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0);\\r\\n    for (let targetname of targetnames) {\\r\\n        hackRates.push([targetname, await calcHackRate(ns, host.hostname, targetname, simMinutes)]);\\r\\n    }\\r\\n\\r\\n    return hackRates.sort((a, b) => b[1] - a[1]);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./index.d\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n    let attackScript = \\\"super_hack_adv.js\\\";\\r\\n    let attackLib = \\\"super_hack_env.js\\\";\\r\\n\\r\\n    doProgramBuys();\\r\\n\\r\\n    // soften all servers\\r\\n    for (const hostName of allHostnames) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping server size to server name array (with a special bucket for \\\"home\\\")\\r\\n    let hostSizeDict = {};\\r\\n    for (let hostname of allHostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => ns.getServerMaxRam(hostname) >= 32)) {\\r\\n        let key = ns.getServerMaxRam(hostname);\\r\\n\\r\\n        if (hostname === \\\"home\\\") key = \\\"home\\\";\\r\\n\\r\\n        if (!(key in hostSizeDict)) hostSizeDict[key] = [];\\r\\n\\r\\n        hostSizeDict[key].push(hostname);\\r\\n    }\\r\\n\\r\\n    // create a dictionary mapping host server sizes to ordered target arrays\\r\\n    let targetArrDict = {};\\r\\n    let badhosts = [];\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        let orderedTargetArr = await getOrderedTargetArr(ns, value[0], ns.args[0]);\\r\\n        if (orderedTargetArr[0][1] === 0) {\\r\\n            ns.tprintf(\\r\\n                \\\"Host %s does not have enough ram (%d) to execute a hack script\\\",\\r\\n                value[0],\\r\\n                ns.getServerMaxRam(value[0])\\r\\n            );\\r\\n            badhosts.push(value[0]);\\r\\n        } else {\\r\\n            targetArrDict[key] = orderedTargetArr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // purge hosts that can't sustain hack scripts\\r\\n    for (let hostname of badhosts) {\\r\\n        delete hostSizeDict[hostname];\\r\\n    }\\r\\n\\r\\n    // collect target arrays into a single array ordered by value and including the server size bucket information\\r\\n    let allTargets = [];\\r\\n    for (const [key, values] of Object.entries(targetArrDict)) {\\r\\n        for (let value of values) {\\r\\n            allTargets.push({\\r\\n                size: key,\\r\\n                targetname: value[0],\\r\\n                income: value[1],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    allTargets = allTargets.sort((a, b) => b.income - a.income);\\r\\n\\r\\n    // Set up tracker to decide how many targets are needed for each bucket\\r\\n    let bucketTracker = {};\\r\\n    for (const [key, value] of Object.entries(hostSizeDict)) {\\r\\n        bucketTracker[key] = value.length;\\r\\n    }\\r\\n\\r\\n    // Iterate over allTargets, taking the next best target/bucket pair and removing all lesser targets in the\\r\\n    // array. If all hosts in a bucket are accounted for, remove all lesser targets using that bucket. Finish\\r\\n    // iterating once either all host servers are accounted for, or we've run out of targets.\\r\\n    let finalTargets = [];\\r\\n    while (allTargets.length > 0) {\\r\\n        let target = allTargets.shift();\\r\\n        allTargets = allTargets.filter((t) => target.targetname !== t.targetname);\\r\\n\\r\\n        if (--bucketTracker[target.size] === 0) {\\r\\n            allTargets = allTargets.filter((t) => target.size !== t.size);\\r\\n        }\\r\\n\\r\\n        finalTargets.push(target);\\r\\n    }\\r\\n\\r\\n    // Assign a target to a host in the target's bucket. Kill all hosts that are attacking targets not in this bucket.\\r\\n    // Check to see if a host in the target's bucket is already attacking the target. If it is, skip the target. Otherwise\\r\\n    // kick off attack on that target.\\r\\n    for (const [bucket, hostnames] of Object.entries(hostSizeDict)) {\\r\\n        // get all targets for this bucket\\r\\n        let targetnames = [];\\r\\n        for (let target of finalTargets) {\\r\\n            if (target.size === bucket) targetnames.push(target.targetname);\\r\\n        }\\r\\n\\r\\n        // iterate over all hosts in this bucket, if the host is free, run the attack script on it with one of the targets\\r\\n        for (let hostname of hostnames) {\\r\\n            await ns.scp(attackScript, \\\"home\\\", hostname);\\r\\n            await ns.scp(attackLib, \\\"home\\\", hostname);\\r\\n\\r\\n            let targetname = targetnames.shift();\\r\\n            ns.tprintf(\\\"Starting %s on %s targeting %s\\\", attackScript, hostname, targetname);\\r\\n            ns.exec(attackScript, hostname, 1, targetname);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let target of finalTargets) {\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: %10s/s %s\\\",\\r\\n            target.targetname,\\r\\n            ns.nFormat(target.income, \\\"($0.000a)\\\"),\\r\\n            target.size.toString()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Algorithm:\\r\\n        collect target arrays for each server size for all purchased servers and home\\r\\n        collate targets per income for all servers of size purchasedServers.length + 1 (+1 for home) ???\\r\\n        go down list from top to bottom, inspect servers at the same tier to see if the current target is being run at that tier\\r\\n            if the target is being run at that tier, continue to the next target\\r\\n            else kill the lowest producing target and start the current target on the newly freed server\\r\\n        when starting a new target, specify the income of the target in the arg list so it can be compared later\\r\\n\\r\\n    Colate:\\r\\n        Iterate over all tier arrays at the same time\\r\\n        Compare current item on all arrays, pick item with the highest income\\r\\n        if item.server is not in the master list, pop the item, add the item to the master list and increment a tracking variable for that tier\\r\\n            if the tier is full (tracker === tier.length) then clear out that tier's list or stop tracking it\\r\\n        if item.server is in the master list already, pop the item without adding it to the list\\r\\n        if all tiers are full, you're done\\r\\n\\r\\n    Launching new dispatcher:\\r\\n        scp dispatcher.js to the host server, exec dispatcher.js with the target, 1 thread\\r\\n    */\\r\\n}\",\"filename\":\"eff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///b1e8fedd-bb3c-4576-8e77-f028dc740123\",\"moduleSequenceNumber\":167684},{\"filename\":\"util.js\",\"url\":\"blob:file:///bf410739-e899-46b9-8a95-dda844715459\",\"moduleSequenceNumber\":167680},{\"filename\":\"eff.js\",\"url\":\"blob:file:///cf0828a5-144e-4fe3-9fec-cdbb3b233bc7\",\"moduleSequenceNumber\":171422}],\"dependents\":[],\"ramUsage\":18,\"server\":\"home\",\"moduleSequenceNumber\":76824,\"_hash\":\"deca27d53fa75b3fb893f3efb941a97068eb3c26e73668b8710896e640f1781e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let script = ns.args[0];\\r\\n    let host = ns.args[1];\\r\\n    let args = ns.args.slice(2);\\r\\n    let doSpawn = false;\\r\\n\\r\\n    if (host === \\\"local\\\") {\\r\\n        host = ns.getHostname();\\r\\n        doSpawn = true;\\r\\n    }\\r\\n\\r\\n    if (!ns.fileExists(script, \\\"home\\\")) {\\r\\n        ns.tprintf(\\\"[%s] ERROR: %s does not exist on home server\\\", ns.getScriptName(), script, host);\\r\\n        return;\\r\\n    }\\r\\n    await ns.scp(script, \\\"home\\\", host);\\r\\n\\r\\n    let scriptRam = ns.getScriptRam(script, host);\\r\\n    let hostMaxRam = ns.getServerMaxRam(host);\\r\\n\\r\\n    if (host === \\\"home\\\") hostMaxRam -= 128;\\r\\n\\r\\n    let threads = Math.floor(hostMaxRam / scriptRam);\\r\\n\\r\\n    if (threads <= 0) return;\\r\\n\\r\\n    if (doSpawn) {\\r\\n        ns.tprintf(\\\"Spawning %s@%s on %s over %d threads\\\", script, host, args.toString(), threads);\\r\\n        ns.spawn(script, threads, ...args);\\r\\n    } else {\\r\\n        ns.killall(host);\\r\\n        let pid = ns.exec(script, host, threads, ...args);\\r\\n        ns.tprintf(\\\"Executing %s@%s on %s over %d threads [pid: %d]\\\", script, host, args.toString(), threads, pid);\\r\\n    }\\r\\n}\",\"filename\":\"exec_max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":76825,\"_hash\":\"263e1c80029d743a6ea1734d9ee826478a5d4b882ff9b19eede2d3aeeb026061\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    function favorToRep(f) {\\r\\n        const raw = 25000 * (Math.pow(1.02, f) - 1);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n\\r\\n    function repToFavor(r) {\\r\\n        const raw = Math.log(r / 25000 + 1) / Math.log(1.02);\\r\\n        return Math.round(raw * 10000) / 10000; // round to make things easier.\\r\\n    }\\r\\n\\r\\n    for (let faction of ns.getPlayer().factions) {\\r\\n        const favor = ns.getFactionFavor(faction);\\r\\n        const targetRep = favorToRep(150);\\r\\n        const currentRep =\\r\\n            ns.getFactionRep(faction) +\\r\\n            (ns.getPlayer().currentWorkFactionName === faction ? ns.getPlayer().workRepGained : 0);\\r\\n        const storedRep = Math.max(0, favorToRep(favor));\\r\\n        const totalRep = currentRep + storedRep;\\r\\n\\r\\n        const fTotal = repToFavor(currentRep + storedRep);\\r\\n        const fGain = fTotal - favor;\\r\\n\\r\\n        if (favor > 150) continue;\\r\\n\\r\\n        let successStr = \\\"\\\";\\r\\n        if (favor + fGain > 150) {\\r\\n            successStr = \\\" (SUCCESS)\\\";\\r\\n        }\\r\\n\\r\\n        let needStr = \\\" \\\";\\r\\n        if (totalRep < targetRep) {\\r\\n            needStr = ns.sprintf(\\\" | Need +%s Rep\\\", ns.nFormat(targetRep - totalRep, \\\"0.000a\\\"));\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"%s => %.2f + %.2f = %.2f%s%s\\\", faction, favor, fGain, favor + fGain, needStr, successStr);\\r\\n    }\\r\\n}\",\"filename\":\"favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"favor.js\",\"url\":\"blob:file:///7d99d292-9c1f-4905-ab68-a07db5c49956\",\"moduleSequenceNumber\":89558}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":76826,\"_hash\":\"04341c97a4a67c1392a728df7896aa6866c240d584c64972c20e7a19fb1bd555\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///636c8c3d-3ead-40e4-aa06-6391bd882238\",\"moduleSequenceNumber\":76608}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":76827,\"_hash\":\"b08d8b036d0b2405f07120006bb2f146642e99e52fb3f7a04700372e957b55da\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\"./index.d\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostName) {\\r\\n    let server = ns.getServer(hostName);\\r\\n\\r\\n    if (server.hasAdminRights) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!server.sshPortOpen && ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.ftpPortOpen && ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.httpPortOpen && ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.smtpPortOpen && ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostName);\\r\\n    }\\r\\n\\r\\n    if (!server.sqlPortOpen && ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostName);\\r\\n    }\\r\\n\\r\\n    server = ns.getServer(hostName);\\r\\n    if (server.openPortCount >= server.numOpenPortsRequired) {\\r\\n        ns.nuke(hostName);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostName) {\\r\\n    const server = ns.getServer(hostName);\\r\\n    return server.hasAdminRights;\\r\\n}\",\"filename\":\"gsutil.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":76828,\"_hash\":\"aac5784890703b060a612aba7fa260dea62e594c9ccede0dd98309a01e30a5f3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d487120d-fee0-410f-849c-d8fd39772070\",\"moduleSequenceNumber\":76609}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":76829,\"_hash\":\"75544967ee336490ed82243eb65d4eecaa83f5628336585be9654906e865df41\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 50;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"Weaken\\\",\\r\\n    GW: \\\"Grow and Weaken\\\",\\r\\n    HW: \\\"Hack and Weaken\\\",\\r\\n    HGW: \\\"Hack, Grow, and Weaken\\\",\\r\\n};\\r\\n\\r\\nexport class HackEnv {\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostname = \\\"\\\", ramAllowance = -1, highMoney = -1, lowMoney = -1, tspacer = TSPACER) {\\r\\n        this.targetname = targetname;\\r\\n        this.hostname = hostname === \\\"\\\" ? ns.getHostname() : hostname;\\r\\n        this.ramAllowance =\\r\\n            ramAllowance === -1\\r\\n                ? ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)\\r\\n                : ramAllowance < 1\\r\\n                ? (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) * ramAllowance\\r\\n                : ramAllowance;\\r\\n        this.highMoney = highMoney === -1 ? ns.getServerMaxMoney(this.targetname) : highMoney;\\r\\n        this.lowMoney = lowMoney === -1 ? ns.getServerMaxMoney(this.targetname) * 0.5 : lowMoney;\\r\\n        this.tspacer = tspacer; // CONST\\r\\n        this.useAllRam = true;\\r\\n\\r\\n        this.cores = ns.getServer(this.hostname).cpuCores;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.ramPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    async prep(ns) {\\r\\n        if (!ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (!ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getWeakenTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.growTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getGrowTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.getHackTime(this.targetname);\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    calcGrowThreads(ns) {\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (debug) {\\r\\n            switch (this.state) {\\r\\n                case HackState.W:\\r\\n                    ns.tprintf(\\r\\n                        \\\"WEAKEN: %s:%s => Lowered Security from %.2f to %.2f (min: %.2f)\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns),\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.GW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Grow %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"GROW-WEAKEN: %s:%s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HW:\\r\\n                    let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Hack %d; Weaken %d; Total RAM %.2f\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.ramPerCycle\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-WEAKEN: %s:%s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                case HackState.HGW:\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total RAM %.2f/%.2f; Total Cycles %d/%d\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        this.hackThreads,\\r\\n                        this.growThreads,\\r\\n                        this.weakenThreadsHack,\\r\\n                        this.weakenThreadsGrow,\\r\\n                        this.ramPerCycle,\\r\\n                        this.ramPerCycle * this.cycleTotal,\\r\\n                        this.cycleTotal,\\r\\n                        this.cycleMax\\r\\n                    );\\r\\n                    ns.tprintf(\\r\\n                        \\\"HACK-GROW-WEAKEN: %s:%s => Cycle Complete; %s Available; Hacked %s (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        this.hostname,\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    );\\r\\n                    break;\\r\\n                default:\\r\\n                    // Do Nothing\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    printRamOverride(ns) {\\r\\n        let maxRam = ns.getServerMaxRam(this.hostname);\\r\\n        let ramFraction = maxRam / this.ramAllowance;\\r\\n        ns.tprintf(\\r\\n            \\\"Overriding availble host RAM max to %.2f (%.2f%% of %.2f)\\\",\\r\\n            this.ramAllowance,\\r\\n            (this.ramAllowance / maxRam) * 100,\\r\\n            maxRam\\r\\n        );\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = Math.ceil(secDiff / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n\\r\\n        if (this.ramPerCycle > this.ramAllowance || this.useAllRam) {\\r\\n            this.weakenThreads = Math.floor(this.ramAllowance / this.weakenRam);\\r\\n            this.ramPerCycle = this.weakenThreads * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        let growThreadsFull = this.growThreads;\\r\\n        if (this.useAllRam) this.growThreads = Math.floor(this.ramAllowance / this.growRam);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.growThreads * this.growRam + this.weakenThreadsGrow * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        let useAllRamState = this.useAllRam;\\r\\n        this.useAllRam = true;\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n        this.useAllRam = useAllRamState;\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n\\r\\n        while (this.ramPerCycle > this.ramAllowance || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.ramPerCycle = this.hackThreads * this.hackRam + this.weakenThreadsHack * this.weakenRam;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        this.hackThreads = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        let hackThreadsFull = this.hackThreads;\\r\\n        this.hackThreads = Math.floor(this.ramAllowance / this.hackRam);\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        let setCycle = function () {\\r\\n            if (this.cycleTotal <= 0) return 0;\\r\\n            let ramCycleAllowance = Math.floor((this.ramAllowance / this.cycleTotal) * 100) / 100;\\r\\n            if (ramCycleAllowance < 16) return 0;\\r\\n\\r\\n            this.hackThreads = Math.floor(ramCycleAllowance / this.hackRam);\\r\\n            this.hackThreadStep = Math.floor(this.hackThreads * 0.01);\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.ramPerCycle =\\r\\n                this.hackThreads * this.hackRam +\\r\\n                this.growThreads * this.growRam +\\r\\n                this.weakenThreadsHack * this.weakenRam +\\r\\n                this.weakenThreadsGrow * this.weakenRam;\\r\\n\\r\\n            let failcycles = 0;\\r\\n\\r\\n            if (this.ramPerCycle > ramCycleAllowance) {\\r\\n                let hackThreadRam =\\r\\n                    ramCycleAllowance *\\r\\n                    (this.hackThreads /\\r\\n                        (this.hackThreads + this.growThreads + this.weakenThreadsHack + this.weakenThreadsGrow));\\r\\n                \\r\\n                this.hackThreads = Math.floor(hackThreadRam / this.hackRam) + 1\\r\\n            }\\r\\n\\r\\n            while (this.ramPerCycle > ramCycleAllowance) {\\r\\n                failcycles++;\\r\\n                this.hackThreads--;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.ramPerCycle =\\r\\n                    this.hackThreads * this.hackRam +\\r\\n                    this.growThreads * this.growRam +\\r\\n                    this.weakenThreadsHack * this.weakenRam +\\r\\n                    this.weakenThreadsGrow * this.weakenRam;\\r\\n            }\\r\\n\\r\\n            //ns.tprintf(\\\"failcycles: %d\\\", failcycles)\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            let cycleIncome = (this.hackTotal * this.cycleTotal) / this.cycleBatchTime;\\r\\n\\r\\n            return cycleIncome;\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n\\r\\n        // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n        // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n        // returns 0\\r\\n        let cycleMax;\\r\\n        for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n            this.cycleTotal = cycleMax;\\r\\n            cycleIncomes[cycleMax] = setCycle();\\r\\n\\r\\n            if (cycleIncomes[cycleMax] > 0) break;\\r\\n        }\\r\\n        cycleMax++;\\r\\n\\r\\n        // find local maximum of cycleIncomes\\r\\n        // target center value,\\r\\n        //  if value to left of target is larger than target, recenter target to left of current target\\r\\n        //  if value to right of target is larger than target, recenter target to right of current target\\r\\n        //  if values to left and right of target are both less than target, keep target\\r\\n        let cycleMin = 0;\\r\\n        let cycleTarget = 0;\\r\\n        while (true) {\\r\\n            cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n            if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n            if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget - 1;\\r\\n                cycleIncomes[cycleTarget - 1] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                this.cycleTotal = cycleTarget;\\r\\n                cycleIncomes[cycleTarget] = setCycle();\\r\\n            }\\r\\n            if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                this.cycleTotal = cycleTarget + 1;\\r\\n                cycleIncomes[cycleTarget + 1] = setCycle();\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget + 1]) {\\r\\n                cycleMin = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (cycleIncomes[cycleTarget] < cycleIncomes[cycleTarget - 1]) {\\r\\n                cycleMax = cycleTarget;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        this.cycleTotal = cycleTarget;\\r\\n        setCycle();\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreads, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, growOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsGrow, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, hackOffsetTime);\\r\\n        ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n            ns.exec(WEAKENNS, this.hostname, this.weakenThreadsHack, this.targetname, cycleOffsetTime); // hack weaken, Start 1st (0ms offset), finish 2nd\\r\\n            ns.exec(\\r\\n                WEAKENNS,\\r\\n                this.hostname,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.targetname,\\r\\n                cycleOffsetTime + weakenGrowOffsetTime\\r\\n            ); // grow weaken, Start 2nd, finish 4th\\r\\n            ns.exec(GROWNS, this.hostname, this.growThreads, this.targetname, cycleOffsetTime + growOffsetTime); // Start 3rd, finish 3rd\\r\\n            ns.exec(HACKNS, this.hostname, this.hackThreads, this.targetname, cycleOffsetTime + hackOffsetTime); // Start 4th, finish 1st\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        let ps = ns.ps(this.hostname);\\r\\n        for (let psInfo of ps) {\\r\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\"./index.d\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n}\",\"filename\":\"hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.1,\"server\":\"home\",\"moduleSequenceNumber\":76830,\"_hash\":\"0dea34f2d6d06431e687275b137a68bb85f33bfef2f2f76bf97673dded4cc3f0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} _ns **/\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(hostname) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(hostname) + 5;\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(hostname);\\r\\n        } else if (ns.getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(hostname);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack_me.js\",\"url\":\"blob:file:///3e3f1a7a-ad1b-4eab-8bb8-da836063a816\",\"moduleSequenceNumber\":1533}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":76831,\"_hash\":\"2af89ff0aad28934ae762d6d948bf8dc13ee55e73b77a3b96d92856bf63e341c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, allHosts } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n    for (let hostname of allHosts()) {\\r\\n        if (hostname === \\\"home\\\") continue;\\r\\n        ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n\\tfor (let ps of ns.ps(\\\"home\\\")) {\\r\\n\\t\\tif (ps.filename === \\\"ka.js\\\" || ps.filename === \\\"clock.js\\\")\\r\\n\\t\\t\\tcontinue\\r\\n    \\tns.kill(ps.pid)\\r\\n\\t}\\r\\n}\",\"filename\":\"ka.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///6b931cbf-be5d-4962-b583-e88f8f16c380\",\"moduleSequenceNumber\":76840},{\"filename\":\"ka.js\",\"url\":\"blob:file:///245b283d-e355-4d99-8782-7da99d3869fd\",\"moduleSequenceNumber\":78369}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":78369,\"_hash\":\"c40b1517138d1fdaecb947feb5f5efdce507af5e0d6ea51141442ab63b12abc5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nfunction isScript(filename) {\\r\\n    return filename.indexOf(\\\".js\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isProgram(filename) {\\r\\n    return filename.indexOf(\\\".exe\\\") != -1;\\r\\n}\\r\\n\\r\\nfunction isOther(filename) {\\r\\n    return !isScript(filename) && !isProgram(filename);\\r\\n}\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    let hostname = ns.getHostname();\\r\\n    if (ns.args[0] && ns.serverExists(ns.args[0])) {\\r\\n        hostname = ns.args[0];\\r\\n    }\\r\\n\\r\\n    let filenames = ns.ls(hostname);\\r\\n    let scriptnames = filenames.filter(isScript);\\r\\n    let programnames = filenames.filter(isProgram);\\r\\n    let othernames = filenames.filter(isOther);\\r\\n\\r\\n    let maxFileLength = 0;\\r\\n    filenames.map(function (name) {\\r\\n        if (name.length > maxFileLength) maxFileLength = name.length;\\r\\n    });\\r\\n\\r\\n    if (scriptnames.length) {\\r\\n        ns.tprintf(\\\"======== SCRIPTS ========\\\");\\r\\n        for (const filename of scriptnames)\\r\\n            ns.tprintf(\\r\\n                `  %-${maxFileLength}s [RAM: %5.2fGB] %s`,\\r\\n                filename,\\r\\n                ns.getScriptRam(filename, hostname),\\r\\n                ns.scriptRunning(filename, hostname) ? \\\"RUNNING\\\" : \\\"\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    if (programnames.length) {\\r\\n        ns.tprintf(\\\"======== PROGRAMS =======\\\");\\r\\n        for (const filename of programnames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n\\r\\n    if (othernames.length) {\\r\\n        ns.tprintf(\\\"========= OTHER =========\\\");\\r\\n        for (const filename of othernames) ns.tprintf(`  %-${maxFileLength}s`, filename);\\r\\n    }\\r\\n}\",\"filename\":\"ll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ll.js\",\"url\":\"blob:file:///8884713c-8401-4060-b11c-22627253d226\",\"moduleSequenceNumber\":71433}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":76833,\"_hash\":\"82ebb9254df0112b191fded0adee64cb18a800b6a4e61a6c2b36ba22a3106445\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, mapHosts, doBuyAndSoftenAll } from \\\"./util.js\\\";\\r\\n\\r\\nfunction printAugStats(ns, stats) {\\r\\n    if (stats.agility_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_exp_mult\\\", stats.agility_exp_mult);\\r\\n    if (stats.agility_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"agility_mult\\\", stats.agility_mult);\\r\\n    if (stats.bladeburner_analysis_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_analysis_mult\\\", stats.bladeburner_analysis_mult);\\r\\n    if (stats.bladeburner_max_stamina_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_max_stamina_mult\\\", stats.bladeburner_max_stamina_mult);\\r\\n    if (stats.bladeburner_stamina_gain_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_stamina_gain_mult\\\", stats.bladeburner_stamina_gain_mult);\\r\\n    if (stats.bladeburner_success_chance_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"bladeburner_success_chance_mult\\\", stats.bladeburner_success_chance_mult);\\r\\n    if (stats.charisma_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_exp_mult\\\", stats.charisma_exp_mult);\\r\\n    if (stats.charisma_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"charisma_mult\\\", stats.charisma_mult);\\r\\n    if (stats.company_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"company_rep_mult\\\", stats.company_rep_mult);\\r\\n    if (stats.crime_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_money_mult\\\", stats.crime_money_mult);\\r\\n    if (stats.crime_success_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"crime_success_mult\\\", stats.crime_success_mult);\\r\\n    if (stats.defense_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_exp_mult\\\", stats.defense_exp_mult);\\r\\n    if (stats.defense_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"defense_mult\\\", stats.defense_mult);\\r\\n    if (stats.dexterity_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_exp_mult\\\", stats.dexterity_exp_mult);\\r\\n    if (stats.dexterity_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"dexterity_mult\\\", stats.dexterity_mult);\\r\\n    if (stats.faction_rep_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"faction_rep_mult\\\", stats.faction_rep_mult);\\r\\n    if (stats.hacking_chance_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_chance_mult\\\", stats.hacking_chance_mult);\\r\\n    if (stats.hacking_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_exp_mult\\\", stats.hacking_exp_mult);\\r\\n    if (stats.hacking_grow_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_grow_mult\\\", stats.hacking_grow_mult);\\r\\n    if (stats.hacking_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_money_mult\\\", stats.hacking_money_mult);\\r\\n    if (stats.hacking_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_mult\\\", stats.hacking_mult);\\r\\n    if (stats.hacking_speed_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacking_speed_mult\\\", stats.hacking_speed_mult);\\r\\n    if (stats.hacknet_node_core_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_core_cost_mult\\\", stats.hacknet_node_core_cost_mult);\\r\\n    if (stats.hacknet_node_level_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_level_cost_mult\\\", stats.hacknet_node_level_cost_mult);\\r\\n    if (stats.hacknet_node_money_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_money_mult\\\", stats.hacknet_node_money_mult);\\r\\n    if (stats.hacknet_node_purchase_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_purchase_cost_mult\\\", stats.hacknet_node_purchase_cost_mult);\\r\\n    if (stats.hacknet_node_ram_cost_mult)\\r\\n        ns.tprintf(\\\"    %31s: %.2f\\\", \\\"hacknet_node_ram_cost_mult\\\", stats.hacknet_node_ram_cost_mult);\\r\\n    if (stats.strength_exp_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_exp_mult\\\", stats.strength_exp_mult);\\r\\n    if (stats.strength_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"strength_mult\\\", stats.strength_mult);\\r\\n    if (stats.work_money_mult) ns.tprintf(\\\"    %31s: %.2f\\\", \\\"work_money_mult\\\", stats.work_money_mult);\\r\\n}\\r\\n\\r\\nclass Augmentation {\\r\\n    constructor(ns, name, faction) {\\r\\n        let ownedAugs = ns.getOwnedAugmentations(true);\\r\\n        let installedAugs = ns.getOwnedAugmentations();\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.price = ns.getAugmentationPrice(this.name);\\r\\n        this.rep = ns.getAugmentationRepReq(this.name);\\r\\n        this.prereq = ns.getAugmentationPrereq(this.name);\\r\\n        this.stats = ns.getAugmentationStats(this.name);\\r\\n        this.owned = ownedAugs.includes(this.name);\\r\\n        this.installed = installedAugs.includes(this.name);\\r\\n        this.purchaseable = ns.getFactionRep(faction) >= this.rep;\\r\\n        let dep = ns.getAugmentationPrereq(this.name)[0];\\r\\n        if (dep !== undefined && (ownedAugs.includes(dep) || installedAugs.includes(dep))) dep = undefined;\\r\\n        this.dep = dep;\\r\\n        let installedStr = this.installed\\r\\n            ? \\\"INSTALLED\\\"\\r\\n            : this.owned\\r\\n            ? \\\"OWNED\\\"\\r\\n            : this.purchaseable\\r\\n            ? \\\"PURCHASEABLE\\\"\\r\\n            : \\\"\\\";\\r\\n        this.str = `${this.faction}: ${this.name} - ${ns.nFormat(this.price, \\\"$0.000a\\\")} [${ns.nFormat(\\r\\n            this.rep,\\r\\n            \\\"0.000a\\\"\\r\\n        )}] ${installedStr}`;\\r\\n    }\\r\\n\\r\\n    toString() {\\r\\n        return this.str;\\r\\n    }\\r\\n\\r\\n    isHackUseful() {\\r\\n        if (this.name === \\\"Neuroflux Governor\\\") return false;\\r\\n        //return true;\\r\\n        if (this.stats.company_rep_mult) return true;\\r\\n        if (this.stats.faction_rep_mult) return true;\\r\\n        if (this.stats.hacking_chance_mult) return true;\\r\\n        if (this.stats.hacking_exp_mult) return true;\\r\\n        if (this.stats.hacking_grow_mult) return true;\\r\\n        if (this.stats.hacking_money_mult) return true;\\r\\n        if (this.stats.hacking_mult) return true;\\r\\n        if (this.stats.hacking_speed_mult) return true;\\r\\n        if (\\r\\n            this.name === \\\"BitRunners Neurolink\\\" ||\\r\\n            this.name === \\\"CashRoot Starter Kit\\\" ||\\r\\n            this.name === \\\"PCMatrix\\\" ||\\r\\n            this.name === \\\"Neuroreceptor Management Implant\\\" ||\\r\\n            this.name === \\\"The Red Pill\\\"\\r\\n        )\\r\\n            return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\", \\\"fulcrumassets\\\", \\\"fulcrumtech\\\"];\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"omnitek\\\", \\\"kuai-gong\\\", \\\"megacorp\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        ns.print(hostName);\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    doBuyAndSoftenAll();\\r\\n    await doBackdoors(ns);\\r\\n\\r\\n    let player = ns.getPlayer();\\r\\n    let incomePerSec = player.money / (player.playtimeSinceLastAug / 1000);\\r\\n\\r\\n    ns.tprintf(`Income: ${ns.nFormat(incomePerSec, \\\"$0.000a\\\")}/s`);\\r\\n\\r\\n    let allFactions = [\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"The Covenant\\\",\\r\\n        \\\"ECorp\\\",\\r\\n        \\\"MegaCorp\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"Clarke Incorporated\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Four Sigma\\\",\\r\\n        \\\"KuaiGong International\\\",\\r\\n        \\\"Fulcrum Secret Technologies\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Sector-12\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"Speakers for the Dead\\\",\\r\\n        \\\"The Dark Army\\\",\\r\\n        \\\"The Syndicate\\\",\\r\\n        \\\"Silhouette\\\",\\r\\n        \\\"Tetrads\\\",\\r\\n        \\\"Slum Snakes\\\",\\r\\n        \\\"Netburners\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"CyberSec\\\",\\r\\n        // \\\"Bladeburners\\\",\\r\\n        // \\\"Church of the Machine God\\\"\\r\\n    ];\\r\\n\\r\\n    let checkFactions = player.factions.concat(ns.checkFactionInvitations());\\r\\n    let sortedFactions = checkFactions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n    //let sortedFactions = allFactions.sort((a, b) => ns.getFactionRep(b) - ns.getFactionRep(a));\\r\\n\\r\\n    let allPurchaseableAugs = [];\\r\\n    let topFaction = true;\\r\\n    for (let faction of sortedFactions) {\\r\\n        //for (let faction of allFactions) {\\r\\n        if (faction === \\\"Bladeburners\\\") continue;\\r\\n        let augs = ns\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .map((name) => {\\r\\n                return new Augmentation(ns, name, faction);\\r\\n            })\\r\\n            .sort((a, b) => a.rep - b.rep);\\r\\n        let augsToBuy = [];\\r\\n        for (let aug of augs) {\\r\\n            if (aug.isHackUseful() && !aug.owned) {\\r\\n                augsToBuy.push(aug);\\r\\n            }\\r\\n            if (aug.isHackUseful() && aug.purchaseable && !aug.owned && !aug.installed) {\\r\\n                allPurchaseableAugs.push(aug);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (augsToBuy.length === 0 && !topFaction) continue;\\r\\n\\r\\n        ns.tprintf(\\\"%s (rep: %d):\\\", faction, ns.getFactionRep(faction));\\r\\n        for (let aug of augsToBuy) {\\r\\n            ns.tprintf(\\\"  %s\\\", aug);\\r\\n            // printAugStats(aug.stats);\\r\\n        }\\r\\n\\r\\n        topFaction = false;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        let checkName = allPurchaseableAugs[i].name;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === checkName) {\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n            } else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    allPurchaseableAugs = allPurchaseableAugs.sort((a, b) => b.price - a.price);\\r\\n\\r\\n    // reorder array to buy dependent augs first and purge augs that cant be bought\\r\\n    // because of a missing dependency\\r\\n    for (let i = 0; i < allPurchaseableAugs.length; i++) {\\r\\n        let depName = allPurchaseableAugs[i].dep;\\r\\n        if (depName === undefined) continue;\\r\\n\\r\\n        let foundDep = false;\\r\\n        let j = i + 1;\\r\\n        while (j < allPurchaseableAugs.length) {\\r\\n            if (allPurchaseableAugs[j].name === depName) {\\r\\n                let tmp = allPurchaseableAugs[j];\\r\\n                // remove aug from current place\\r\\n                allPurchaseableAugs.splice(j, 1);\\r\\n                // place it before the main aug\\r\\n                allPurchaseableAugs.splice(i, 0, tmp);\\r\\n                foundDep = true;\\r\\n                i++;\\r\\n                break;\\r\\n            } else {\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // if we dont have the dependency queued, remove this aug from the buy list\\r\\n        if (!foundDep) {\\r\\n            ns.tprintf(\\r\\n                \\\"WARNING: Unable to find dependency %s:%s in the queue\\\",\\r\\n                allPurchaseableAugs[i].name,\\r\\n                allPurchaseableAugs[i].dep\\r\\n            );\\r\\n            allPurchaseableAugs.splice(i, 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // if (allPurchaseableAugs.length > 0) {\\r\\n    //     ns.tprintf(\\\"============================\\\");\\r\\n    //     let mult = 1;\\r\\n    //     let total = 0;\\r\\n    //     for (let aug of allPurchaseableAugs.filter(a => a.name !== \\\"The Red Pill\\\")) {\\r\\n    //         if (ns.args[0]) ns.purchaseAugmentation(aug.faction, aug.name);\\r\\n    //         ns.tprintf(\\r\\n    //             \\\"%40s - %9s %s\\\",\\r\\n    //             aug.name,\\r\\n    //             ns.nFormat(aug.price * mult, \\\"$0.000a\\\"),\\r\\n    //             aug.dep !== undefined ? aug.dep : \\\"\\\"\\r\\n    //         );\\r\\n    //         total += aug.price * mult;\\r\\n    //         mult *= 1.9;\\r\\n    //     }\\r\\n    //     ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    // }\\r\\n\\r\\n    if (allPurchaseableAugs.length > 0) {\\r\\n        ns.tprintf(\\\"============================\\\");\\r\\n        let mult = 1;\\r\\n        let total = Number.MAX_SAFE_INTEGER;\\r\\n        let startAug = 0;\\r\\n        let purchaseableAugs = allPurchaseableAugs.filter(a => a.name !== \\\"The Red Pill\\\")\\r\\n        while (startAug < purchaseableAugs.length) {\\r\\n            total = 0\\r\\n            mult = 1\\r\\n            for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n                total += purchaseableAugs[augIdx].price * mult;\\r\\n                mult *= 1.9;\\r\\n            }\\r\\n\\r\\n            if (total < ns.getPlayer().money)\\r\\n                break;\\r\\n            \\r\\n            startAug++\\r\\n        }\\r\\n\\r\\n        if (startAug === purchaseableAugs.length) {\\r\\n            ns.tprintf(\\\"All augs too expensive\\\")\\r\\n            return\\r\\n        }\\r\\n\\r\\n        total = 0\\r\\n        mult = 1\\r\\n        for (let augIdx = startAug; augIdx < purchaseableAugs.length; augIdx++) {\\r\\n            if (ns.args[0]) ns.purchaseAugmentation(purchaseableAugs[augIdx].faction, purchaseableAugs[augIdx].name);\\r\\n            ns.tprintf(\\r\\n                \\\"%40s - %9s %s\\\",\\r\\n                purchaseableAugs[augIdx].name,\\r\\n                ns.nFormat(purchaseableAugs[augIdx].price * mult, \\\"$0.000a\\\"),\\r\\n                purchaseableAugs[augIdx].dep !== undefined ? purchaseableAugs[augIdx].dep : \\\"\\\"\\r\\n            );\\r\\n            total += purchaseableAugs[augIdx].price * mult;\\r\\n            mult *= 1.9;\\r\\n        }\\r\\n\\r\\n        ns.tprintf(\\\"\\\\n%40s - %9s\\\", \\\"Total\\\", ns.nFormat(total, \\\"$0.000a\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"mcp.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///27740756-2f37-413a-b910-3e0a6bd45620\",\"moduleSequenceNumber\":76840},{\"filename\":\"mcp.js\",\"url\":\"blob:file:///672b6f23-b594-453e-b636-9a92293c52a0\",\"moduleSequenceNumber\":84629}],\"dependents\":[],\"ramUsage\":46.9,\"server\":\"home\",\"moduleSequenceNumber\":84629,\"_hash\":\"24a0c053112b9a248482866c6633bf845edd1ac3d9f8a884d354e5c1d86e2369\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    ns.tprintf(\\\"HELLO PUSHER #3\\\");\\r\\n}\",\"filename\":\"pusher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":76835,\"_hash\":\"1cf7271a574913b375ae86f15f8c0f6d35f1bca22e0a039b2bddb19a6ffe39fc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, mapHosts, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\nasync function doBackdoors(ns) {\\r\\n    const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\", \\\"b-and-a\\\", \\\"ecorp\\\"];\\r\\n    //const targetHosts = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\".\\\", \\\"w0r1d_d43m0n\\\"];\\r\\n    let hosts = mapHosts();\\r\\n\\r\\n    for (const [hostName, trail] of Object.entries(hosts)) {\\r\\n        let server = ns.getServer(hostName);\\r\\n        if (\\r\\n            !targetHosts.includes(hostName) ||\\r\\n            server.backdoorInstalled ||\\r\\n            server.requiredHackingSkill > ns.getHackingLevel() ||\\r\\n            !server.hasAdminRights\\r\\n        )\\r\\n            continue;\\r\\n\\r\\n        for (const hostHopName of trail) {\\r\\n            ns.connect(hostHopName);\\r\\n        }\\r\\n\\r\\n        await ns.installBackdoor();\\r\\n        ns.connect(\\\"home\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    setns(ns)\\r\\n\\r\\n    for (const hostName of allHosts()) {\\r\\n        softenServer(hostName);\\r\\n    }\\r\\n\\r\\n    await doBackdoors(ns);\\r\\n}\",\"filename\":\"soften.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///036161a2-b6d9-44df-bb3b-edd44df116ef\"},{\"filename\":\"soften.js\",\"url\":\"blob:file:///ddd41388-fefd-42c8-9ca8-8171c394b599\"}],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":76836,\"_hash\":\"0970d4484663f0afa74b5cbdf735a0acd1a80d1fe0f7c8d5d58a92513dd4d0a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, canExecuteOnServer, serverIsHackable, serverMaxMoneySortDesc, setns, softenServer } from \\\"./util.js\\\";\\r\\n\\r\\n/** @type import(\\\".\\\").NS */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    let hostnames = allHosts();\\r\\n    for (const hostname of hostnames) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n\\r\\n    let hackableHosts = hostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((hostname) => ns.getServerMaxMoney(hostname) > 0)\\r\\n        .sort(serverMaxMoneySortDesc);\\r\\n    let rootHostsNoPurchased = hostnames\\r\\n        .filter(canExecuteOnServer)\\r\\n        .filter((hostname) => (hostname.indexOf(\\\"pserv\\\") === -1 && hostname !== \\\"home\\\"));\\r\\n    let hackMeRam = ns.getScriptRam(\\\"hack_me.js\\\", \\\"home\\\");\\r\\n\\r\\n    let roundRobin = 0;\\r\\n    for (const hostname of rootHostsNoPurchased) {\\r\\n        let execMaxArgs = [\\\"hack_me.js\\\", hostname, hackableHosts[roundRobin % hackableHosts.length]];\\r\\n        ns.tprintf(\\\"%s %s %s\\\", \\\"exec_maxjns\\\", \\\"home\\\", execMaxArgs.toString());\\r\\n\\r\\n        while (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") < ns.getScriptRam(\\\"exec_max.js\\\"))\\r\\n            await ns.sleep(500);\\r\\n\\r\\n        ns.exec(\\\"exec_maxjns\\\", \\\"home\\\", 1, ...execMaxArgs);\\r\\n        roundRobin += 1;\\r\\n    }\\r\\n\\r\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\") - 64;\\r\\n    let ramSlice = homeRam / hackableHosts.length;\\r\\n    let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam);\\r\\n\\r\\n    if (hackMeHomeThreads <= 0) return;\\r\\n    for (const hostName of hackableHosts) {\\r\\n        ns.exec(\\\"hack_me.js\\\", \\\"home\\\", 1, hostName, ramSlice);\\r\\n    }\\r\\n}\",\"filename\":\"starter.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///03f54a7c-0c10-4fa3-a059-7a9733c9774c\",\"moduleSequenceNumber\":1521},{\"filename\":\"starter.js\",\"url\":\"blob:file:///14c5a908-7133-4001-bc5f-af8461b2566d\",\"moduleSequenceNumber\":1529}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":76837,\"_hash\":\"1c52e2e782f18832fed1d8c762765990cfb35fb902803f608e7718213e8ab3ad\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nconst debug = false;\\r\\n\\r\\n// TODO: Manage multiple target/host combos from a single manager\\r\\n// TODO: Incorporate sim into deciding to use GW/HW vs HGW\\r\\n// TODO: Incorporate eff's bucket/target search algorithm\\r\\n\\r\\n//** @param {NS} ns **/\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!ns.args[0]) {\\r\\n        ns.tprintf(\\\"ERROR: No target server defined\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let env = new SuperHackEnv(ns, ns.args[0], [ns.getHostname()]);\\r\\n    await env.init(ns);\\r\\n\\r\\n    if (debug) env.printRamOverride(ns);\\r\\n    if (debug) ns.tprintf(\\\"INFO: Availble host RAM %.2f\\\", env.ramAllowance);\\r\\n\\r\\n    env.simEnabled = false;\\r\\n    if (env.simEnabled) {\\r\\n        while (env.simTime < 1000 * 60 * 2) {\\r\\n            env.refresh(ns);\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"Time Elapsed: %s; Income %s | %s/s\\\",\\r\\n            ns.tFormat(env.simTime),\\r\\n            ns.nFormat(env.simIncome, \\\"($0.000a)\\\"),\\r\\n            ns.nFormat(env.simIncome / (env.simTime / 1000), \\\"($0.000a)\\\")\\r\\n        );\\r\\n    } else {\\r\\n        while (true) {\\r\\n            env.refresh(ns);\\r\\n            await ns.sleep(2000);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_adv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///9f7f33f3-ff31-4f7f-a6e8-19a82f44959e\",\"moduleSequenceNumber\":167684},{\"filename\":\"super_hack_adv.js\",\"url\":\"blob:file:///26c88115-4347-4715-ad0f-92d218fe0a64\",\"moduleSequenceNumber\":171703}],\"dependents\":[],\"ramUsage\":13.2,\"server\":\"home\",\"moduleSequenceNumber\":76838,\"_hash\":\"4cdcb47e9e9f525919d63cc1a6707c5cfa70e6b10aa8c212fa06a2989b57dd02\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    // while (ns.getPlayer().numPeopleKilled < 30) {\\r\\n    //     await ns.sleep(ns.commitCrime(\\\"homicide\\\") + 200)\\r\\n    // }\\r\\n\\r\\n    const crimes = [\\r\\n        \\\"shoplift\\\",\\r\\n        \\\"rob store\\\",\\r\\n        \\\"mug\\\",\\r\\n        \\\"larceny\\\",\\r\\n        \\\"drugs\\\",\\r\\n        \\\"bond forge\\\",\\r\\n        \\\"traffick arms\\\",\\r\\n        \\\"homicide\\\",\\r\\n        \\\"grand auto\\\",\\r\\n        \\\"kidnap\\\",\\r\\n        \\\"assassinate\\\",\\r\\n        \\\"heist\\\",\\r\\n    ];\\r\\n\\r\\n    for (const crimename of crimes) {\\r\\n        const crimeStats = ns.getCrimeStats(crimename);\\r\\n        ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    }\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///0f6b9aab-665d-419f-a2e9-26c059c8ec31\",\"moduleSequenceNumber\":17566}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":76839,\"_hash\":\"fcd9ca7533b2b3d20ef0f0c7d9b24ad45e45a7ddd188fbfcb6bdd03d81a93862\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nexport function setns(_ns) {\\r\\n    ns = _ns;\\r\\n}\\r\\n\\r\\nexport function myprint() {\\r\\n    let params = Array.prototype.slice.call(arguments, 1);\\r\\n    ns.tprintf(arguments[0], ...params);\\r\\n}\\r\\n\\r\\nexport function softenServer(hostname) {\\r\\n    if (ns.hasRootAccess(hostname)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let ports = 0;\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.ftpcrack(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.httpworm(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.relaysmtp(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.sqlinject(hostname);\\r\\n        ports++;\\r\\n    }\\r\\n\\r\\n    if (ports >= ns.getServerNumPortsRequired(hostname)) {\\r\\n        ns.nuke(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverIsHackable(hostname) {\\r\\n    return (\\r\\n        ns.hasRootAccess(hostname) &&\\r\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)\\r\\n    );\\r\\n}\\r\\n\\r\\nexport function canExecuteOnServer(hostname) {\\r\\n    return ns.hasRootAccess(hostname) && ns.getServerMaxRam(hostname) > 0;\\r\\n}\\r\\n\\r\\nexport function mapHosts(hosts = {}, parents = [], current = \\\"home\\\") {\\r\\n    let newParents = parents.concat(current);\\r\\n    hosts[current] = newParents;\\r\\n\\r\\n    let children = ns.scan(current).filter((element) => !parents.includes(element));\\r\\n    for (const child of children) {\\r\\n        mapHosts(hosts, newParents, child);\\r\\n    }\\r\\n    return hosts\\r\\n}\\r\\n\\r\\nexport function allHosts() {\\r\\n    return Object.keys(mapHosts());\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortDesc(a, b) {\\r\\n    return ns.getServerMaxMoney(b) - ns.getServerMaxMoney(a)\\r\\n}\\r\\n\\r\\nexport function serverMaxMoneySortAsc(a, b) {\\r\\n    return ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b)\\r\\n}\\r\\n\\r\\nexport function doProgramBuys() {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    if (!player.tor && player.money > 200e3) ns.purchaseTor();\\r\\n\\r\\n    if (!ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\") && player.money > 500e3) ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\") && player.money > 1500e3) ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\") && player.money > 5e6) ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\") && player.money > 30e6) ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\r\\n\\r\\n    if (!ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\") && player.money > 250e6) ns.purchaseProgram(\\\"SQLInject.exe\\\");\\r\\n}\\r\\n\\r\\nexport function doBuyAndSoftenAll() {\\r\\n    doProgramBuys()\\r\\n    for (const hostname of allHosts()) {\\r\\n        softenServer(hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function cleanLogs() {\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n    ns.disableLog(\\\"exec\\\")\\r\\n    ns.disableLog(\\\"getServerMaxRam\\\")\\r\\n    ns.disableLog(\\\"getServerSecurityLevel\\\")\\r\\n    ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\r\\n    ns.disableLog(\\\"getServerMaxMoney\\\")\\r\\n    ns.disableLog(\\\"getHackingLevel\\\")\\r\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\r\\n    ns.disableLog(\\\"scan\\\")\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n    ns.disableLog(\\\"getServerUsedRam\\\")\\r\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.15,\"server\":\"home\",\"moduleSequenceNumber\":76840,\"_hash\":\"eb9b09f1f42974716f082472001c2b71b905feeca87d0a31227a04f4a271ce3e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///050a250a-bee0-43f3-894a-ef4f0be77ac1\",\"moduleSequenceNumber\":76606}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":76841,\"_hash\":\"ba7ee2de86ec8f375c0598ac7ab180324d1f5070fce231685dc29a48d4385481\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, canExecuteOnServer, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nfunction calcIncome(ns, target, allHostnames, simMinutes = 2) {\\r\\n    return new SuperHackEnv(ns, target, allHostnames.filter(canExecuteOnServer)).fastSim(ns, 1000 * 60 * simMinutes);\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    let allHostnames = allHosts();\\r\\n\\r\\n    let orderedTargetArr = allHostnames\\r\\n        .filter(serverIsHackable)\\r\\n        .filter((x) => ns.getServerMaxMoney(x) > 1)\\r\\n        .map((x) => [x, calcIncome(ns, x, allHostnames, ns.args[0])])\\r\\n        .sort((a, b) => b[1] - a[1]);\\r\\n\\r\\n    for (const [target, income] of orderedTargetArr) {\\r\\n        ns.tprintf(\\\"%15s: %s/s\\\", target, ns.nFormat(income, \\\"($0.000a)\\\"));\\r\\n    }\\r\\n\\r\\n    if (ns.args[1]) {\\r\\n        let env = new SuperHackEnv(\\r\\n            ns,\\r\\n            orderedTargetArr[0][0],\\r\\n            allHostnames.filter(canExecuteOnServer).filter((x) => x.indexOf(\\\"hacknet-node\\\") === -1)\\r\\n        );\\r\\n        //let env = new SuperHackEnv(ns, orderedTargetArr[0][0], [\\\"home\\\"])\\r\\n        await env.init(ns);\\r\\n\\r\\n        while (true) {\\r\\n            await env.refresh(ns);\\r\\n            await ns.sleep(2000);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"solo.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///905e5ef6-4ca2-4476-b183-47f60ad5dcb2\",\"moduleSequenceNumber\":76844},{\"filename\":\"util.js\",\"url\":\"blob:file:///73b9fd83-6ce4-4f19-aa6f-488a35c13f51\",\"moduleSequenceNumber\":76840},{\"filename\":\"solo.js\",\"url\":\"blob:file:///645b7afa-ab45-4849-bd24-c5a7a31b9170\",\"moduleSequenceNumber\":76898}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":76898,\"_hash\":\"6b542b58223b4cf656b8a9886014f79e882c6066ffbf6b7a3e43c35981b4e645\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type import(\\\".\\\").NS */\\r\\nlet ns = null;\\r\\n\\r\\nimport { setns, doProgramBuys } from \\\"./util.js\\\";\\r\\n\\r\\n/** @param {NS} _ns **/\\r\\nexport async function main(_ns) {\\r\\n    ns = _ns;\\r\\n\\r\\n    setns(ns);\\r\\n\\r\\n    doProgramBuys();\\r\\n}\",\"filename\":\"buy_programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///2736999b-6eae-4f74-9ff3-243e901ea476\",\"moduleSequenceNumber\":76840},{\"filename\":\"buy_programs.js\",\"url\":\"blob:file:///5a7ef58c-1f56-4c4d-b095-b5997bf035df\",\"moduleSequenceNumber\":78307}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":78307,\"_hash\":\"8ca4d700f9f604effc2fb404c5fc5843f247cce9c85ee01eb33651278c9340db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 300;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nexport const HackState = {\\r\\n    UNSET: \\\"UNDEFINED STATE\\\",\\r\\n    W: \\\"W\\\",\\r\\n    GW: \\\"GW\\\",\\r\\n    HW: \\\"HW\\\",\\r\\n    HGW: \\\"HGW\\\",\\r\\n};\\r\\n\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction stdFormat(ns, offset = 0, showms = true) {\\r\\n    let date = new Date(new Date().getTime() + offset);\\r\\n\\r\\n    if (showms) {\\r\\n        let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    } else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Host {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.maxThreads = Math.floor(\\r\\n            (ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname)) / this.threadSize\\r\\n        );\\r\\n        this.reservedScriptCalls = [];\\r\\n\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            let homeram = ns.getServerMaxRam(this.hostname) - ns.getServerUsedRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n\\r\\n    getReservedThreadCount() {\\r\\n        let reservedThreadCount = 0;\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            reservedThreadCount += scriptCall.threads;\\r\\n        }\\r\\n\\r\\n        return reservedThreadCount;\\r\\n    }\\r\\n\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, offset: offset });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    tryReserveThreadsExtended(ns, script, threads, args) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, args: args });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    executeScripts(ns, target) {\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            if (\\\"args\\\" in scriptCall) ns.exec(scriptCall.script, this.hostname, scriptCall.threads, ...scriptCall.args);\\r\\n            else ns.exec(scriptCall.script, this.hostname, scriptCall.threads, target, scriptCall.offset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class SuperHackEnv {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostnames) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n\\r\\n        this.cores = 1; // Simplify\\r\\n\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n\\r\\n        this.updateHosts(ns, hostnames);\\r\\n\\r\\n        // Target Info\\r\\n        this.targetSec = 0;\\r\\n        this.targetSecMin = 0;\\r\\n        this.targetMoneyAvailable = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenThreadsGrow = 0;\\r\\n        this.weakenThreadsHack = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotalEst = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = 0; // this.weakenTime - this.tspacer\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // State Info\\r\\n        this.state = HackState.UNSET;\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n\\r\\n        // Debug Info\\r\\n        this.bst = Date.now();\\r\\n        this.currentTime = this.bst;\\r\\n        this.batchID = 0;\\r\\n        this.dataFile = false ? `${this.bst}_${this.targetname}.txt` : false;\\r\\n    }\\r\\n\\r\\n    updateHosts(ns, hostnames) {\\r\\n        if (hostnames)\\r\\n            this.hosts = hostnames\\r\\n                .map((x) => new Host(ns, x, this.threadSize), this)\\r\\n                .filter((x) => x.maxThreads > 0)\\r\\n                .sort((a, b) => b.maxThreads - a.maxThreads);\\r\\n\\r\\n        this.maxThreads = 0;\\r\\n        this.hosts.map((x) => (this.maxThreads += x.maxThreads), this);\\r\\n\\r\\n        // if (debug) {\\r\\n        //     ns.print(ns.sprintf(\\\"Max Threads: %d\\\", this.maxThreads));\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    async init(ns, force = false) {\\r\\n        for (const host of this.hosts) await host.prep(ns, force);\\r\\n\\r\\n        if (this.dataFile) {\\r\\n            await ns.write(\\r\\n                this.dataFile,\\r\\n                \\\"Target Name, UID, Batch ID, Offset Time, Start Time, \\\" +\\r\\n                    \\\"End Time, Operation Time, Real Time Start, Real Time End, \\\" +\\r\\n                    \\\"Real Time Operation, Diff, Exp Gain\\\\n\\\",\\r\\n                \\\"w\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    saveSim(ns) {\\r\\n        this.savedSimInfo = {\\r\\n            simEnabled: this.simEnabled,\\r\\n            simHost: this.simHost,\\r\\n            simTarget: this.simTarget,\\r\\n            simPlayer: this.simPlayer,\\r\\n            simTime: this.simTime,\\r\\n            simIncome: this.simIncome,\\r\\n            simForceState: this.simForceState,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    loadSim(ns) {\\r\\n        if (this.savedSimInfo) {\\r\\n            this.simEnabled = this.savedSimInfo.simEnabled;\\r\\n            this.simHost = this.savedSimInfo.simHost;\\r\\n            this.simTarget = this.savedSimInfo.simTarget;\\r\\n            this.simPlayer = this.savedSimInfo.simPlayer;\\r\\n            this.simTime = this.savedSimInfo.simTime;\\r\\n            this.simIncome = this.savedSimInfo.simIncome;\\r\\n            this.simForceState = this.savedSimInfo.simForceState;\\r\\n\\r\\n            delete this.savedSimInfo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getHackTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns) {\\r\\n        if (this.growMult < 1) return 0;\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, this.growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) >\\r\\n                this.growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    setState(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // Process is running on this target, dont update the state\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (!this.doneWeaken(ns)) {\\r\\n            this.state = HackState.W;\\r\\n            this.weakenStartSec = this.getServerSecurityLevel(ns);\\r\\n        } else if (!this.doneGrow(ns)) {\\r\\n            this.state = HackState.GW;\\r\\n            this.growStartMoney = this.getServerMoneyAvailable(ns);\\r\\n        } else {\\r\\n            this.hackStartMoney = this.getServerMoneyAvailable(ns);\\r\\n\\r\\n            if (this.simForceState !== HackState.UNSET) {\\r\\n                this.state = this.simForceState;\\r\\n\\r\\n                if (this.state === HackState.HGW)\\r\\n                    // force skips the hgw update, so do it here\\r\\n                    this.updateForHGW(ns);\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            this.updateForHW(ns);\\r\\n            let hwIncome = this.hackTotal / ((this.weakenTime * 2) / 1000); // weaken time * 2 to account for grow cycle\\r\\n            this.updateForHGW(ns);\\r\\n            let hgwIncome = (this.hackTotal * this.cycleTotal) / (this.cycleFullTime / 1000);\\r\\n\\r\\n            if (hwIncome > hgwIncome) this.state = HackState.HW;\\r\\n            else this.state = HackState.HGW;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s WEAKEN: %s => Lowered Security from %.2f to %.2f (min: %.2f); Total Threads %s\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        this.weakenStartSec,\\r\\n                        this.getServerSecurityLevel(ns) ? this.getServerSecurityLevel(ns) : 0,\\r\\n                        ns.getServerMinSecurityLevel(this.targetname)\\r\\n                            ? ns.getServerMinSecurityLevel(this.targetname)\\r\\n                            : 0,\\r\\n                        this.threadsPerCycle\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s GROW-WEAKEN: %s => Increased available money from %s to %s/%s [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.growStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.highMoney, \\\"($0.000a)\\\"),\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                let totalHack = this.hackStartMoney - this.getServerMoneyAvailable(ns);\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s HACK-WEAKEN: %s => Decreased available money from %s to %s; %s Total (%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.hackStartMoney, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(totalHack, \\\"($0.000a)\\\"),\\r\\n                        (totalHack / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"%8s HACK-GROW-WEAKEN: %s => Cycle Complete; %s Available; Hacked %s/%s (%.2f%%/%.2f%% of max) [Sec: %.2f]\\\",\\r\\n                        new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                        this.targetname,\\r\\n                        ns.nFormat(this.getServerMoneyAvailable(ns), \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal, \\\"($0.000a)\\\"),\\r\\n                        ns.nFormat(this.hackTotal * this.cycleTotal, \\\"($0.000a)\\\"),\\r\\n                        (this.hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        ((this.hackTotal * this.cycleTotal) / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n                        this.getServerSecurityLevel(ns)\\r\\n                    )\\r\\n                );\\r\\n                break;\\r\\n            default:\\r\\n                // Do Nothing\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        this.setState(ns);\\r\\n        switch (this.state) {\\r\\n            case HackState.W:\\r\\n                this.updateForW(ns);\\r\\n                await this.execW(ns);\\r\\n                break;\\r\\n            case HackState.GW:\\r\\n                this.updateForGW(ns);\\r\\n                await this.execGW(ns);\\r\\n                break;\\r\\n            case HackState.HW:\\r\\n                this.updateForHW(ns);\\r\\n                await this.execHW(ns);\\r\\n                break;\\r\\n            case HackState.HGW:\\r\\n                // setState calls updateForHGW() to do evaluation, dont call it again here\\r\\n                //this.updateForHGW(ns);\\r\\n                await this.execHGW(ns);\\r\\n                break;\\r\\n            default:\\r\\n            // Do Nothing\\r\\n        }\\r\\n    }\\r\\n\\r\\n    doneWeaken(ns) {\\r\\n        return this.getServerSecurityLevel(ns) - 0.01 <= ns.getServerMinSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    doneGrow(ns) {\\r\\n        return this.getServerMoneyAvailable(ns) + 100 >= this.highMoney;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForW(ns) {\\r\\n        // Target Info\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreads = this.maxThreads;\\r\\n\\r\\n        this.threadsPerCycle = this.weakenThreads;\\r\\n\\r\\n        // return true if this cycle will fully weaken the target\\r\\n        return this.weakenThreads * this.weakenAmountPerThread >= secDiff;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / this.targetMoneyAvailable;\\r\\n        let growThreadsFull = this.calcGrowThreads(ns);\\r\\n        this.growThreads = this.maxThreads;\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads) {\\r\\n            this.growThreads--;\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n            this.weakenThreadsGrow = Math.ceil((this.growSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.growThreads + this.weakenThreadsGrow;\\r\\n        }\\r\\n\\r\\n        // Returning true if this grow cycle will max out the target server\\r\\n        return this.growThreads >= growThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHW(ns) {\\r\\n        // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n        this.updateForGW(ns); // to set this.growThreads\\r\\n        this.growMult = ns.formulas.hacking.growPercent(\\r\\n            ns.getServer(this.targetname),\\r\\n            this.growThreads,\\r\\n            ns.getPlayer(),\\r\\n            this.cores\\r\\n        );\\r\\n\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        let growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n\\r\\n        while (this.threadsPerCycle > this.maxThreads || growRecoveryMult > this.growMult) {\\r\\n            this.hackThreads--;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            growRecoveryMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n            this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n            this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack;\\r\\n        }\\r\\n\\r\\n        // Returning true if this hack cycle will bottom out the target server\\r\\n        return this.hackThreads >= hackThreadsFull;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    updateForHGW(ns) {\\r\\n        // Target Info\\r\\n        this.targetMoneyAvailable = this.getServerMoneyAvailable(ns);\\r\\n        this.targetSec = this.getServerSecurityLevel(ns);\\r\\n        this.targetSecMin = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        let secDiff = this.targetSec - this.targetSecMin;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackTotalEst = this.targetMoneyAvailable - this.lowMoney;\\r\\n        let hackThreadsFull = Math.ceil(ns.hackAnalyzeThreads(this.targetname, this.hackTotalEst));\\r\\n        this.hackThreads = this.maxThreads;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n            this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n        }\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n        this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n        this.growThreads = this.calcGrowThreads(ns);\\r\\n        this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n        this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n        this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleFitTime = this.weakenTime - this.tspacer * 2; // Start hack start script on last cycle before this time\\r\\n        let hackStartTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n        this.cycleMax = Math.floor((this.cycleFitTime - hackStartTime) / this.cycleSpacer) + 1;\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n        let setCycle = function (cycleTotal) {\\r\\n            if (cycleTotal <= 0) return [0, 0, 0, Number.MAX_VALUE, 0, 0, 0, 0, 0];\\r\\n            this.cycleTotal = cycleTotal;\\r\\n            let cycleThreadAllowance = Math.floor((this.maxThreads / this.cycleTotal) * 100) / 100;\\r\\n\\r\\n            this.hackThreads = cycleThreadAllowance;\\r\\n            this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            if (this.hackTotal >= this.targetMoneyAvailable) {\\r\\n                this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n            }\\r\\n            this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n            this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n            this.growThreads = this.calcGrowThreads(ns);\\r\\n            this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n\\r\\n            this.weakenThreadsHack = Math.ceil(this.hackSecIncrease / this.weakenAmountPerThread);\\r\\n            this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            this.threadsPerCycle =\\r\\n                this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n\\r\\n            // attempt to estimate the optimal number of hack threads by reducing the hack thread count\\r\\n            // by the current ratio of hack threads to grow + weaken threads. Overestimate a little bit\\r\\n            // and let the reducer take care of the extra.\\r\\n            // if (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n            //     this.hackThreads = cycleThreadAllowance * (this.hackThreads / this.threadsPerCycle);\\r\\n            // }\\r\\n\\r\\n            while (this.threadsPerCycle > cycleThreadAllowance) {\\r\\n                this.hackThreads--;\\r\\n\\r\\n                if (this.hackThreads <= 0) return [0, 0, 0, Number.MAX_VALUE];\\r\\n\\r\\n                this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.targetMoneyAvailable;\\r\\n                this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n                this.weakenThreadsHack = Math.ceil((this.hackSecIncrease + secDiff) / this.weakenAmountPerThread);\\r\\n                this.growMult = this.highMoney / (this.targetMoneyAvailable - this.hackTotal);\\r\\n                this.growThreads = this.calcGrowThreads(ns);\\r\\n                this.growSecIncrease = ns.growthAnalyzeSecurity(this.growThreads);\\r\\n                this.weakenThreadsGrow = Math.ceil(this.growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                this.threadsPerCycle =\\r\\n                    this.hackThreads + this.weakenThreadsHack + this.growThreads + this.weakenThreadsGrow;\\r\\n            }\\r\\n\\r\\n            this.cycleBatchTime = this.cycleFullTime + this.cycleSpacer * this.cycleTotal;\\r\\n            if (this.cycleTotal === 1) this.cycleBatchTime = this.cycleFullTime;\\r\\n\\r\\n            return [\\r\\n                (this.hackTotal * this.cycleTotal) / this.cycleBatchTime,\\r\\n                this.hackTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleBatchTime,\\r\\n                this.threadsPerCycle,\\r\\n                cycleThreadAllowance,\\r\\n                this.hackThreads,\\r\\n                cycleThreadAllowance * (this.hackThreads / this.threadsPerCycle),\\r\\n            ];\\r\\n        }.bind(this);\\r\\n\\r\\n        let cycleIncomes = new Array(this.cycleMax + 1);\\r\\n        let cycleTarget = 0;\\r\\n\\r\\n        if (true) {\\r\\n            // find first cycle counting down from the top where income > 0, since the algorithm doesnt like\\r\\n            // flat lines and any cylcle count that results in a ram allocation less than a threshold automatically\\r\\n            // returns 0\\r\\n            let cycleMax;\\r\\n            for (cycleMax = this.cycleMax; cycleMax >= 0; cycleMax--) {\\r\\n                cycleIncomes[cycleMax] = setCycle(cycleMax);\\r\\n\\r\\n                if (cycleIncomes[cycleMax][0] > 0) break;\\r\\n            }\\r\\n            cycleMax++;\\r\\n\\r\\n            // find local maximum of cycleIncomes\\r\\n            // target center value,\\r\\n            //  if value to left of target is larger than target, recenter target to left of current target\\r\\n            //  if value to right of target is larger than target, recenter target to right of current target\\r\\n            //  if values to left and right of target are both less than target, keep target\\r\\n            let cycleMin = 0;\\r\\n            while (true) {\\r\\n                cycleTarget = cycleMin + Math.floor((cycleMax - cycleMin) / 2);\\r\\n\\r\\n                if (cycleTarget === this.cycleMax || cycleTarget === 1) break;\\r\\n\\r\\n                if (cycleIncomes[cycleTarget - 1] === undefined) {\\r\\n                    cycleIncomes[cycleTarget - 1] = setCycle(cycleTarget - 1);\\r\\n                }\\r\\n                if (cycleIncomes[cycleTarget] === undefined) {\\r\\n                    cycleIncomes[cycleTarget] = setCycle(cycleTarget);\\r\\n                }\\r\\n                if (cycleIncomes[cycleTarget + 1] === undefined) {\\r\\n                    cycleIncomes[cycleTarget + 1] = setCycle(cycleTarget + 1);\\r\\n                }\\r\\n\\r\\n                if (cycleIncomes[cycleTarget][0] < cycleIncomes[cycleTarget + 1][0]) {\\r\\n                    cycleMin = cycleTarget;\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (cycleIncomes[cycleTarget][0] < cycleIncomes[cycleTarget - 1][0]) {\\r\\n                    cycleMax = cycleTarget;\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                break;\\r\\n            }\\r\\n        } else {\\r\\n            for (let cycle = 0; cycle < cycleIncomes.length; cycle++) {\\r\\n                cycleIncomes[cycle] = setCycle(cycle);\\r\\n            }\\r\\n\\r\\n            cycleTarget = cycleIncomes.sort((a, b) => b[0] - a[0])[0][2];\\r\\n        }\\r\\n\\r\\n        setCycle(cycleTarget);\\r\\n\\r\\n        // for (let cycle = 0; cycle < cycleIncomes.length; cycle++) {\\r\\n        //     if (cycleIncomes[cycle] !== undefined && cycleIncomes[cycle][0] > 0) {\\r\\n        //         let hackPercent = (cycleIncomes[cycle][1] / this.highMoney) * 100;\\r\\n        //         let totalHackPercent = hackPercent * cycle;\\r\\n        //         ns.tprintf(\\r\\n        //             \\\"%s => Cycle: %d --- Income: %s/s, Total: %s | %.2f%% | %.2f%%, Threads: %d | %d | %d (%d/%d), Hack Threads %d | est %s %s\\\",\\r\\n        //             this.targetname,\\r\\n        //             cycle,\\r\\n        //             ns.nFormat(cycleIncomes[cycle][0], \\\"($0.000a)\\\"),\\r\\n        //             ns.nFormat(cycleIncomes[cycle][1], \\\"($0.000a)\\\"),\\r\\n        //             hackPercent,\\r\\n        //             totalHackPercent,\\r\\n        //             cycleIncomes[cycle][4],\\r\\n        //             cycleIncomes[cycle][4] * cycle,\\r\\n        //             this.maxThreads,\\r\\n        //             cycleIncomes[cycle][5],\\r\\n        //             cycleIncomes[cycle][5] * cycle,\\r\\n        //             cycleIncomes[cycle][6],\\r\\n        //             cycleIncomes[cycle][7],\\r\\n        //             (cycle === cycleTarget)?\\\"WINNER\\\":\\\"\\\"\\r\\n        //         );\\r\\n        //     } else ns.tprintf(`${this.targetname} => Cycle: ${cycle} --- XX`);\\r\\n        // }\\r\\n\\r\\n        return this.cycleTotal === 1 ? this.hackThreads >= hackThreadsFull : true;\\r\\n    }\\r\\n\\r\\n    reserveThreadsForExecution(ns, script, threads, offset = 0) {\\r\\n        let unallocatedThreads = threads;\\r\\n        for (const host of this.hosts) {\\r\\n            unallocatedThreads -= host.tryReserveThreads(ns, script, unallocatedThreads, offset);\\r\\n            if (unallocatedThreads === 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\\"WARNING: Only able to allocate %d/%d %s threads\\\", threads - unallocatedThreads, threads, script)\\r\\n        );\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    reserveCycle(ns, cycleOffsetTime, batchID) {\\r\\n        // Target Name, UID, Batch ID, Offset Time, Start Time, End Time, Operation Time, Real Time Start, Real Time End, Real Time Operation, Diff, Exp Gain\\r\\n        let weakenHackOffsetTime = 0;\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        let weakenArgsHack = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + weakenHackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + weakenHackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.weakenTime + weakenHackOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"0WH\\\",\\r\\n        ];\\r\\n\\r\\n        let weakenArgsGrow = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + weakenGrowOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + weakenGrowOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.weakenTime + weakenGrowOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"1WG\\\",\\r\\n        ];\\r\\n\\r\\n        let growArgs = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + growOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + growOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.growTime + growOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"2G\\\",\\r\\n        ];\\r\\n\\r\\n        let hackArgs = [\\r\\n            this.targetname,\\r\\n            cycleOffsetTime + hackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + hackOffsetTime,\\r\\n            cycleOffsetTime + this.currentTime + this.hackTime + hackOffsetTime,\\r\\n            0,\\r\\n            batchID,\\r\\n            this.dataFile,\\r\\n            this.bst,\\r\\n            \\\"3H\\\",\\r\\n        ];\\r\\n\\r\\n        let totalThreads = this.weakenThreadsHack + this.weakenThreadsGrow + this.hackThreads + this.growThreads;\\r\\n        let whReserved = false;\\r\\n        let wgReserved = false;\\r\\n        let hReserved = false;\\r\\n        let gReserved = false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let freeThreads = host.maxThreads - host.getReservedThreadCount();\\r\\n            if (!whReserved && freeThreads >= this.weakenThreadsHack) {\\r\\n                freeThreads -= this.weakenThreadsHack;\\r\\n                whReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!wgReserved && freeThreads >= this.weakenThreadsGrow) {\\r\\n                freeThreads -= this.weakenThreadsGrow;\\r\\n                wgReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!hReserved && freeThreads >= this.hackThreads) {\\r\\n                freeThreads -= this.hackThreads;\\r\\n                hReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!gReserved && freeThreads >= this.growThreads) {\\r\\n                freeThreads -= this.growThreads;\\r\\n                gReserved = true;\\r\\n            }\\r\\n\\r\\n            if (whReserved && wgReserved && hReserved && gReserved) break;\\r\\n        }\\r\\n\\r\\n        if (!whReserved || !wgReserved || !hReserved || !gReserved) return false;\\r\\n\\r\\n        whReserved = false;\\r\\n        wgReserved = false;\\r\\n        hReserved = false;\\r\\n        gReserved = false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let freeThreads = host.maxThreads - host.getReservedThreadCount();\\r\\n            if (!hReserved && freeThreads >= this.hackThreads) {\\r\\n                hackArgs[8] = hackArgs[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, HACKNS, this.hackThreads, hackArgs);\\r\\n                freeThreads -= this.hackThreads;\\r\\n                hReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!gReserved && freeThreads >= this.growThreads) {\\r\\n                growArgs[8] = growArgs[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, GROWNS, this.growThreads, growArgs);\\r\\n                freeThreads -= this.growThreads;\\r\\n                gReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!whReserved && freeThreads >= this.weakenThreadsHack) {\\r\\n                weakenArgsHack[8] = weakenArgsHack[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, WEAKENNS, this.weakenThreadsHack, weakenArgsHack);\\r\\n                freeThreads -= this.weakenThreadsHack;\\r\\n                whReserved = true;\\r\\n            }\\r\\n\\r\\n            if (!wgReserved && freeThreads >= this.weakenThreadsGrow) {\\r\\n                weakenArgsGrow[8] = weakenArgsGrow[8] + \\\"-\\\" + host.hostname;\\r\\n                host.tryReserveThreadsExtended(ns, WEAKENNS, this.weakenThreadsGrow, weakenArgsGrow);\\r\\n                freeThreads -= this.weakenThreadsGrow;\\r\\n                wgReserved = true;\\r\\n            }\\r\\n\\r\\n            if (whReserved && wgReserved && hReserved && gReserved) break;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        for (const host of this.hosts) {\\r\\n            for (const scriptCall of host.reservedScriptCalls) {\\r\\n                if (\\\"args\\\" in scriptCall) {\\r\\n                    // offset is scriptCall.args[1]\\r\\n                    execs.push({\\r\\n                        script: scriptCall.script,\\r\\n                        host: host.hostname,\\r\\n                        threads: scriptCall.threads,\\r\\n                        target: this.targetname,\\r\\n                        delay: scriptCall.args[1],\\r\\n                        args: scriptCall.args,\\r\\n                        pos: execs.length,\\r\\n                    });\\r\\n                    //ns.exec(scriptCall.script, host.hostname, scriptCall.threads, ...scriptCall.args);\\r\\n                } else {\\r\\n                    execs.push({\\r\\n                        script: scriptCall.script,\\r\\n                        host: host.hostname,\\r\\n                        threads: scriptCall.threads,\\r\\n                        target: this.targetname,\\r\\n                        delay: scriptCall.offset,\\r\\n                        pos: execs.length,\\r\\n                    });\\r\\n                    //ns.exec(scriptCall.script, host.hostname, scriptCall.threads, target, scriptCall.offset);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        execs = execs.sort((a, b) => a.delay - b.delay);\\r\\n\\r\\n        let startTime = Date.now();\\r\\n        for (let exec of execs) {\\r\\n            //ns.tprintf(\\\"Queuing   %s:%s delay: %s\\\", exec.host, exec.script, stFormat(ns, exec.delay, false, false));\\r\\n            while (Date.now() - startTime < exec.delay) {\\r\\n                await ns.sleep(20);\\r\\n            }\\r\\n            //ns.tprintf(\\\"Executing %s:%s delay: %s\\\", exec.host, exec.script, stFormat(ns, exec.delay, false, false));\\r\\n            ns.exec(exec.script, exec.host, exec.threads, exec.target, exec.pos, startTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetThreads() {\\r\\n        for (const host of this.hosts) {\\r\\n            host.reset();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async execW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n\\r\\n            ns.print(ns.sprintf(\\\"WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true)));\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state,\\r\\n        ]);\\r\\n\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreads);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s WEAKEN: %s => Weaken %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.weakenThreads,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async execGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                this.simTarget,\\r\\n                this.growThreads,\\r\\n                this.simPlayer,\\r\\n                this.cores\\r\\n            );\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            ns.print(ns.sprintf(\\\"GROW-WEAKEN: Sim Time: %s\\\", ns.tFormat(this.simTime, true)));\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state,\\r\\n        ]);\\r\\n\\r\\n        // start grow such that it finishes slightly before weaken\\r\\n        let growOffsetTime = this.weakenTime - this.tspacer - this.growTime;\\r\\n        this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, growOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsGrow);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s GROW-WEAKEN: %s => Grow %d; Weaken %d; Total Threads %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.growThreads,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.threadsPerCycle,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async execHW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            if (Math.random() <= hackChance) hackTotal = this.hackTotal;\\r\\n\\r\\n            this.simTarget.moneyAvailable -= hackTotal;\\r\\n\\r\\n            this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"HACK-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                    ns.tFormat(this.simTime, true),\\r\\n                    ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n                )\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.weakenTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state,\\r\\n        ]);\\r\\n\\r\\n        // start hack such that it finishes slightly before weaken\\r\\n        let hackOffsetTime = this.weakenTime - this.tspacer - this.hackTime;\\r\\n        this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, hackOffsetTime);\\r\\n        this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-WEAKEN: %s => Hack %d; Weaken %d; Total Threads %d; Time +%s [%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.weakenThreadsHack,\\r\\n                this.threadsPerCycle,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.weakenTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async execHGW(ns) {\\r\\n        if (this.simEnabled) {\\r\\n            // HACK\\r\\n            let hackChance = ns.formulas.hacking.hackChance(this.simTarget, this.simPlayer);\\r\\n            let hackTotal = 0;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                if (Math.random() <= hackChance) {\\r\\n                    hackTotal += this.hackTotal;\\r\\n                    this.simTarget.moneyAvailable -= this.hackTotal;\\r\\n                }\\r\\n\\r\\n                // GROW\\r\\n                let simGrowMult = ns.formulas.hacking.growPercent(\\r\\n                    this.simTarget,\\r\\n                    this.growThreads,\\r\\n                    this.simPlayer,\\r\\n                    this.cores\\r\\n                );\\r\\n                this.simTarget.moneyAvailable *= simGrowMult;\\r\\n                this.simTarget.moneyAvailable = Math.min(\\r\\n                    this.simTarget.moneyAvailable,\\r\\n                    ns.getServerMaxMoney(this.targetname)\\r\\n                );\\r\\n\\r\\n                // SECURITY\\r\\n                this.simTarget.hackDifficulty += this.hackSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsHack * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n                this.simTarget.hackDifficulty += this.growSecIncrease;\\r\\n                this.simTarget.hackDifficulty -= this.weakenThreadsGrow * this.weakenAmountPerThread;\\r\\n                this.simTarget.hackDifficulty = Math.max(\\r\\n                    this.simTarget.hackDifficulty,\\r\\n                    ns.getServerMinSecurityLevel(this.targetname)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            this.simTime += this.cycleBatchTime + this.tspacer;\\r\\n            this.simIncome += hackTotal;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"HACK-GROW-WEAKEN: Sim Time: %s; Sim Income: %s (%s/s)\\\",\\r\\n                    ns.tFormat(this.simTime, true),\\r\\n                    ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n                    ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\")\\r\\n                )\\r\\n            );\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (false) {\\r\\n            this.currentTime = Date.now() - this.bst;\\r\\n\\r\\n            for (let i = 0; i < this.cycleTotal; i++) {\\r\\n                let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n                this.reserveCycle(ns, cycleOffsetTime, this.batchID++);\\r\\n            }\\r\\n        } else {\\r\\n            let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n            let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n            let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n            for (let i = this.cycleTotal - 1; i >= 0; i--) {\\r\\n                let cycleOffsetTime = i * this.cycleSpacer;\\r\\n\\r\\n                this.reserveThreadsForExecution(ns, HACKNS, this.hackThreads, cycleOffsetTime + hackOffsetTime);\\r\\n                this.reserveThreadsForExecution(ns, GROWNS, this.growThreads, cycleOffsetTime + growOffsetTime);\\r\\n                this.reserveThreadsForExecution(ns, WEAKENNS, this.weakenThreadsHack, cycleOffsetTime);\\r\\n                this.reserveThreadsForExecution(\\r\\n                    ns,\\r\\n                    WEAKENNS,\\r\\n                    this.weakenThreadsGrow,\\r\\n                    cycleOffsetTime + weakenGrowOffsetTime\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.cycleBatchTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            this.state,\\r\\n        ]);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d/%d; Total Cycles %d/%d; Time +%s:+%s [%s:%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.growThreads,\\r\\n                this.weakenThreadsHack,\\r\\n                this.weakenThreadsGrow,\\r\\n                this.threadsPerCycle,\\r\\n                this.threadsPerCycle * this.cycleTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleMax,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stFormat(ns, this.cycleBatchTime),\\r\\n                stdFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.cycleBatchTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        for (const host of this.hosts) {\\r\\n            let ps = ns.ps(host.hostname);\\r\\n            for (let psInfo of ps) {\\r\\n                if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                    return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async waitW(ns) {\\r\\n        while (this.isWRunning(ns)) {\\r\\n            await ns.sleep(this.tspacer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n\\r\\n    optimalHackPercent(ns) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n        this.simTarget.moneyAvailable = this.simTarget.moneyMax;\\r\\n        this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n        this.updateForHGW(ns);\\r\\n\\r\\n        return this.hackTotal / ns.getServerMaxMoney(this.targetname);\\r\\n    }\\r\\n}\",\"filename\":\"super_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.2,\"server\":\"home\",\"moduleSequenceNumber\":76844,\"_hash\":\"626a857e07b64602ec6515481b44d82813b1fb39f0e56974ad856dacb096b889\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    // do full weaken\\r\\n\\r\\n    // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n\\r\\n    let hackScript = \\\"hack.js\\\";\\r\\n    let weakenScript = \\\"weaken.js\\\";\\r\\n    let targetname = \\\"n00dles\\\";\\r\\n    let hostname = \\\"home\\\";\\r\\n    let hostRam = ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\r\\n    if (hostname === \\\"home\\\") {\\r\\n        hostRam -= 64;\\r\\n    }\\r\\n    let hostCores = ns.getServer(hostname).cores;\\r\\n    let hackRam = ns.getScriptRam(hackScript);\\r\\n    let weakenRam = ns.getScriptRam(weakenScript);\\r\\n    let startTime = ns.getTimeSinceLastAug();\\r\\n\\r\\n    while (ns.getServerSecurityLevel(targetname) - 0.1 > ns.getServerMinSecurityLevel(targetname)) {\\r\\n        while (ns.scriptRunning(weakenScript, hostname)) {\\r\\n            await ns.sleep(20);\\r\\n        }\\r\\n\\r\\n        let weakenThreads = Math.floor(hostRam / weakenRam);\\r\\n        ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        let curTime = ns.getTimeSinceLastAug() - startTime;\\r\\n        ns.print(`${curTime}: Weakening on ${weakenThreads} threads`);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        while (ns.scriptRunning(weakenScript, hostname)) {\\r\\n            await ns.sleep(20);\\r\\n        }\\r\\n\\r\\n        // Hack Info\\r\\n        let hackThreads = Math.floor(hostRam / hackRam);\\r\\n        let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n\\r\\n        // Weaken Info\\r\\n        let weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n        let weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n\\r\\n        while (hackRamCycle > hostRam) {\\r\\n            hackThreads--;\\r\\n            hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n            weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n            hackRamCycle = hackThreads * hackRam + weakenThreads * weakenRam;\\r\\n        }\\r\\n\\r\\n        ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.exec(hackScript, hostname, hackThreads, targetname);\\r\\n        let curTime = ns.getTimeSinceLastAug() - startTime;\\r\\n        ns.print(`${curTime}: Hacking on ${hackThreads}/${weakenThreads} threads`);\\r\\n    }\\r\\n}\",\"filename\":\"exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///ca6973b8-e85c-46f2-b8b6-fd0e99539b59\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///54148373-0464-423a-8c7f-a00f415fa95f\"},{\"filename\":\"exp.js\",\"url\":\"blob:file:///ba693b0a-cf82-4e17-aa46-41e86d371556\"}],\"dependents\":[],\"ramUsage\":14.25,\"server\":\"home\",\"moduleSequenceNumber\":76845,\"_hash\":\"92d02ffdfff9ba71bbf66c1547499d3e29a3e4e5ecae8b181c6d55f62fa3239b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SuperHackEnv } from \\\"./super_hack_env.js\\\";\\r\\n\\r\\nvar DEBUG_OUTPUT = false;\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    // do full weaken\\r\\n\\r\\n    // Find out how much money I can gain back in a single GW cycle and never hack more than that\\r\\n\\r\\n    const hackScript = \\\"hack.js\\\";\\r\\n    const growScript = \\\"grow.js\\\";\\r\\n    const weakenScript = \\\"weaken.js\\\";\\r\\n    const targetname = ns.args[0];\\r\\n    const hostname = \\\"home\\\";\\r\\n    const hostCores = ns.getServer(hostname).cores;\\r\\n    const hackRam = ns.getScriptRam(hackScript);\\r\\n    const growRam = ns.getScriptRam(growScript);\\r\\n    const weakenRam = ns.getScriptRam(weakenScript);\\r\\n    const tspacer = 50;\\r\\n\\r\\n    let hostRam = ns.getServerMaxRam(hostname);\\r\\n    if (hostname === \\\"home\\\") {\\r\\n        hostRam -= 64;\\r\\n    }\\r\\n\\r\\n    let hostRamAvailable = function () {\\r\\n        return hostRam - ns.getServerUsedRam(hostname);\\r\\n    };\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: Attacking ${targetname}`);\\r\\n\\r\\n    // Full Weaken\\r\\n    while (ns.getServerSecurityLevel(targetname) - 0.1 > ns.getServerMinSecurityLevel(targetname)) {\\r\\n        let weakenThreads = Math.floor(hostRamAvailable() / weakenRam);\\r\\n\\r\\n        let waitPID = ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.print(\\r\\n            `${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ` +\\r\\n                `Weakening on ${weakenThreads} threads for ${ns.tFormat(ns.getWeakenTime(targetname))}`\\r\\n        );\\r\\n\\r\\n        while (ns.getRunningScript(waitPID)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ${targetname} fully weakened`);\\r\\n\\r\\n    // Full Grow\\r\\n    while (ns.getServerMoneyAvailable(targetname) + 1000 < ns.getServerMaxMoney(targetname)) {\\r\\n        const weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n\\r\\n        let growThreads = Math.floor(hostRamAvailable() / growRam);\\r\\n        let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n\\r\\n        let weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let cycleRam = growThreads * growRam + weakenThreads * weakenRam;\\r\\n\\r\\n        while (cycleRam > hostRamAvailable()) {\\r\\n            growThreads--;\\r\\n            growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n            weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n            cycleRam = growThreads * growRam + weakenThreads * weakenRam;\\r\\n        }\\r\\n\\r\\n        ns.print(\\r\\n            `${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ` +\\r\\n                `Growing on ${growThreads}/${weakenThreads} threads ` +\\r\\n                `for ${ns.tFormat(ns.getWeakenTime(targetname))}`\\r\\n        );\\r\\n\\r\\n        let waitPID = ns.exec(weakenScript, hostname, weakenThreads, targetname);\\r\\n        ns.exec(growScript, hostname, growThreads, targetname);\\r\\n\\r\\n        while (ns.getRunningScript(waitPID)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.print(`${new Date().toLocaleTimeString(\\\"it-IT\\\")}: ${targetname} available money maxed out`);\\r\\n\\r\\n    let bst = Date.now();\\r\\n    const dataOut = `${bst}_${targetname}.txt`;\\r\\n\\r\\n    if (DEBUG_OUTPUT) {\\r\\n        await ns.write(\\r\\n            dataOut,\\r\\n            \\\"Target Name, UID, Batch ID, Offset Time, Start Time, End Time, Operation Time, Real Time Start, Real Time End, Real Time Operation, Diff, Exp Gain\\\\n\\\",\\r\\n            \\\"w\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // return true if no processes are finishing within startbuf and endbuf\\r\\n    let isProcessStartSafe = function (ps, startbuf, endbuf) {\\r\\n        for (const processInfo of ps) {\\r\\n            let psEndTime = processInfo.args[3];\\r\\n            if (psEndTime > startbuf && psEndTime < endbuf) return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    };\\r\\n\\r\\n    let env = new SuperHackEnv(ns, targetname, [hostname]);\\r\\n    let optimalHackPercent = env.optimalHackPercent(ns);\\r\\n    let optimalLevelCheck = ns.getPlayer().hacking;\\r\\n    const optimalTimerReset = 30 * 1000;\\r\\n    let optimalTimer = optimalTimerReset;\\r\\n    let batchID = 0;\\r\\n    const batchSleep = 20;\\r\\n    // BATCH!\\r\\n    while (true) {\\r\\n        await ns.sleep(batchSleep);\\r\\n\\r\\n        if ((optimalTimer -= batchSleep <= 0)) {\\r\\n            optimalTimer = optimalTimerReset;\\r\\n            if (optimalLevelCheck != ns.getPlayer().hacking) {\\r\\n                optimalLevelCheck = ns.getPlayer().hacking;\\r\\n                optimalHackPercent = env.optimalHackPercent(ns);\\r\\n                ns.print(`Optimal Hack Percent set to ${(optimalHackPercent * 100).toFixed(2)}%`);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let currentTime = Date.now() - bst;\\r\\n\\r\\n        // collect all running HGW threads\\r\\n        let ps = ns.ps(hostname);\\r\\n\\r\\n        // if any processes are going to finish in the next 150 ms, wait 150 ms and try again\\r\\n        if (!isProcessStartSafe(ps, currentTime, currentTime + 150)) continue;\\r\\n\\r\\n        // The state of the player when both weakens are called (in the next 0 and 50 ms) should not change,\\r\\n        // so getting weaken time unmodified should be fine\\r\\n        let weakenTime = Math.ceil(ns.getWeakenTime(targetname));\\r\\n        let weakenHackOffsetTime = 0;\\r\\n        let weakenGrowOffsetTime = tspacer * 2;\\r\\n\\r\\n        // If any ps are finishing between weakenTime - tspacer * 2 and weakenTime + tspacer * 3, wait 200ms and try again\\r\\n        // since this cycle's finish time will collide with a running cycle\\r\\n        if (!isProcessStartSafe(ps, currentTime + weakenTime - tspacer * 2, currentTime + weakenTime + tspacer * 3))\\r\\n            continue;\\r\\n\\r\\n        // calculate grow time when grow is supposed to start\\r\\n        let growPlayer = ns.getPlayer();\\r\\n        let growServer = ns.getServer(targetname);\\r\\n        let growTime, growOffsetTime, growStartTime;\\r\\n        let oldGrowStartTime = currentTime;\\r\\n\\r\\n        while (true) {\\r\\n            growTime = Math.ceil(ns.formulas.hacking.growTime(growServer, growPlayer));\\r\\n            growOffsetTime = weakenTime + tspacer - growTime;\\r\\n            growStartTime = currentTime + growOffsetTime;\\r\\n\\r\\n            // check if any ps finish between oldGrowStartTime and growStartTime\\r\\n            // if no, continue on\\r\\n            // if yes, recalculate player.hacking_exp and player.hacking based on the amount of experience\\r\\n            //   that will be received between oldGrowStartTime and growStartTime and then\\r\\n            //   recalculate growTime and growStartTime\\r\\n\\r\\n            let accumulatedExp = 0;\\r\\n            for (const processInfo of ps) {\\r\\n                let psEndTime = processInfo.args[3];\\r\\n                let psExp = processInfo.args[4];\\r\\n                if (psEndTime >= oldGrowStartTime && psEndTime < growStartTime) {\\r\\n                    accumulatedExp += psExp;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (accumulatedExp > 0) {\\r\\n                growPlayer.hacking_exp += accumulatedExp;\\r\\n            }\\r\\n\\r\\n            // check if our hacking level changed\\r\\n            let newHackingLvl = ns.formulas.skills.calculateSkill(\\r\\n                growPlayer.hacking_exp,\\r\\n                growPlayer.hacking_mult * ns.getBitNodeMultipliers().HackingLevelMultiplier\\r\\n            );\\r\\n\\r\\n            if (newHackingLvl === growPlayer.hacking) break;\\r\\n\\r\\n            growPlayer.hacking = newHackingLvl;\\r\\n        }\\r\\n\\r\\n        // if growStartTime is within +-tspacer of another process ending, wait 200ms and try again\\r\\n        if (!isProcessStartSafe(ps, growStartTime - tspacer, growStartTime + tspacer)) continue;\\r\\n\\r\\n        // calculate hack time when hack is supposed to start\\r\\n        let hackPlayer = ns.getPlayer();\\r\\n        let hackServer = ns.getServer(targetname);\\r\\n        let hackTime, hackOffsetTime, hackStartTime;\\r\\n        let oldHackStartTime = currentTime;\\r\\n\\r\\n        while (true) {\\r\\n            hackTime = Math.ceil(ns.formulas.hacking.hackTime(hackServer, hackPlayer));\\r\\n            hackOffsetTime = weakenTime - hackTime - tspacer;\\r\\n            hackStartTime = currentTime + hackOffsetTime;\\r\\n\\r\\n            // check if any ps finish between oldHackStartTime and hackStartTime\\r\\n            // if no, continue on\\r\\n            // if yes, recalculate player.hacking_exp and player.hacking based on the amount of experience\\r\\n            //   that will be received between oldHackStartTime and hackStartTime and then\\r\\n            //   recalculate hackTime and hackStartTime\\r\\n\\r\\n            let accumulatedExp = 0;\\r\\n            for (const processInfo of ps) {\\r\\n                let psEndTime = processInfo.args[3];\\r\\n                let psExp = processInfo.args[4];\\r\\n                if (psEndTime >= oldHackStartTime && psEndTime < hackStartTime) {\\r\\n                    accumulatedExp += psExp;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (accumulatedExp > 0) {\\r\\n                hackPlayer.hacking_exp += accumulatedExp;\\r\\n            }\\r\\n\\r\\n            // check if our hacking level changed\\r\\n            let newHackingLvl = ns.formulas.skills.calculateSkill(\\r\\n                hackPlayer.hacking_exp,\\r\\n                hackPlayer.hacking_mult * ns.getBitNodeMultipliers().HackingLevelMultiplier\\r\\n            );\\r\\n\\r\\n            if (newHackingLvl === hackPlayer.hacking) break;\\r\\n\\r\\n            hackPlayer.hacking = newHackingLvl;\\r\\n        }\\r\\n\\r\\n        // if hackStartTime is within +-tspacer of another process ending, wait 200ms and try again\\r\\n        if (!isProcessStartSafe(ps, hackStartTime - tspacer, hackStartTime + tspacer)) continue;\\r\\n\\r\\n        // calculate and launch a cycle\\r\\n        const weakenAmountPerThread = ns.weakenAnalyze(1, hostCores);\\r\\n        const hackPercentPerThread = ns.formulas.hacking.hackPercent(hackServer, hackPlayer);\\r\\n        const targetMaxMoney = ns.getServerMaxMoney(targetname);\\r\\n\\r\\n        let hackThreads = optimalHackPercent / hackPercentPerThread;\\r\\n        let hackTotal = hackPercentPerThread * hackThreads * targetMaxMoney;\\r\\n\\r\\n        let growMult = targetMaxMoney / (targetMaxMoney - hackTotal);\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(targetname, growMult, hostCores));\\r\\n\\r\\n        let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n        let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n        let weakenThreadsHack = Math.ceil(hackSecIncrease / weakenAmountPerThread);\\r\\n        let weakenThreadsGrow = Math.ceil(growSecIncrease / weakenAmountPerThread);\\r\\n\\r\\n        let cycleRam =\\r\\n            hackThreads * hackRam + growThreads * growRam + (weakenThreadsHack + weakenThreadsGrow) * weakenRam;\\r\\n\\r\\n        // check if there is ram available to run the cycle\\r\\n        if (hostRamAvailable() < cycleRam) continue;\\r\\n\\r\\n        let hackEXP = ns.formulas.hacking.hackExp(ns.getServer(targetname), ns.getPlayer());\\r\\n\\r\\n        // args are targetname, offset, ms since aug when process will start, ms since aug when process will end, exp gain\\r\\n        let weakenArgsHack = [\\r\\n            targetname,\\r\\n            weakenHackOffsetTime,\\r\\n            currentTime + weakenHackOffsetTime,\\r\\n            currentTime + weakenTime + weakenHackOffsetTime,\\r\\n            hackEXP * weakenThreadsHack,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"0WH\\\",\\r\\n        ];\\r\\n\\r\\n        let weakenArgsGrow = [\\r\\n            targetname,\\r\\n            weakenGrowOffsetTime,\\r\\n            currentTime + weakenGrowOffsetTime,\\r\\n            currentTime + weakenTime + weakenGrowOffsetTime,\\r\\n            hackEXP * weakenThreadsGrow,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"1WG\\\",\\r\\n        ];\\r\\n\\r\\n        let growArgs = [\\r\\n            targetname,\\r\\n            growOffsetTime,\\r\\n            currentTime + growOffsetTime,\\r\\n            currentTime + growTime + growOffsetTime,\\r\\n            hackEXP * growThreads,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"2G\\\",\\r\\n        ];\\r\\n\\r\\n        let hackArgs = [\\r\\n            targetname,\\r\\n            hackOffsetTime,\\r\\n            currentTime + hackOffsetTime,\\r\\n            currentTime + hackTime + hackOffsetTime,\\r\\n            hackEXP * hackThreads,\\r\\n            batchID,\\r\\n            DEBUG_OUTPUT ? dataOut : false,\\r\\n            bst,\\r\\n            \\\"3H\\\",\\r\\n        ];\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Starting Batch Cycle; Hacking %s (%.2f%% of max)\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                targetname,\\r\\n                ns.nFormat(hackTotal, \\\"($0.000a)\\\"),\\r\\n                (hackTotal / ns.getServerMaxMoney(targetname)) * 100\\r\\n            )\\r\\n        );\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s HACK-GROW-WEAKEN: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d; Time %s\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                targetname,\\r\\n                hackThreads,\\r\\n                growThreads,\\r\\n                weakenThreadsHack,\\r\\n                weakenThreadsGrow,\\r\\n                hackThreads + growThreads + weakenThreadsHack + weakenThreadsGrow,\\r\\n                ns.tFormat(weakenTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        ns.exec(weakenScript, hostname, weakenThreadsHack, ...weakenArgsHack);\\r\\n        ns.exec(weakenScript, hostname, weakenThreadsGrow, ...weakenArgsGrow);\\r\\n        ns.exec(growScript, hostname, growThreads, ...growArgs);\\r\\n        ns.exec(hackScript, hostname, hackThreads, ...hackArgs);\\r\\n\\r\\n        batchID++;\\r\\n\\r\\n        // Allow space for interleaving batches\\r\\n        await ns.sleep(300 - batchSleep)\\r\\n    }\\r\\n}\",\"filename\":\"batcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"super_hack_env.js\",\"url\":\"blob:file:///2f226438-6990-49fe-b4ac-2a6fded20228\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///265ce5f9-4fff-42e9-bfa7-12fdc96920fa\"},{\"filename\":\"batcher.js\",\"url\":\"blob:file:///f32b150c-3943-4540-bbce-b952d8b9c7e2\"}],\"dependents\":[],\"ramUsage\":17.5,\"server\":\"home\",\"moduleSequenceNumber\":76846,\"_hash\":\"c545201841be9b6cbc443c4c032142175cb5abc7c6888ce319a7a9330a5ae41e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var lastEl;\\r\\nvar roots = [];\\r\\n\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n\\r\\n    const newRootEl = hookRootEl.cloneNode(true);\\r\\n    newRootEl.children[0].firstChild.innerText = \\\"\\\";\\r\\n    newRootEl.children[1].firstChild.innerText = \\\"\\\";\\r\\n    newRootEl.children[1].firstChild.removeAttribute(\\\"id\\\");\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return newRootEl;\\r\\n}\\r\\n\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackRootEl = overviewEl.children[2];\\r\\n\\r\\n    const newRootEl = hackRootEl.cloneNode(true);\\r\\n    newRootEl.removeChild(newRootEl.childNodes.item(1));\\r\\n\\r\\n    const newEl = newRootEl.children[0].firstChild;\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return newEl;\\r\\n}\\r\\n\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackRootEl = overviewEl.children[2];\\r\\n\\r\\n    const newRootEl = hackRootEl.cloneNode(true);\\r\\n\\r\\n    const newEl1 = newRootEl.children[0].firstChild;\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n\\r\\n    const newEl2 = newRootEl.children[1].firstChild;\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\n\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0.parentElement.parentElement;\\r\\n    const overviewEl = hookRootEl.parentElement;\\r\\n    const hackProgressEl = overviewEl.children[3];\\r\\n\\r\\n    const newRootEl = hackProgressEl.cloneNode(true);\\r\\n    const newSub1 = newRootEl.firstChild.firstChild;\\r\\n    const newSub2 = newRootEl.firstChild.firstChild.firstChild;\\r\\n\\r\\n    if (lastEl === undefined) lastEl = hookRootEl;\\r\\n\\r\\n    lastEl.after(newRootEl);\\r\\n    lastEl = newRootEl;\\r\\n\\r\\n    roots.push(newRootEl);\\r\\n\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let clockEl = addSingle();\\r\\n    let targetEl = addSingle();\\r\\n    let incomeEl = addSingle();\\r\\n    let [stateEl, countdownEl] = addDouble();\\r\\n    let [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n    addBottomLine();\\r\\n\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) root.parentNode.removeChild(root);\\r\\n    });\\r\\n\\r\\n    let port = ns.getPortHandle(1);\\r\\n    let startTime = 0;\\r\\n    let endTime = 1000;\\r\\n    let fullTime = 1000;\\r\\n    let target = \\\"\\\";\\r\\n    let income = \\\"\\\";\\r\\n    let state = \\\"\\\";\\r\\n    let countdown = \\\"\\\";\\r\\n    while (true) {\\r\\n        if (!port.empty()) {\\r\\n            let data = port.peek();\\r\\n            startTime = data[0].getTime();\\r\\n            endTime = new Date(startTime + data[1]).getTime();\\r\\n            fullTime = endTime - startTime;\\r\\n\\r\\n            let date = new Date();\\r\\n            let curTime = date.getTime();\\r\\n\\r\\n            // Update Clock\\r\\n            // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n            // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n            clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            // Update Target & Income\\r\\n            targetEl.innerText = data[2];\\r\\n            incomeEl.innerText = `${ns.nFormat(data[3], \\\"($0.0a)\\\")}/s`;\\r\\n\\r\\n            // Update State & Countdown\\r\\n            stateEl.innerText = data[4];\\r\\n            countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n\\r\\n            // Update Progress\\r\\n            let tvalue = curTime - startTime;\\r\\n            let nvalue = (tvalue / fullTime) * 100;\\r\\n            let transform = 100 - nvalue;\\r\\n            let wholeValue = Math.floor(nvalue);\\r\\n\\r\\n            if (startTime === 0 || wholeValue > 100) {\\r\\n                port.clear();\\r\\n                transform = 100;\\r\\n                wholeValue = 0;\\r\\n            }\\r\\n\\r\\n            hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n            hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n        } else {\\r\\n            let date = new Date();\\r\\n            clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n\\r\\n            targetEl.innerText = \\\"NO TARGET\\\";\\r\\n            incomeEl.innerText = \\\"\\\";\\r\\n            stateEl.innerText = \\\"\\\";\\r\\n            countdownEl.innerText = \\\"\\\";\\r\\n            hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n            hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\",\"filename\":\"clock.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"clock.js\",\"url\":\"blob:file:///251d7d29-bdd0-41bb-aa7b-6b4eb6ccb94f\",\"moduleSequenceNumber\":76952}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":76952,\"_hash\":\"98e9a9188b966bec872320b361943e6d79c4d0ad050814831ae6c98688d582d7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction help(ns) {\\r\\n    ns.tprintf(\\\"Sleeve Modes:\\\");\\r\\n    ns.tprintf(\\\"  h     : show help text\\\");\\r\\n    ns.tprintf(\\\"  all   : all stats\\\");\\r\\n    ns.tprintf(\\\"  hack  : all hack\\\");\\r\\n    ns.tprintf(\\\"  str   : all str\\\");\\r\\n    ns.tprintf(\\\"  def   : all def\\\");\\r\\n    ns.tprintf(\\\"  dex   : all dex\\\");\\r\\n    ns.tprintf(\\\"  agi   : all agi\\\");\\r\\n    ns.tprintf(\\\"  cha   : all cha\\\");\\r\\n    ns.tprintf(\\\"  mug   : all mug\\\");\\r\\n    ns.tprintf(\\\"  hom   : all homicide\\\");\\r\\n    ns.tprintf(\\\"  shock : all shock recovery\\\");\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] === \\\"h\\\" || ns.args[0] === undefined) {\\r\\n        help(ns);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    switch (ns.args[0]) {\\r\\n        case \\\"all\\\":\\r\\n            ns.sleeve.travel(0, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(0, \\\"Powerhouse Gym\\\", \\\"str\\\");\\r\\n            ns.sleeve.travel(1, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(1, \\\"Powerhouse Gym\\\", \\\"def\\\");\\r\\n            ns.sleeve.travel(2, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(2, \\\"Powerhouse Gym\\\", \\\"dex\\\");\\r\\n            ns.sleeve.travel(3, \\\"Sector-12\\\");\\r\\n            ns.sleeve.setToGymWorkout(3, \\\"Powerhouse Gym\\\", \\\"agi\\\");\\r\\n\\r\\n            ns.sleeve.travel(4, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(4, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            ns.sleeve.travel(5, \\\"Volhaven\\\");\\r\\n            ns.sleeve.setToUniversityCourse(5, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            break;\\r\\n        case \\\"hack\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Algorithms\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"cha\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Volhaven\\\");\\r\\n                ns.sleeve.setToUniversityCourse(i, \\\"ZB Institute of Technology\\\", \\\"Leadership\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"str\\\":\\r\\n        case \\\"def\\\":\\r\\n        case \\\"dex\\\":\\r\\n        case \\\"agi\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.travel(i, \\\"Sector-12\\\");\\r\\n                ns.sleeve.setToGymWorkout(i, \\\"Powerhouse Gym\\\", ns.args[0]);\\r\\n            }\\r\\n            break;\\r\\n        case \\\"mug\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Mug\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"hom\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToCommitCrime(i, \\\"Homicide\\\");\\r\\n            }\\r\\n            break;\\r\\n        case \\\"shock\\\":\\r\\n            for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\r\\n                ns.sleeve.setToShockRecovery(i);\\r\\n            }\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprintf(`ERROR: Unknown sleeve mode: ${ns.args[0]}`);\\r\\n            help(ns);\\r\\n            break;\\r\\n    }\\r\\n}\",\"filename\":\"sleeve.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sleeve.js\",\"url\":\"blob:file:///2f79dc1f-8800-44a2-9209-3b18665e8429\",\"moduleSequenceNumber\":76563}],\"dependents\":[],\"ramUsage\":25.6,\"server\":\"home\",\"moduleSequenceNumber\":76848,\"_hash\":\"bc329d9f69aefe7a4d3b914632ff36613092b6f46e039751604af08b0067292a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setns, cleanLogs } from \\\"./util.js\\\";\\r\\n\\r\\nexport const HSUpgradeType = {\\r\\n    LEVEL: \\\"level\\\",\\r\\n    RAM: \\\"ram\\\",\\r\\n    CORES: \\\"cores\\\",\\r\\n    CACHE: \\\"cache\\\",\\r\\n    SERVER: \\\"server\\\",\\r\\n};\\r\\n\\r\\nclass HSUpgrade {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, id, type, _stats) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const prodMult = ns.getPlayer().hacknet_node_money_mult;\\r\\n        const coreCostMult = ns.getPlayer().hacknet_node_core_cost_mult;\\r\\n        const levelCostMult = ns.getPlayer().hacknet_node_level_cost_mult;\\r\\n        const ramCostMult = ns.getPlayer().hacknet_node_ram_cost_mult;\\r\\n\\r\\n        let stats;\\r\\n        if (_stats) stats = _stats;\\r\\n        else {\\r\\n            stats = ns.hacknet.getNodeStats(id);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n        }\\r\\n\\r\\n        this.id = id;\\r\\n        this.type = type;\\r\\n\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level + 1,\\r\\n                    0,\\r\\n                    stats.ram,\\r\\n                    stats.cores,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level,\\r\\n                    0,\\r\\n                    stats.ram * 2,\\r\\n                    stats.cores,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\r\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(\\r\\n                    stats.level,\\r\\n                    0,\\r\\n                    stats.ram,\\r\\n                    stats.cores + 1,\\r\\n                    prodMult\\r\\n                );\\r\\n                break;\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\r\\n                this.upgradeProductionTotal = stats.production;\\r\\n                this.cacheIncrease = stats.cache;\\r\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\r\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\r\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\r\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\r\\n    }\\r\\n\\r\\n    toString(ns, totalProduction) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\r\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\r\\n\\r\\n        return ns.sprintf(\\r\\n            \\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\",\\r\\n            this.id,\\r\\n            this.type,\\r\\n            ns.nFormat(this.upgradeCost, \\\"($0.000a)\\\"), // cost\\r\\n            ns.nFormat(this.upgradeProductionIncrease, \\\"(0.000a)\\\"), // hash increase\\r\\n            stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\r\\n            this.upgradeValue * 1000000000\\r\\n        );\\r\\n    }\\r\\n\\r\\n    buy(ns) {\\r\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n        let effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\r\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        while (ns.getPlayer().money < this.upgradeCost) {\\r\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        }\\r\\n\\r\\n        switch (this.type) {\\r\\n            case HSUpgradeType.LEVEL: {\\r\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.RAM: {\\r\\n                return ns.hacknet.upgradeRam(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CORES: {\\r\\n                return ns.hacknet.upgradeCore(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.CACHE: {\\r\\n                return ns.hacknet.upgradeCache(this.id, 1);\\r\\n            }\\r\\n            case HSUpgradeType.SERVER: {\\r\\n                return ns.hacknet.purchaseNode();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction stFormat(ns, ms, showms = false, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction generateNewServerValue(ns) {\\r\\n    let stats = {\\r\\n        ...ns.hacknet.getNodeStats(0),\\r\\n        cache: 1,\\r\\n        cores: 1,\\r\\n        hashCapacity: 64,\\r\\n        level: 1,\\r\\n        ram: 1,\\r\\n        timeOnline: 1,\\r\\n        totalProduction: 1,\\r\\n        production: ns.formulas.hacknetServers.hashGainRate(1, 0, 1, 1, ns.getPlayer().hacknet_node_money_mult),\\r\\n        totalCost: ns.hacknet.getPurchaseNodeCost(),\\r\\n    };\\r\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\r\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\r\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\r\\n\\r\\n    let bestUpgrade;\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = Object.keys(HSUpgradeType)\\r\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\r\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n\\r\\n        let newBestUpgrade = hashServerUpgrades[0];\\r\\n\\r\\n        switch (newBestUpgrade.type) {\\r\\n            case HSUpgradeType.CORES:\\r\\n                stats.cores += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.LEVEL:\\r\\n                stats.level += 1;\\r\\n                break;\\r\\n            case HSUpgradeType.RAM:\\r\\n                stats.ram *= 2;\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        let newProduction = ns.formulas.hacknetServers.hashGainRate(\\r\\n            stats.level,\\r\\n            0,\\r\\n            stats.ram,\\r\\n            stats.cores,\\r\\n            ns.getPlayer().hacknet_node_money_mult\\r\\n        );\\r\\n        let newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\r\\n        let newValue = newProduction / newCost;\\r\\n\\r\\n        if (newValue < stats.totalValue) break;\\r\\n\\r\\n        stats.production = newProduction;\\r\\n        stats.totalCost = newCost;\\r\\n        stats.totalValue = newValue;\\r\\n        bestUpgrade = newBestUpgrade;\\r\\n\\r\\n        // ns.tprintf(\\r\\n        //     \\\"%s => Total Value: %s\\\",\\r\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\r\\n        //     stats.totalValue * 1000000000\\r\\n        // );\\r\\n\\r\\n        let checkStats = ns.hacknet.getNodeStats(0);\\r\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram) break;\\r\\n    }\\r\\n\\r\\n    if (bestUpgrade === undefined) return;\\r\\n\\r\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    bestUpgrade.upgradeValue = stats.totalValue;\\r\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\r\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\r\\n\\r\\n    return bestUpgrade;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n    cleanLogs();\\r\\n\\r\\n    let prodCalc = 0;\\r\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n        let stats = ns.hacknet.getNodeStats(idx);\\r\\n        stats.ramUsed = 0;\\r\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n            stats.level,\\r\\n            0,\\r\\n            stats.ram,\\r\\n            stats.cores,\\r\\n            ns.getPlayer().hacknet_node_money_mult\\r\\n        );\\r\\n\\r\\n        prodCalc += stats.production;\\r\\n    }\\r\\n\\r\\n    let prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\r\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\r\\n\\r\\n    if (ns.hacknet.numNodes() === 0) {\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    while (ns.hacknet.numNodes() === 0) {\\r\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n            ns.hacknet.purchaseNode();\\r\\n        } else {\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let buyServerUpgrade = generateNewServerValue(ns);\\r\\n\\r\\n    if (ns.args[0]) {\\r\\n        let hashServerUpgrades = [buyServerUpgrade];\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            let stats = ns.hacknet.getNodeStats(idx);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue); //.filter(a => (a.upgradeValue * 1000000000) > 1.5);\\r\\n\\r\\n        for (const upg of hashServerUpgrades) ns.tprintf(upg.toString(ns, totalProduction));\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        let hashServerUpgrades = [buyServerUpgrade];\\r\\n        let totalProduction = 0;\\r\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n            let stats = ns.hacknet.getNodeStats(idx);\\r\\n            stats.ramUsed = 0;\\r\\n            stats.production = ns.formulas.hacknetServers.hashGainRate(\\r\\n                stats.level,\\r\\n                0,\\r\\n                stats.ram,\\r\\n                stats.cores,\\r\\n                ns.getPlayer().hacknet_node_money_mult\\r\\n            );\\r\\n\\r\\n            Object.keys(HSUpgradeType).forEach((key) => {\\r\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\r\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\r\\n            });\\r\\n\\r\\n            totalProduction += stats.production;\\r\\n        }\\r\\n\\r\\n        hashServerUpgrades = hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue); //.filter(a => (a.upgradeValue * 1000000000) > 0.15);\\r\\n        //hashServerUpgrades.sort((a, b) => b.upgradeValue - a.upgradeValue);\\r\\n\\r\\n        if (hashServerUpgrades.length > 0) {\\r\\n            const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\r\\n            let numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n            let effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%s | %s\\\",\\r\\n                    new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                    hashServerUpgrades[0].toString(ns, totalProduction)\\r\\n                )\\r\\n            );\\r\\n            while (effectiveMoneyAvailable < hashServerUpgrades[0].upgradeCost) {\\r\\n                numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\r\\n                effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\r\\n\\r\\n                while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                    ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n                await ns.sleep(1000);\\r\\n            }\\r\\n\\r\\n            hashServerUpgrades[0].buy(ns);\\r\\n        } else {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        buyServerUpgrade = generateNewServerValue(ns);\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n\\r\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\r\\n    while (true) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\")) ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n        let studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\r\\n\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                let idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        while (ns.hacknet.numHashes() < studyCost) await ns.sleep(1000);\\r\\n\\r\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///66122215-295c-4b61-963a-0211c1c40574\",\"moduleSequenceNumber\":25748},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///ab57ba45-a092-4622-96bc-930769d5f3d6\",\"moduleSequenceNumber\":39992}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":78304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (false) {\\r\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\")) ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    while (true) {\\r\\n        let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\r\\n\\r\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\r\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\r\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\r\\n\\r\\n            // find the cheapest cache upgrade and attempt to buy it\\r\\n            let targetIdx = -1;\\r\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\r\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\r\\n                let idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\r\\n                if (idxCost < targetIdxCost) {\\r\\n                    targetIdx = idx;\\r\\n                    targetIdxCost = idxCost;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (ns.getPlayer().money > targetIdxCost) {\\r\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n\\r\\n        while (ns.hacknet.numHashes() < studyCost) await ns.sleep(1000);\\r\\n\\r\\n        ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\r\\n\\r\\n        await ns.sleep(20);\\r\\n    }\\r\\n}\",\"filename\":\"leech.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"leech.js\",\"url\":\"blob:file:///c84cb9f3-9011-4c9b-968f-a8195025ef7d\",\"moduleSequenceNumber\":61206}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":78302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share()\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///65463fec-292a-420d-91a4-b3b7bff43319\",\"moduleSequenceNumber\":50797}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":76851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    // const crimes = [\\r\\n    //     \\\"shoplift\\\",\\r\\n    //     \\\"rob store\\\",\\r\\n    //     \\\"mug\\\",\\r\\n    //     \\\"larceny\\\",\\r\\n    //     \\\"drugs\\\",\\r\\n    //     \\\"bond forge\\\",\\r\\n    //     \\\"traffick arms\\\",\\r\\n    //     \\\"homicide\\\",\\r\\n    //     \\\"grand auto\\\",\\r\\n    //     \\\"kidnap\\\",\\r\\n    //     \\\"assassinate\\\",\\r\\n    //     \\\"heist\\\",\\r\\n    // ];\\r\\n\\r\\n    // for (const crimename of crimes) {\\r\\n    //     const crimeStats = ns.getCrimeStats(crimename);\\r\\n    //     ns.tprintf(\\\"%16s  %9s %5s %9s/s\\\", crimeStats.name, ns.nFormat(crimeStats.money, \\\"($0.000a)\\\"), stFormat(ns, crimeStats.time, false), ns.nFormat(crimeStats.money / (crimeStats.time / 1000), \\\"($0.000a)\\\"));\\r\\n    // }\\r\\n\\r\\n    while (true) {// (!ns.getPlayer().factions.includes(\\\"NiteSec\\\")) {\\r\\n        await ns.sleep(ns.commitCrime(\\\"larceny\\\") + 200);\\r\\n\\r\\n        let allFactions = ns.getPlayer().factions.concat(ns.checkFactionInvitations());\\r\\n        if (allFactions.includes(\\\"NiteSec\\\")) {\\r\\n            ns.joinFaction(\\\"NiteSec\\\")\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.workForFaction(\\\"NiteSec\\\", \\\"Field Work\\\");\\r\\n}\",\"filename\":\"crime.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"crime.js\",\"url\":\"blob:file:///d20a2745-df74-46f7-b2bc-882c21284a24\",\"moduleSequenceNumber\":78431}],\"dependents\":[],\"ramUsage\":16.1,\"server\":\"home\",\"moduleSequenceNumber\":78431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            let name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Combat\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%3s:  %10s  %s  %s  %s %10s %s\\\",\\r\\n                    member.name,\\r\\n                    member.str_exp.toFixed(2),\\r\\n                    member.str_mult.toFixed(2),\\r\\n                    member.str_asc_mult.toFixed(2),\\r\\n                    ascmem !== undefined ? ascmem.str : 0,\\r\\n                    member.str_asc_points.toFixed(2),\\r\\n                    member.upgrades\\r\\n                )\\r\\n            );\\r\\n\\r\\n            if (ascmem !== undefined && ascmem.str > 2) {\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"Ascending %s %.2f => %.2f hack multiplier\\\",\\r\\n                        member.name,\\r\\n                        member.str_asc_mult,\\r\\n                        member.str_asc_mult * ascmem.str\\r\\n                    )\\r\\n                );\\r\\n\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) =>\\r\\n                Object.assign(\\r\\n                    { name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) },\\r\\n                    ns.gang.getEquipmentStats(_name)\\r\\n                )\\r\\n            )\\r\\n            .filter(\\r\\n                (eq) =>\\r\\n                    eq.str !== undefined ||\\r\\n                    eq.dex !== undefined ||\\r\\n                    eq.agi !== undefined ||\\r\\n                    eq.def !== undefined ||\\r\\n                    eq.cha !== undefined\\r\\n            )\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.str !== undefined ? eq.str : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n\\r\\n        let newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money > buy.equipment.price) {\\r\\n                let result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(\\r\\n                        ns.sprintf(\\r\\n                            \\\"Buying %s:%s for %s\\\",\\r\\n                            buy.member.name,\\r\\n                            buy.equipment.name,\\r\\n                            ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")\\r\\n                        )\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(10000);\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        break;\\r\\n    }\\r\\n\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\r\\n            \\\"%22s %3s %3s %9s %s\\\",\\r\\n            task.name,\\r\\n            task.baseMoney,\\r\\n            task.difficulty,\\r\\n            task.baseRespect,\\r\\n            task.baseWanted\\r\\n        );\\r\\n    }\\r\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///e8eec95e-63da-4918-88c9-1bd1d9e51d5f\",\"moduleSequenceNumber\":858}],\"dependents\":[],\"ramUsage\":31.6,\"server\":\"home\",\"moduleSequenceNumber\":76853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const debug = false;\\r\\nexport const TSPACER = 100;\\r\\nexport const WEAKENNS = \\\"weaken.js\\\";\\r\\nexport const GROWNS = \\\"grow.js\\\";\\r\\nexport const HACKNS = \\\"hack.js\\\";\\r\\n\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    let timeLeft = ms;\\r\\n    let hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    let minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    let seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    let milliseconds = timeLeft;\\r\\n\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\r\\n    } else {\\r\\n        if (hours > 0 || showfull) return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0) return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction stdFormat(ns, offset = 0, showms = true) {\\r\\n    let date = new Date(new Date().getTime() + offset);\\r\\n\\r\\n    if (showms) {\\r\\n        let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n    } else {\\r\\n        return date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Host {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, hostname, threadSize) {\\r\\n        this.hostname = hostname;\\r\\n        this.threadSize = threadSize;\\r\\n        this.reservedScriptCalls = [];\\r\\n        this.getMaxThreads(ns);\\r\\n    }\\r\\n\\r\\n    reset() {\\r\\n        this.reservedScriptCalls = [];\\r\\n    }\\r\\n\\r\\n    getReservedThreadCount() {\\r\\n        let reservedThreadCount = 0;\\r\\n        for (const scriptCall of this.reservedScriptCalls) {\\r\\n            reservedThreadCount += scriptCall.threads;\\r\\n        }\\r\\n\\r\\n        return reservedThreadCount;\\r\\n    }\\r\\n\\r\\n    // return # of threads successfully allocated\\r\\n    tryReserveThreads(ns, script, threads, offset) {\\r\\n        let reservedThreadCount = this.getReservedThreadCount();\\r\\n\\r\\n        if (reservedThreadCount === this.maxThreads) return 0;\\r\\n\\r\\n        let newThreadCount = Math.min(this.maxThreads - reservedThreadCount, threads);\\r\\n        this.reservedScriptCalls.push({ script: script, threads: newThreadCount, offset: offset });\\r\\n\\r\\n        return newThreadCount;\\r\\n    }\\r\\n\\r\\n    // update max threads in case server size has changed\\r\\n    getMaxThreads(ns) {\\r\\n        this.maxThreads = Math.floor(ns.getServerMaxRam(this.hostname) / this.threadSize);\\r\\n\\r\\n        // if this host is home, reserve 64GB of ram for other stuff\\r\\n        if (this.hostname === \\\"home\\\") {\\r\\n            let homeram = ns.getServerMaxRam(this.hostname) - 64;\\r\\n            this.maxThreads = Math.max(0, Math.floor(homeram / this.threadSize));\\r\\n        }\\r\\n\\r\\n        return this.maxThreads;\\r\\n        //return (this.maxThreads = 2859);\\r\\n    }\\r\\n\\r\\n    async prep(ns, force = false) {\\r\\n        if (force || !ns.fileExists(GROWNS, this.hostname)) await ns.scp(GROWNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(WEAKENNS, this.hostname)) await ns.scp(WEAKENNS, \\\"home\\\", this.hostname);\\r\\n        if (force || !ns.fileExists(HACKNS, this.hostname)) await ns.scp(HACKNS, \\\"home\\\", this.hostname);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class SmartHackEnv {\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    constructor(ns, targetname, hostname) {\\r\\n        this.targetname = targetname;\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.tspacer = TSPACER; // CONST\\r\\n\\r\\n        this.weakenRam = ns.getScriptRam(WEAKENNS);\\r\\n        this.growRam = ns.getScriptRam(GROWNS);\\r\\n        this.hackRam = ns.getScriptRam(HACKNS);\\r\\n        this.threadSize = Math.max(this.weakenRam, this.growRam, this.hackRam);\\r\\n\\r\\n        this.host = new Host(ns, hostname, this.threadSize);\\r\\n        this.cores = ns.getServer(this.host.hostname).cores;\\r\\n        this.maxThreads = this.host.maxThreads;\\r\\n\\r\\n        // Target Info\\r\\n        this.security = 0;\\r\\n        this.lowSecurity = 0;\\r\\n        this.money = 0;\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenStartSec = 0;\\r\\n        this.weakenAmountPerThread = 0;\\r\\n        this.weakenThreads = 0;\\r\\n        this.weakenGrowThreads = 0;\\r\\n        this.weakenHackThreads = 0;\\r\\n        this.weakenTime = 0;\\r\\n        this.weakenTimeFullCycle = 0;\\r\\n\\r\\n        // Grow Info\\r\\n        this.growStartMoney = 0;\\r\\n        this.growMult = 0;\\r\\n        this.growThreads = 0;\\r\\n        this.growSecIncrease = 0;\\r\\n        this.growTime = 0;\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackStartMoney = 0;\\r\\n        this.hackTotal = 0;\\r\\n        this.hackThreads = 0;\\r\\n        this.hackSecIncrease = 0;\\r\\n        this.hackTime = 0;\\r\\n        this.hackPercentPerThread = 0;\\r\\n\\r\\n        // Batch Cycle Info\\r\\n        this.threadsPerCycle = 0;\\r\\n        this.cycleSpacer = this.tspacer * 4;\\r\\n        this.cycleFullTime = 0; // this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = 0; // Math.floor(this.cycleFitTime / this.cycleSpacer)\\r\\n        this.cycleTotal = 0;\\r\\n        this.cycleBatchTime = 0; // this.cycleFullTime + this.cycleSpacer * this.cycleTotal\\r\\n\\r\\n        // Simulator Info\\r\\n        this.simEnabled = false;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n    }\\r\\n\\r\\n    async init(ns, force = false) {\\r\\n        await this.host.prep(ns, force);\\r\\n    }\\r\\n\\r\\n    resetSim(ns) {\\r\\n        this.state = HackState.UNSET;\\r\\n        this.simHost = ns.getServer(this.hostname);\\r\\n        this.simTarget = ns.getServer(this.targetname);\\r\\n        this.simPlayer = ns.getPlayer();\\r\\n        this.simTime = 0;\\r\\n        this.simIncome = 0;\\r\\n        this.simForceState = HackState.UNSET;\\r\\n    }\\r\\n\\r\\n    getServerSecurityLevel(ns) {\\r\\n        if (this.simEnabled) return this.simTarget.hackDifficulty;\\r\\n\\r\\n        return ns.getServerSecurityLevel(this.targetname);\\r\\n    }\\r\\n\\r\\n    getServerMoneyAvailable(ns) {\\r\\n        if (this.simEnabled) return Math.max(this.simTarget.moneyAvailable, 1);\\r\\n\\r\\n        return Math.max(ns.getServerMoneyAvailable(this.targetname), 1);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    getWeakenTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.weakenTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getWeakenTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getGrowTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.growTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getGrowTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    getHackTime(ns) {\\r\\n        if (this.simEnabled) return Math.ceil(ns.formulas.hacking.hackTime(this.simTarget, this.simPlayer));\\r\\n\\r\\n        return Math.ceil(ns.getHackTime(this.targetname));\\r\\n    }\\r\\n\\r\\n    hackAnalyze(ns) {\\r\\n        if (this.simEnabled) return ns.formulas.hacking.hackPercent(this.simTarget, this.simPlayer);\\r\\n\\r\\n        return ns.hackAnalyze(this.targetname);\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    calcGrowThreads(ns, _growMult) {\\r\\n        let growMult = _growMult !== undefined ? _growMult : this.growMult;\\r\\n        if (growMult <= 1) return 0;\\r\\n        let growThreads = Math.ceil(ns.growthAnalyze(this.targetname, growMult, this.cores));\\r\\n\\r\\n        // growThreads in a simulation will probably overshoot because the actual security is too high.\\r\\n        // start with the bad estimate and reduce grow threads until the result from growPercent is less\\r\\n        // than growMult, then increase it back by 1\\r\\n        if (this.simEnabled) {\\r\\n            while (\\r\\n                ns.formulas.hacking.growPercent(this.simTarget, --growThreads, this.simPlayer, this.cores) > growMult\\r\\n            );\\r\\n\\r\\n            // correct overshoot\\r\\n            growThreads++;\\r\\n        }\\r\\n        return growThreads;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    async refresh(ns) {\\r\\n        if (this.isWRunning(ns)) {\\r\\n            // process in progress, wait for next refresh to update\\r\\n            await ns.sleep(1000);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Host state\\r\\n        this.maxThreads = this.host.getMaxThreads(ns);\\r\\n        this.cores = ns.getServer(this.host.hostname).cores;\\r\\n\\r\\n        // Target Info\\r\\n        this.highMoney = ns.getServerMaxMoney(this.targetname);\\r\\n        this.lowMoney = ns.getServerMaxMoney(this.targetname) * 0.5;\\r\\n        this.money = this.getServerMoneyAvailable(ns);\\r\\n        this.lowSecurity = ns.getServerMinSecurityLevel(this.targetname);\\r\\n        this.security = this.getServerSecurityLevel(ns);\\r\\n\\r\\n        // Hack Info\\r\\n        this.hackTime = this.getHackTime(ns);\\r\\n        this.hackPercentPerThread = this.hackAnalyze(ns);\\r\\n        this.hackThreads = 1 / this.hackPercentPerThread - 1;\\r\\n        this.hackTotal = this.hackPercentPerThread * this.hackThreads * this.money;\\r\\n        this.hackSecIncrease = ns.hackAnalyzeSecurity(this.hackThreads);\\r\\n\\r\\n        // Grow Info\\r\\n        this.growTime = this.getGrowTime(ns);\\r\\n\\r\\n        // Weaken Info\\r\\n        this.weakenTime = this.getWeakenTime(ns);\\r\\n        this.weakenAmountPerThread = ns.weakenAnalyze(1, this.cores);\\r\\n\\r\\n        // Cycle Info\\r\\n        this.cycleFullTime = this.weakenTime + this.tspacer * 2;\\r\\n        this.cycleMax = Math.floor((this.hackTime - this.tspacer) / this.cycleSpacer);\\r\\n\\r\\n        this.threadsPerCycle = this.hackThreads + this.weakenHackThreads + this.growThreads + this.weakenGrowThreads;\\r\\n\\r\\n        // Primary Cycle Info\\r\\n        let primaryGrowMult = Math.max(this.highMoney / this.money, 1);\\r\\n        let primaryGrowThreads = this.calcGrowThreads(ns, primaryGrowMult);\\r\\n        let primaryGrowSecIncrease = ns.growthAnalyzeSecurity(primaryGrowThreads);\\r\\n        let primarySecDiff = this.security - this.lowSecurity;\\r\\n        let primaryWeakenThreads = Math.ceil((primaryGrowSecIncrease + primarySecDiff) / this.weakenAmountPerThread);\\r\\n        let primaryThreadsTotal = primaryGrowThreads + primaryWeakenThreads;\\r\\n        if (primarySecDiff < 1 && primaryGrowMult < 1.05) primaryThreadsTotal = 0; // dont bother with the grow/weaken cycle if we're already very close to optimal\\r\\n\\r\\n        if (primaryThreadsTotal > this.maxThreads) {\\r\\n            ns.tprintf(\\\"ERROR: Unable to allocate enough threads to primary cycle, use super_hack_adv algorithm\\\");\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        let allCycles = [];\\r\\n        //let cycleStep = Math.max(Math.floor(this.cycleMax / 10), 1)\\r\\n        let cycleStep = 1;\\r\\n        for (let cycleTotal = 1; cycleTotal <= this.cycleMax; cycleTotal += cycleStep) {\\r\\n            if (cycleTotal === 1 && primaryThreadsTotal > 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    production: 1,\\r\\n                });\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let usableThreads = this.maxThreads - primaryThreadsTotal;\\r\\n            let usableCycles = primaryThreadsTotal > 0 ? cycleTotal - 1 : cycleTotal;\\r\\n\\r\\n            let cycleThreadAllowance = Math.floor(usableThreads / usableCycles);\\r\\n\\r\\n            let hackThreads = Math.floor(1 / this.hackPercentPerThread - 1);\\r\\n            //let hackThreadStep = Math.max(Math.floor(hackThreads / 25), 1);\\r\\n            let hackThreadStep = 1;\\r\\n            let hackTotal = this.hackPercentPerThread * hackThreads * this.highMoney;\\r\\n            let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n\\r\\n            let growMult = Math.max(this.highMoney / (this.highMoney - hackTotal), 1);\\r\\n            let growThreads = this.calcGrowThreads(ns, growMult);\\r\\n            let growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n\\r\\n            let weakenHackThreads = Math.ceil(hackSecIncrease / this.weakenAmountPerThread);\\r\\n            let weakenGrowThreads = Math.ceil(growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n            let totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n\\r\\n            while (totalThreads > cycleThreadAllowance) {\\r\\n                hackThreads -= hackThreadStep;\\r\\n\\r\\n                if (hackThreads <= 0) break;\\r\\n\\r\\n                hackTotal = this.hackPercentPerThread * hackThreads * this.highMoney;\\r\\n                hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads);\\r\\n\\r\\n                growMult = Math.max(this.highMoney / (this.highMoney - hackTotal), 1);\\r\\n                growThreads = this.calcGrowThreads(ns, growMult);\\r\\n                growSecIncrease = ns.growthAnalyzeSecurity(growThreads);\\r\\n\\r\\n                weakenHackThreads = Math.ceil(hackSecIncrease / this.weakenAmountPerThread);\\r\\n                weakenGrowThreads = Math.ceil(growSecIncrease / this.weakenAmountPerThread);\\r\\n\\r\\n                totalThreads = hackThreads + weakenHackThreads + growThreads + weakenGrowThreads;\\r\\n            }\\r\\n\\r\\n            if (hackThreads <= 0) {\\r\\n                allCycles.push({\\r\\n                    cycleTotal: cycleTotal,\\r\\n                    production: 0,\\r\\n                });\\r\\n\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let fullCycleTime = this.cycleFullTime + this.cycleSpacer * (cycleTotal - 1);\\r\\n\\r\\n            allCycles.push({\\r\\n                cycleTotal: cycleTotal,\\r\\n                production: (usableCycles * hackTotal) / (fullCycleTime / 1000),\\r\\n                fullCycleTime: fullCycleTime,\\r\\n                hackThreads: hackThreads,\\r\\n                growThreads: growThreads,\\r\\n                weakenHackThreads: weakenHackThreads,\\r\\n                weakenGrowThreads: weakenGrowThreads,\\r\\n                percentPerCycle: (hackTotal / ns.getServerMaxMoney(this.targetname)) * 100,\\r\\n            });\\r\\n        }\\r\\n\\r\\n        allCycles = allCycles.sort((a, b) => b.production - a.production);\\r\\n\\r\\n        for (const cycle of allCycles) {\\r\\n            break;\\r\\n            let batchThreads =\\r\\n                cycle.hackThreads + cycle.growThreads + cycle.weakenHackThreads + cycle.weakenGrowThreads;\\r\\n            if (cycle.hackThreads === undefined) batchThreads = 0;\\r\\n            let cycleThreads = primaryThreadsTotal + batchThreads * (cycle.cycleTotal - 1);\\r\\n            if (primaryThreadsTotal === 0) {\\r\\n                cycleThreads = batchThreads * cycle.cycleTotal;\\r\\n            }\\r\\n            let cycleMem = cycleThreads * this.threadSize;\\r\\n            ns.tprintf(\\r\\n                \\\"%3d  %9s/s %5.2f %d/%4d/%5d %6dGB\\\",\\r\\n                cycle.cycleTotal,\\r\\n                ns.nFormat(cycle.production, \\\"($0.000a)\\\"),\\r\\n                cycle.percentPerCycle ? cycle.percentPerCycle : 0,\\r\\n                primaryThreadsTotal,\\r\\n                batchThreads,\\r\\n                cycleThreads,\\r\\n                cycleMem\\r\\n            );\\r\\n        }\\r\\n\\r\\n        let cycleTarget = allCycles[0];\\r\\n        this.hackThreads = cycleTarget.hackThreads;\\r\\n        this.growThreads = cycleTarget.growThreads;\\r\\n        this.weakenHackThreads = cycleTarget.weakenHackThreads;\\r\\n        this.weakenGrowThreads = cycleTarget.weakenGrowThreads;\\r\\n        this.cycleTotal = cycleTarget.cycleTotal;\\r\\n        this.cycleBatchTime = cycleTarget.fullCycleTime;\\r\\n\\r\\n        let weakenGrowOffsetTime = this.tspacer * 2;\\r\\n        let growOffsetTime = this.weakenTime + this.tspacer - this.growTime;\\r\\n        let hackOffsetTime = this.weakenTime - this.hackTime - this.tspacer;\\r\\n\\r\\n        if (primaryThreadsTotal > 0) {\\r\\n            if (primaryGrowThreads > 0)\\r\\n                this.host.tryReserveThreads(ns, GROWNS, primaryGrowThreads, growOffsetTime);\\r\\n            if (primaryWeakenThreads > 0)\\r\\n                this.host.tryReserveThreads(ns, WEAKENNS, primaryWeakenThreads, weakenGrowOffsetTime);\\r\\n\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%8s SMART-PRIMARY: %s => Grow %d; Weaken %d; Total Threads %d\\\",\\r\\n                    new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                    this.targetname,\\r\\n                    primaryGrowThreads,\\r\\n                    primaryWeakenThreads,\\r\\n                    primaryThreadsTotal\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < this.cycleTotal; i++) {\\r\\n            if (primaryThreadsTotal > 0 && i === 0) continue;\\r\\n            let cycleOffsetTime = i * this.cycleSpacer;\\r\\n            this.host.tryReserveThreads(ns, HACKNS, this.hackThreads, cycleOffsetTime + hackOffsetTime);\\r\\n            this.host.tryReserveThreads(ns, GROWNS, this.growThreads, cycleOffsetTime + growOffsetTime);\\r\\n            this.host.tryReserveThreads(ns, WEAKENNS, this.weakenHackThreads, cycleOffsetTime);\\r\\n            this.host.tryReserveThreads(ns, WEAKENNS, this.weakenGrowThreads, cycleOffsetTime + weakenGrowOffsetTime);\\r\\n        }\\r\\n\\r\\n        let port = ns.getPortHandle(1);\\r\\n        port.clear();\\r\\n        port.write([\\r\\n            new Date(),\\r\\n            this.cycleBatchTime,\\r\\n            this.targetname,\\r\\n            ns.getScriptIncome(ns.getScriptName(), ns.getHostname(), ...ns.args),\\r\\n            \\\"SMART\\\",\\r\\n        ]);\\r\\n\\r\\n        ns.print(\\r\\n            ns.sprintf(\\r\\n                \\\"%8s SMART: %s => Hack %d; Grow %d; Hack/Grow Weaken %d/%d; Total Threads %d/%d; Total Cycles %d/%d; Time +%s:+%s [%s:%s]\\\",\\r\\n                new Date().toLocaleTimeString(\\\"it-IT\\\"),\\r\\n                this.targetname,\\r\\n                this.hackThreads,\\r\\n                this.growThreads,\\r\\n                this.weakenHackThreads,\\r\\n                this.weakenGrowThreads,\\r\\n                this.threadsPerCycle,\\r\\n                this.threadsPerCycle * this.cycleTotal,\\r\\n                this.cycleTotal,\\r\\n                this.cycleMax,\\r\\n                stFormat(ns, this.weakenTime),\\r\\n                stFormat(ns, this.cycleBatchTime),\\r\\n                stdFormat(ns, this.weakenTime),\\r\\n                stdFormat(ns, this.cycleBatchTime)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        await this.execute(ns);\\r\\n        this.resetThreads();\\r\\n    }\\r\\n\\r\\n    async execute(ns) {\\r\\n        let execs = [];\\r\\n        for (const scriptCall of this.host.reservedScriptCalls) {\\r\\n            execs.push({\\r\\n                script: scriptCall.script,\\r\\n                host: this.host.hostname,\\r\\n                threads: scriptCall.threads,\\r\\n                target: this.targetname,\\r\\n                delay: scriptCall.offset,\\r\\n                pos: execs.length,\\r\\n            });\\r\\n        }\\r\\n\\r\\n        execs = execs.sort((a, b) => a.delay - b.delay);\\r\\n\\r\\n        let startTime = Date.now();\\r\\n        for (let exec of execs) {\\r\\n            while (Date.now() - startTime < exec.delay) await ns.sleep(20);\\r\\n\\r\\n            ns.exec(exec.script, exec.host, exec.threads, exec.target, exec.pos, startTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    resetThreads() {\\r\\n        this.host.reset();\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    isWRunning(ns) {\\r\\n        if (this.simEnabled) return false;\\r\\n\\r\\n        let ps = ns.ps(this.host.hostname);\\r\\n        for (let psInfo of ps) {\\r\\n            if (psInfo.filename === WEAKENNS && psInfo.args.includes(this.targetname)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /** @param {import(\\\".\\\").NS } ns */\\r\\n    fastSim(ns, time) {\\r\\n        this.resetSim(ns);\\r\\n        this.simEnabled = true;\\r\\n\\r\\n        this.updateForW(ns);\\r\\n        while (!this.doneWeaken(ns)) {\\r\\n            this.simTarget.hackDifficulty -= this.weakenThreads * this.weakenAmountPerThread;\\r\\n            this.simTarget.hackDifficulty = Math.max(\\r\\n                this.simTarget.hackDifficulty,\\r\\n                ns.getServerMinSecurityLevel(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForGW(ns);\\r\\n        let simGrowMult = ns.formulas.hacking.growPercent(this.simTarget, this.growThreads, this.simPlayer, this.cores);\\r\\n        while (!this.doneGrow(ns)) {\\r\\n            this.simTarget.moneyAvailable *= simGrowMult;\\r\\n            this.simTarget.moneyAvailable = Math.min(\\r\\n                this.simTarget.moneyAvailable,\\r\\n                ns.getServerMaxMoney(this.targetname)\\r\\n            );\\r\\n\\r\\n            this.simTime += this.weakenTime + this.tspacer;\\r\\n            this.simTarget.hackDifficulty = this.simTarget.minDifficulty;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"GROW-WEAKEN: Fast Sim Time: %s (%s + %s)\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.tFormat(this.weakenTime, true),\\r\\n            //     ns.tFormat(this.tspacer, true)\\r\\n            // );\\r\\n\\r\\n            if (this.simTime > time) return this.simIncome;\\r\\n        }\\r\\n\\r\\n        this.updateForHW(ns);\\r\\n        let hwTotal = this.hackTotal;\\r\\n        let hwTime = this.weakenTime * 2 + this.tspacer * 2;\\r\\n        let hwIncome = hwTotal / hwTime;\\r\\n        this.updateForHGW(ns);\\r\\n        let hgwTotal = this.hackTotal * this.cycleTotal;\\r\\n        let hgwTime = this.cycleBatchTime + this.tspacer;\\r\\n        let hgwIncome = hgwTotal / hgwTime;\\r\\n\\r\\n        let timeRemaining = time - this.simTime;\\r\\n        let hackCycles = 0;\\r\\n        if (hwIncome > hgwIncome) {\\r\\n            hackCycles = Math.floor(timeRemaining / hwTime);\\r\\n            this.simTime += hackCycles * hwTime;\\r\\n            this.simIncome += hackCycles * hwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hwTime, true)\\r\\n            // );\\r\\n        } else {\\r\\n            hackCycles = Math.ceil(timeRemaining / hgwTime);\\r\\n            this.simTime += hackCycles * hgwTime;\\r\\n            this.simIncome += hackCycles * hgwTotal;\\r\\n\\r\\n            // ns.print(ns.sprintf(\\r\\n            //     \\\"HACK-GROW-WEAKEN: Fast Sim Time: %s; Fast Sim Income: %s (%s/s); Fast Sim Hack Cycles: %d; Cycle Time: %s\\\",\\r\\n            //     ns.tFormat(this.simTime, true),\\r\\n            //     ns.nFormat(this.simIncome, \\\"($0.000a)\\\"),\\r\\n            //     ns.nFormat(this.simIncome / (this.simTime / 1000), \\\"($0.000a)\\\"),\\r\\n            //     hackCycles,\\r\\n            //     ns.tFormat(hgwTime, true)\\r\\n            // );\\r\\n        }\\r\\n\\r\\n        return this.simIncome / (this.simTime / 1000);\\r\\n    }\\r\\n}\",\"filename\":\"smart_hack_env.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.15,\"server\":\"home\",\"moduleSequenceNumber\":76854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { allHosts, serverIsHackable, setns, canExecuteOnServer, cleanLogs } from \\\"./util.js\\\";\\r\\nimport { SmartHackEnv } from \\\"./smart_hack_env.js\\\";\\r\\n\\r\\n/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    setns(ns);\\r\\n\\r\\n    cleanLogs();\\r\\n\\r\\n    let env = new SmartHackEnv(ns, ns.args[1], ns.args[0]);\\r\\n    await env.init(ns)\\r\\n\\r\\n    while (true) {\\r\\n        await env.refresh(ns);\\r\\n    }\\r\\n}\",\"filename\":\"smart_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"smart_hack_env.js\",\"url\":\"blob:file:///5965ee58-6720-4a0d-adae-05bcf5b764cf\",\"moduleSequenceNumber\":76519},{\"filename\":\"util.js\",\"url\":\"blob:file:///1fcf98b6-c883-44f1-822f-be1e1e59b045\",\"moduleSequenceNumber\":76505},{\"filename\":\"smart_hack.js\",\"url\":\"blob:file:///8d9493ba-c5dd-4a76-954d-10912a19c4a8\",\"moduleSequenceNumber\":76605}],\"dependents\":[],\"ramUsage\":12.15,\"server\":\"home\",\"moduleSequenceNumber\":76855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n\\r\\n    let members;\\r\\n    while (true) {\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n        let memberIndex = ns.gang.getMemberNames().length;\\r\\n\\r\\n        while (ns.gang.canRecruitMember()) {\\r\\n            let name = \\\"g\\\" + memberIndex.toString();\\r\\n            ns.gang.recruitMember(name);\\r\\n            ns.gang.setMemberTask(name, \\\"Train Hacking\\\");\\r\\n            memberIndex++;\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        members = ns.gang.getMemberNames().map((name) => ns.gang.getMemberInformation(name));\\r\\n\\r\\n        for (const member of members) {\\r\\n            const ascmem = ns.gang.getAscensionResult(member.name);\\r\\n            ns.print(\\r\\n                ns.sprintf(\\r\\n                    \\\"%3s:  %10s  %s  %s  %s %10s %s\\\",\\r\\n                    member.name,\\r\\n                    member.hack_exp.toFixed(2),\\r\\n                    member.hack_mult.toFixed(2),\\r\\n                    member.hack_asc_mult.toFixed(2),\\r\\n                    ascmem !== undefined ? ascmem.hack : 0,\\r\\n                    member.hack_asc_points.toFixed(2),\\r\\n                    member.upgrades\\r\\n                )\\r\\n            );\\r\\n\\r\\n            if (ascmem !== undefined && ascmem.hack > 2) {\\r\\n                ns.print(\\r\\n                    ns.sprintf(\\r\\n                        \\\"Ascending %s %.2f => %.2f hack multiplier\\\",\\r\\n                        member.name,\\r\\n                        member.hack_asc_mult,\\r\\n                        member.hack_asc_mult * ascmem.hack\\r\\n                    )\\r\\n                );\\r\\n\\r\\n                ns.gang.ascendMember(member.name);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n\\r\\n        const combatEquipment = ns.gang\\r\\n            .getEquipmentNames()\\r\\n            .map((_name) =>\\r\\n                Object.assign(\\r\\n                    { name: _name, price: ns.gang.getEquipmentCost(_name), type: ns.gang.getEquipmentType(_name) },\\r\\n                    ns.gang.getEquipmentStats(_name)\\r\\n                )\\r\\n            )\\r\\n            .filter((eq) => eq.hack !== undefined)\\r\\n            .sort((a, b) => a.price - b.price);\\r\\n\\r\\n        // for (const eq of combatEquipment) {\\r\\n        //     ns.print(ns.sprintf(\\r\\n        //         \\\"%-13s %20s  %.2f  %9s\\\",\\r\\n        //         eq.type,\\r\\n        //         eq.name,\\r\\n        //         eq.hack !== undefined ? eq.hack : 0,\\r\\n        //         ns.nFormat(eq.price, \\\"($0.000a)\\\")\\r\\n        //     ));\\r\\n        // }\\r\\n\\r\\n        let newBuys = [];\\r\\n        for (const member of members) {\\r\\n            for (const eq of combatEquipment) {\\r\\n                if (!member.upgrades.includes(eq.name)) {\\r\\n                    newBuys.push({\\r\\n                        member: member,\\r\\n                        equipment: eq,\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        newBuys.sort((a, b) => a.equipment.price - b.equipment.price);\\r\\n\\r\\n        if (ns.getPlayer().money >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n\\r\\n        for (const buy of newBuys) {\\r\\n            if (ns.getPlayer().money * 0.25 > buy.equipment.price) {\\r\\n                let result = ns.gang.purchaseEquipment(buy.member.name, buy.equipment.name);\\r\\n                if (result)\\r\\n                    ns.print(\\r\\n                        ns.sprintf(\\r\\n                            \\\"Buying %s:%s for %s\\\",\\r\\n                            buy.member.name,\\r\\n                            buy.equipment.name,\\r\\n                            ns.nFormat(buy.equipment.price, \\\"($0.000a)\\\")\\r\\n                        )\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(10000);\\r\\n\\r\\n        ns.print(ns.sprintf(\\\"==================================\\\"));\\r\\n    }\\r\\n\\r\\n    const tasks = ns.gang\\r\\n        .getTaskNames()\\r\\n        .map((_name) => ns.gang.getTaskStats(_name))\\r\\n        .filter((task) => task.isCombat)\\r\\n        .sort((a, b) => b.baseMoney - a.baseMoney);\\r\\n\\r\\n    for (const task of tasks) {\\r\\n        ns.tprintf(\\r\\n            \\\"%22s %3s %3s %9s %s\\\",\\r\\n            task.name,\\r\\n            task.baseMoney,\\r\\n            task.difficulty,\\r\\n            task.baseRespect,\\r\\n            task.baseWanted\\r\\n        );\\r\\n    }\\r\\n}\",\"filename\":\"hacking_gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacking_gang.js\",\"url\":\"blob:file:///b9aff74a-6643-4e55-a772-626f58de32bb\",\"moduleSequenceNumber\":72995}],\"dependents\":[],\"ramUsage\":36.2,\"server\":\"home\",\"moduleSequenceNumber\":76856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"38.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9949098439.2,\"moneyMax\":49745492196.00001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1386,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"89.0.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11019109318.400002,\"moneyMax\":55095546592.000015,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1106,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30850.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,5],[9,7,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"26.0.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":4215928129.6000004,\"moneyMax\":21079640648.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":912,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"41.5.7.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":3045196757.6000004,\"moneyMax\":15225983788.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1004,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-129648-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,10,0,2,0,0,0,7,5,3,9,2,8,10,1],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"26.0.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5178689888.6,\"moneyMax\":25893449443.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1199,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"24.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":3607858279.8,\"moneyMax\":18039291399,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":959,\"serverGrowth\":63}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"82.5.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":4244867456.6000004,\"moneyMax\":21224337283.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":954,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"90.9.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":4715356542.400001,\"moneyMax\":23576782712.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1105,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"82.9.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4287065169.6000004,\"moneyMax\":21435325848.000004,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1023,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"44.6.4.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":313417939.2,\"moneyMax\":1567089696,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1102,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"8.5.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1170,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"39.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":231807192.60000002,\"moneyMax\":1159035963.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1038,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"3.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":169127410.4,\"moneyMax\":845637052,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":867,\"serverGrowth\":54}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-583476.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[9,4],[9,5,5],[4,1,6,5],[1,9,1,8,5],[6,4,2,3,6,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"83.9.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":174984585.20000002,\"moneyMax\":874922926,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":914,\"serverGrowth\":46}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"36.2.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":121009326,\"moneyMax\":605046630,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":851,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"1.9.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":148697260,\"moneyMax\":743486300,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":882,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"78.3.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":183233973.20000002,\"moneyMax\":916169866,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":853,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"68.8.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":224263923.4,\"moneyMax\":1121319617,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":848,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"69.4.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":178512614.8,\"moneyMax\":892563074,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":820,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"20.9.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":126312025.60000001,\"moneyMax\":631560128,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":829,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"60.5.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":172050735.4,\"moneyMax\":860253677,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":911,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"31.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":150259959.20000002,\"moneyMax\":751299796.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":872,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"0.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":209072595.60000002,\"moneyMax\":1045362978.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":885,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"97.8.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":195048407.20000002,\"moneyMax\":975242036,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":886,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"10.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":218529925.8,\"moneyMax\":1092649629,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":796,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"98.8.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":166008306.8,\"moneyMax\":830041534.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":827,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"18.9.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":159817343.6,\"moneyMax\":799086718,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":767,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"91.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":337641231.8,\"moneyMax\":1688206159,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":851,\"serverGrowth\":62}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"42.8.5.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":327009421.8,\"moneyMax\":1635047109,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":827,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"98.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":228786747.20000002,\"moneyMax\":1143933736,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":785,\"serverGrowth\":82}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"64.8.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":287254871.2,\"moneyMax\":1436274356,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":811,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"27.5.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":207774399.8,\"moneyMax\":1038871999,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":777,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"25.7.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":151252431.8,\"moneyMax\":756262159.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":650,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"59.5.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":126759690.80000001,\"moneyMax\":633798454.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":480,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"68.6.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":147164296.20000002,\"moneyMax\":735821481.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":581,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"55.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":41813381.400000006,\"moneyMax\":209066907.00000003,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":411,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"0.1.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":42236093.400000006,\"moneyMax\":211180467.00000003,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":408,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"40.0.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":183515281.60000002,\"moneyMax\":917576408.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":725,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592520.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,24],[24,33],[7,16],[12,13],[14,15],[25,34],[6,12],[16,17],[23,26],[13,23],[6,13],[15,23],[12,16],[22,29],[12,20],[23,33],[17,25],[23,30],[23,26],[12,14]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"65.3.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":48835200,\"moneyMax\":244176000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":471,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"12.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":95899513.2,\"moneyMax\":479497566,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":627,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"6.3.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":98611591.60000001,\"moneyMax\":493057958,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":414,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"46.5.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",3,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19929,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1423945f-a2a4-46bc-94ce-1bd43f039d59\",\"moduleSequenceNumber\":84829}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1423945f-a2a4-46bc-94ce-1bd43f039d59\",\"moduleSequenceNumber\":84829}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":84829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a54fe8db-7869-4301-98a2-e322efca598f\",\"moduleSequenceNumber\":84633}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":84633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a4a9be43-ebc6-44b6-bd56-281f73055964\",\"moduleSequenceNumber\":78434}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":78434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":35545275.4,\"moneyMax\":177726377,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":304,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"51.7.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":44473220.6,\"moneyMax\":222366103,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":388,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.7.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":400,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607013.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,26],[6,13],[12,21],[8,9],[5,11],[3,12],[17,21],[16,24],[8,13],[9,15],[6,12],[15,23],[19,24],[18,27],[21,31],[5,15],[7,10],[19,26],[22,30],[18,19]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"93.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":15211180.200000001,\"moneyMax\":76055901,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":268,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"94.4.9.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":76936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///52ceece5-4fde-47ff-9436-27aeecbfb25f\",\"moduleSequenceNumber\":76942}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":76942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":76940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"62.5.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",10,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19936,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///78432ce8-6e9e-4c51-a7db-6b371913485d\",\"moduleSequenceNumber\":76945}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///78432ce8-6e9e-4c51-a7db-6b371913485d\",\"moduleSequenceNumber\":76945}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":76945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///de17f646-6e69-4151-bece-b1b86eac6315\",\"moduleSequenceNumber\":84640}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":84640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8fcd1843-91a8-4145-8d93-dcf498f9663a\",\"moduleSequenceNumber\":77197}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":77197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"22.4.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",11,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19937,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///dc45bebe-39f4-4df4-835a-06c8e404c554\",\"moduleSequenceNumber\":76946}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///dc45bebe-39f4-4df4-835a-06c8e404c554\",\"moduleSequenceNumber\":76946}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":76946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3375a39a-8066-470c-baf5-799465bd696b\",\"moduleSequenceNumber\":84641}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":84641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7e3db1d3-d2a1-48ee-b5bf-672c22edf8c2\",\"moduleSequenceNumber\":77198}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":77198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"63.1.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",12,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19938,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///af269839-3103-477e-909a-91edb3d45465\",\"moduleSequenceNumber\":76947}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///af269839-3103-477e-909a-91edb3d45465\",\"moduleSequenceNumber\":76947}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":76947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ec5fe518-421d-42b0-ac00-a801074175ca\",\"moduleSequenceNumber\":84642}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":84642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b9ece928-22f7-45be-a729-0a483ef14b80\",\"moduleSequenceNumber\":77199}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":77199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"88.3.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",4,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19930,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0e06d7ff-f778-4de0-b4dd-130ef8b89c0f\",\"moduleSequenceNumber\":84830}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0e06d7ff-f778-4de0-b4dd-130ef8b89c0f\",\"moduleSequenceNumber\":84830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":84830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c8a6d13d-c31f-425f-9c54-3816f702b4c1\",\"moduleSequenceNumber\":84634}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":84634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ecfd80fe-de78-4fb3-b1b6-6d34f876e001\",\"moduleSequenceNumber\":78435}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":78435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"57.7.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",13,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19939,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///223fe28f-1a60-467f-b57a-d455355bc2de\",\"moduleSequenceNumber\":76948}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///223fe28f-1a60-467f-b57a-d455355bc2de\",\"moduleSequenceNumber\":76948}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":76948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///11da14d2-0e26-4cba-b150-a1df30478f9f\",\"moduleSequenceNumber\":84643}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":84643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b28cecd6-91f9-499b-92f6-9ccabfc18fd0\",\"moduleSequenceNumber\":77200}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":77200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"0.0.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",9,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19935,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f27fa1b7-26f1-4e5f-8420-6a4806d824dd\",\"moduleSequenceNumber\":84835}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f27fa1b7-26f1-4e5f-8420-6a4806d824dd\",\"moduleSequenceNumber\":84835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":84835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///58b890b1-cf62-4306-ab8b-74daaf6066ab\",\"moduleSequenceNumber\":84639}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":84639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b287963b-4e3f-43df-8503-550d56c69774\",\"moduleSequenceNumber\":78440}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":78440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"34.5.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":50.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",2,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19928,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":29,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4a08053e-a667-471f-9885-0b79abf66e97\",\"moduleSequenceNumber\":84828}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4a08053e-a667-471f-9885-0b79abf66e97\",\"moduleSequenceNumber\":84828}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":84828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///72552158-9e1a-4e55-b59d-34d6bddda753\",\"moduleSequenceNumber\":84632}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":84632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c9eeaf8c-7ae1-46fc-a1dc-eaec2dbc9581\",\"moduleSequenceNumber\":78433}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":78433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.2.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",14,1643645661326],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.40999999999999,\"pid\":19924,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///499bdb14-52df-45e5-89bb-22be8782f8fa\",\"moduleSequenceNumber\":84644}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",15,1643645661326],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":19925,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///499bdb14-52df-45e5-89bb-22be8782f8fa\",\"moduleSequenceNumber\":84644}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e1eb4083-341d-4de5-8f95-161be936ab0d\",\"moduleSequenceNumber\":76949}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":76949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///499bdb14-52df-45e5-89bb-22be8782f8fa\",\"moduleSequenceNumber\":84644}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":84644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bf1b40d0-a32f-433c-92e0-2275aa7b1649\",\"moduleSequenceNumber\":77201}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":77201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"71.8.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",16,1643645661326],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":19926,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///dc780d43-69fc-4223-a1f5-59bf01b17f1e\",\"moduleSequenceNumber\":76941}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6ac81181-3888-44a2-b2eb-f539ab64bffd\",\"moduleSequenceNumber\":76950}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":76950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///dc780d43-69fc-4223-a1f5-59bf01b17f1e\",\"moduleSequenceNumber\":76941}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":76941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e109bc1-3a12-46ea-8252-bcfee6c40a04\",\"moduleSequenceNumber\":77202}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":77202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"78.6.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",5,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19931,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bee03581-c054-46f3-ab5d-4139ebc9bbc3\",\"moduleSequenceNumber\":84831}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bee03581-c054-46f3-ab5d-4139ebc9bbc3\",\"moduleSequenceNumber\":84831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":84831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cb24f904-f814-4ada-8678-135c3bed21f3\",\"moduleSequenceNumber\":84635}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":84635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bdc97c8d-f003-4ff8-91d8-512fdb807d66\",\"moduleSequenceNumber\":78436}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":78436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"32.9.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",8,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19934,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08b09866-9f5d-4123-b834-c6c2fc3616e0\",\"moduleSequenceNumber\":84834}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08b09866-9f5d-4123-b834-c6c2fc3616e0\",\"moduleSequenceNumber\":84834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":84834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c8a10694-6f7c-400c-bb47-555d96645ff7\",\"moduleSequenceNumber\":84638}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":84638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///97e36fbb-19a7-448e-aaf1-e225c7160963\",\"moduleSequenceNumber\":78439}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":78439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937446.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((a(a)(())a\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"29.2.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",6,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19932,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2a2415cf-ca41-4fb2-a446-2d5b66e17d1d\",\"moduleSequenceNumber\":84832}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2a2415cf-ca41-4fb2-a446-2d5b66e17d1d\",\"moduleSequenceNumber\":84832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":84832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///083cf3c2-edfa-4697-bf98-0da3a82acfc3\",\"moduleSequenceNumber\":84636}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":84636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///36cf0436-f106-4fa0-8c84-5667a0f11072\",\"moduleSequenceNumber\":78437}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":78437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":13878167.8,\"moneyMax\":69390839,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"19.7.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":9517220.200000001,\"moneyMax\":47586101.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":248,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"78.0.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",7,1643645661326],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":19933,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0da29f7e-7518-46f1-b14a-7f987e76fc84\",\"moduleSequenceNumber\":84833}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0da29f7e-7518-46f1-b14a-7f987e76fc84\",\"moduleSequenceNumber\":84833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":84833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///93ad2b98-5928-4ad9-9680-bbfab47f7ddf\",\"moduleSequenceNumber\":84637}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":84637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///58ee0fe1-7e3f-4a42-83ef-038b6893090c\",\"moduleSequenceNumber\":78438}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":78438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"68.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":508,\"serverGrowth\":45}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"62.2.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":987,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"22.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":682,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"63.5.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":531,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"96.3.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998202.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,10,9,0,1,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"58.2.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8c361586-74b2-4ee4-84bb-67e5d9c54dac\",\"moduleSequenceNumber\":84827}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":84827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8cedc095-c14f-4abe-a542-59373f29fca9\",\"moduleSequenceNumber\":84631}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":84631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///15772955-526a-4024-8846-b896bdbf17e5\",\"moduleSequenceNumber\":78432}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":78432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"90.6.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"68.2.5.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":5.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",17,1643645661326],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":19927,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4648aaad-8df3-49f5-9cbb-46c2465d2696\",\"moduleSequenceNumber\":78430}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.grow(hostname);\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9e476672-ee02-424b-abb7-7388749a9b10\",\"moduleSequenceNumber\":85837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":85837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.weaken(hostname);\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4648aaad-8df3-49f5-9cbb-46c2465d2696\",\"moduleSequenceNumber\":78430}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":78430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hostname = ns.args[0];\\r\\n    await ns.hack(hostname);\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":78429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"52.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"52.7.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"0.6.0.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1785.9443588667743}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":7785.0517465087305}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"sa\":\"scan-analyze\",\"ll\":\"run ll.js\",\"as\":\"run assess.js\",\"brute\":\"home; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; killall; run starter.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe\",\"mcp\":\"run mcp.js\",\"ka\":\"run ka.js\",\"cct\":\"run cct.js\",\"eff\":\"run eff.js\",\"bs\":\"run buy_server.js\",\"bp\":\"run buy_programs.js\",\"crawl\":\"run crawl.js\",\"solo\":\"run solo.js\",\"batch\":\"run batcher.js\",\"s5\":\"run solo.js 5 go; tail solo.js\",\"s10\":\"run solo.js 10 go; tail solo.js\",\"s20\":\"run solo.js 20 go; tail solo.js\",\"s30\":\"run solo.js 30 go; tail solo.js\",\"s60\":\"run solo.js 60 go; tail solo.js\",\"s480\":\"run solo.js 480 go; tail solo.js\",\"fav\":\"run favor.js\",\"start\":\"run buy_programs.js; run crawl.js; run solo.js 2 go; tail solo.js\",\"c\":\"run clock.js\",\"hn\":\"run hacknet.js\",\"hnk\":\"kill hacknet.js\",\"crime\":\"run crime.js ; tail crime.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":3,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":523.8329287030055,\"territory\":0},\"Tetrads\":{\"power\":462.0814373091904,\"territory\":0},\"The Syndicate\":{\"power\":338.5793989678019,\"territory\":0},\"The Dark Army\":{\"power\":425.9332226243179,\"territory\":0},\"Speakers for the Dead\":{\"power\":23.64175576128401,\"territory\":0.1238811268432901},\"NiteSec\":{\"power\":1,\"territory\":0.14285714285714285},\"The Black Hand\":{\"power\":1684.3411367112471,\"territory\":0.733261730299566}}","LastExportBonus":"1643645673777","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643645673785"}}