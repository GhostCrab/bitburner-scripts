/** @param {NS} ns **/
/** dispatcher.ns - WGH job dispatcher **/
var debug = true
function fltEq(a, b) {
    let epsilon = .05
    return (a > b - epsilon && a < b + epsilon)
}

function doWeaken(ns, _hostname, _targetname, ramAllowance) {
    let host = ns.getServer(_hostname)
    let target = ns.getServer(_targetname)

    let weakenRam = ns.getScriptRam("weaken.ns")    // 1.75GB

    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores)
    let weakenThreads = Math.min(Math.ceil((target.hackDifficulty - target.minDifficulty) / weakenAmountPerThread), Math.floor(ramAllowance / weakenRam))

    if (debug) {
        let tweaken = ns.getWeakenTime(target.hostname)
        let estSecLevelAfterWeaken = Math.max(target.minDifficulty, target.hackDifficulty - (weakenThreads * weakenAmountPerThread))
        ns.tprintf("Weaken Process:")
        ns.tprintf("  Lowering Security on %s from %.2f to %.2f with %d (%.2fGB) threads running on %s for %s",
            target.hostname, target.hackDifficulty, estSecLevelAfterWeaken, weakenThreads, weakenThreads * weakenRam, host.hostname, ns.tFormat(tweaken))
    }

    ns.exec("weaken.ns", host.hostname, weakenThreads, target.hostname)
}

function doGrowAndWeaken(ns, _hostname, _targetname, ramAllowance, highMoney) {
    let host = ns.getServer(_hostname)
    let target = ns.getServer(_targetname)

    let growRam = ns.getScriptRam("grow.ns")        // 1.75GB
    let weakenRam = ns.getScriptRam("weaken.ns")    // 1.75GB

    let currentMoney = Math.max(1.0, target.moneyAvailable)
    let targetGrowMult = highMoney / currentMoney
    let fullGrowThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores))
    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores)
    let growThreads = fullGrowThreads + 1, weakenThreads, growRamCycle, growSecIncrease

    do {
        growThreads -= 1
        growSecIncrease = ns.growthAnalyzeSecurity(growThreads)
        weakenThreads = Math.ceil(growSecIncrease / weakenAmountPerThread)
        growRamCycle = (growThreads * growRam) + (weakenThreads * weakenRam)
    } while (growRamCycle > ramAllowance)

    if (debug) {
        let tweaken = ns.getWeakenTime(target.hostname)
        ns.tprintf("Grow Process:")
        ns.tprintf("  Grow assuming low money is %s, multiplier from low money x%.8f", 
            ns.nFormat(currentMoney, '($0.000a)'), targetGrowMult)
        ns.tprintf("  Current Money: %s/%s; Target Money: %s (x%.2f); Running at %.0f%% of fullGrowThreads (%d/%d)",
            ns.nFormat(target.moneyAvailable, '($0.000a)'), ns.nFormat(target.moneyMax, '($0.000a)'), ns.nFormat(highMoney, '($0.000a)'), targetGrowMult,
            (growThreads / fullGrowThreads) * 100, growThreads, fullGrowThreads)
        ns.tprintf("  Calling Grow with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s",
            growThreads, growThreads * growRam, weakenThreads, weakenThreads * weakenRam, growRamCycle, ns.tFormat(tweaken))
    }

    ns.exec("weaken.ns", host.hostname, weakenThreads, target.hostname)
    ns.exec("grow.ns", host.hostname, growThreads, target.hostname)
}

function doHackAndWeaken(ns, _hostname, _targetname) {
    let host = ns.getServer(_hostname)
    let target = ns.getServer(_targetname)

    let weakenRam = ns.getScriptRam("weaken.ns")    // 1.75GB
    let hackRam = ns.getScriptRam("hack.ns")        // 1.70GB

    let fullHackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, target.moneyAvailable - lowMoney))
    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores)
    let hackThreads = fullHackThreads + 1, weakenThreads, hackRamCycle
    
    do {
        hackThreads -= 1
        hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads)
        weakenThreads = Math.ceil(hackSecIncrease / weakenAmountPerThread)
        hackRamCycle = (hackThreads * hackRam) + (weakenThreads * weakenRam)
    } while (hackRamCycle > ramAllowance)

    if (debug) {
        let tweaken = ns.getWeakenTime(target.hostname)
        ns.tprintf("Hack Process:")
        ns.tprintf("  Calling Hack with %d threads (%.2fGB) and Weaken with %d threads (%.2fGB); Total %.2fGB for %s",
            hackThreads, hackThreads * hackRam, weakenThreads, weakenThreads * weakenRam, hackRamCycle, ns.tFormat(tweaken))
    }

    ns.exec("weaken.ns", host.hostname, weakenThreads, target.hostname)
    ns.exec("hack.ns", host.hostname, hackThreads, target.hostname)
}

function doHGW(ns, _hostname, _targetname, highMoney, lowMoney, ramAllowance) {
    /*//////////// ALGO ////////////
        if hackRamCycle is greater than ramAllowance
        brute - compute ramAllowance / hackRamCycle ratio and reduce targetHackAmount by that ratio
        while hackRamCycle > ramAllowance
        recompute everything up to hackRamCycle
        if hackRamCycle > ramAllowance
            reduce targetHackAmount by .1% of original targetHackAmount
    //////////////////////////////*/
    let host = ns.getServer(_hostname)
    let target = ns.getServer(_targetname)

    let growRam = ns.getScriptRam("grow.ns")        // 1.75GB
    let weakenRam = ns.getScriptRam("weaken.ns")    // 1.75GB
    let hackRam = ns.getScriptRam("hack.ns")        // 1.70GB

    let targetHackAmount = target.moneyAvailable - lowMoney
    let targetHackAmountStep = targetHackAmount * 0.001
    let hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount))
    let hackAmount = (ns.hackAnalyze(target.hostname) * hackThreads) * target.moneyAvailable

    let targetGrowMult = highMoney / (target.moneyAvailable - hackAmount)
    let growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores))

    let weakenAmountPerThread = ns.weakenAnalyze(1, host.cpuCores)

    let hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads)
    let growSecIncrease = ns.growthAnalyzeSecurity(growThreads)
    let weakenThreads = Math.ceil((hackSecIncrease + growSecIncrease) / weakenAmountPerThread)
    let hackRamCycle = (hackThreads * hackRam) + (growThreads * growRam) + (weakenThreads * weakenRam)

    if (debug) {
        ns.tprintf("Hack Process: ")
        ns.tprintf("  Grow assuming low money is %s, multiplier from low money x%.8f", 
            ns.nFormat((target.moneyAvailable - hackAmount), '($0.000a)'), targetGrowMult)
    }
    
    // if (hackRamCycle > ramAllowance) {
    //     let failRatio = ramAllowance / hackRamCycle
    //     targetHackAmount = Math.min(targetHackAmount * (failRatio * 1.1), targetHackAmount)
    //     if (debug)
    //         ns.tprintf("  ramAllowance / hackRamCycle = %.0f%% (%.0f%%)", failRatio * 100, failRatio * 1.1 * 100)
    // }

    // let cycles = 0
    // while (hackRamCycle > ramAllowance) {
    //     targetHackAmount -= targetHackAmountStep
    //     hackThreads = Math.ceil(ns.hackAnalyzeThreads(target.hostname, targetHackAmount))
    //     hackAmount = ns.hackAnalyze(target.hostname) * hackThreads

    //     targetGrowMult = highMoney / (target.moneyAvailable - hackAmount)
    //     growThreads = Math.ceil(ns.growthAnalyze(target.hostname, targetGrowMult, host.cpuCores))

    //     hackSecIncrease = ns.hackAnalyzeSecurity(hackThreads)
    //     growSecIncrease = ns.growthAnalyzeSecurity(growThreads)
    //     weakenThreads = Math.ceil((hackSecIncrease + growSecIncrease) / weakenAmountPerThread)
    //     hackRamCycle = (hackThreads * hackRam) + (growThreads * growRam) + (weakenThreads * weakenRam)
    //     cycles++
    // }

    if (debug) {
        let tweaken = ns.getWeakenTime(target.hostname)

        //ns.tprintf("  targetHackAmount ratio: %.0f%%; Cycles: %d", (targetHackAmount / (target.moneyAvailable - lowMoney)) * 100, cycles)
        ns.tprintf("  Calling Hack with %d threads (%.2fGB), Grow with %d threads (%.2fGB), and Weaken with %d threads (%.2fGB); Total %.2fGB for %s",
            hackThreads, hackThreads * hackRam,
            growThreads, growThreads * growRam,
            weakenThreads, weakenThreads * weakenRam,
            hackRamCycle, ns.tFormat(tweaken))
        // ns.tprintf("  Hack will increase security from %.2f to %.2f (%.5f per hack thread), weaken should decrease security level by %.2f",
        //     target.hackDifficulty, target.hackDifficulty + hackSecIncrease + growSecIncrease, ns.hackAnalyzeSecurity(1), weakenThreads * weakenAmountPerThread)
    }

    ns.exec("weaken.ns", host.hostname, weakenThreads, target.hostname)
    ns.exec("grow.ns", host.hostname, growThreads, target.hostname)
    ns.exec("hack.ns", host.hostname, hackThreads, target.hostname)
}

export async function main(ns) {
    let ramOverride = ns.args[0]
    let _hostname = "home"
    let _targetname = "nectar-net"
    let host = ns.getServer(_hostname)
    let target = ns.getServer(_targetname)

    let lowThresholdFactor = 0.5
    let highThresholdFactor = 1
    let lowMoney = target.moneyMax * lowThresholdFactor
    let highMoney = target.moneyMax * highThresholdFactor

    let growRam = ns.getScriptRam("grow.ns")        // 1.75GB
    let weakenRam = ns.getScriptRam("weaken.ns")    // 1.75GB
    let hackRam = ns.getScriptRam("hack.ns")        // 1.70GB

    if (!ns.fileExists("grow.ns", host.hostname))
        await ns.scp("grow.ns", "home", host.hostname)

    if (!ns.fileExists("weaken.ns", host.hostname))
        await ns.scp("grow.ns", "home", host.hostname)

    if (!ns.fileExists("hack.ns", host.hostname))
        await ns.scp("grow.ns", "home", host.hostname)

    let ramAllowance = (host.maxRam - host.ramUsed)
    if (host.hostname === "home")
        ramAllowance -= 32

    if (ramOverride) {
        if (ramOverride < 1) {
            let ramFraction = Math.floor(ramAllowance * ramOverride * 100) / 100.0
            ns.tprintf("Overriding availble host RAM max to %.2 f (%.2f%% of %.2f)", ramFraction, ramOverride, ramAllowance)
            ramAllowance = ramFraction
        } else {
            ns.tprintf("Overriding availble host RAM max to %.2f", ramOverride)
            ramAllowance = Math.min(ramOverride, ramAllowance)
        }
    }

    ns.tprintf("INFO: Availble host RAM %.2f", ramAllowance)

    // Weaken to minimum security
    target = ns.getServer(target.hostname)
    while (target.hackDifficulty > target.minDifficulty) {
        doWeaken(ns, host.hostname, target.hostname, ramAllowance)
        while (ns.isRunning("weaken.ns", host.hostname, target.hostname))
            await ns.sleep(500)

        if (debug) {
            let oldHackDifficulty = target.hackDifficulty
            target = ns.getServer(target.hostname)
            ns.tprintf("  Lowered Security from %.2f to %.2f", oldHackDifficulty, target.hackDifficulty)
        } else {
            target = ns.getServer(target.hostname)
        }
    }

    // Grow to high threshold money
    target = ns.getServer(target.hostname)
    while (target.moneyAvailable < highMoney) {
        doGrowAndWeaken(ns, host.hostname, target.hostname, ramAllowance, highMoney)
        while (ns.isRunning("weaken.ns", host.hostname, target.hostname))
            await ns.sleep(500)

        if (debug) {
            let oldMoney = target.moneyAvailable
            target = ns.getServer(target.hostname)
            ns.tprintf("  Increased %s available money from %s to %s (%.2f%% of Max); Current Security: %.2f (min: %.2f)",
                target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), 
                (target.moneyAvailable / target.moneyMax) * 100, target.hackDifficulty, target.minDifficulty)
        } else {
            target = ns.getServer(target.hostname)
        }
    }

    // Hack the world
    while (true) {
        doHGW(ns, host.hostname, target.hostname, highMoney, lowMoney, ramAllowance)

        let hackDone = false
        let growDone = false
        while (ns.isRunning("weaken.ns", host.hostname, target.hostname)) {
            await ns.sleep(500)
            if (debug) {
                let oldMoney = target.moneyAvailable
                target = ns.getServer(target.hostname)
                if (!ns.isRunning("hack.ns", host.hostname, target.hostname) && !hackDone) {
                    hackDone = true
                    if (target.moneyAvailable !== oldMoney) {
                        ns.tprintf("  Hack: Decreased %s available money from %s to %s (%.2f%% of Max)",
                            target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)
                    } else {
                        ns.tprintf("  !! Hack Failed")
                    }
                }
                if (!ns.isRunning("grow.ns", host.hostname, target.hostname) && !growDone) {
                    growDone = true

                    ns.tprintf("  Grow: Increased %s available money from %s to %s (%.2f%% of Max)",
                        target.hostname, ns.nFormat(oldMoney, '($0.000a)'), ns.nFormat(target.moneyAvailable, '($0.000a)'), (target.moneyAvailable / target.moneyMax) * 100)
                }
            }
        }

        if (debug) {
            target = ns.getServer(target.hostname)
            ns.tprintf("  Cycle Complete - Current Security: %.2f (min: %.2f)", target.hackDifficulty, target.minDifficulty)
        }
    }
}