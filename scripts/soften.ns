/** @type import(".").NS */
let ns = null;

function softenServer(hostName) {
    let server = ns.getServer(hostName);

    if (server.hasAdminRights) {
        return;
    }

    if (!server.sshPortOpen && ns.fileExists("BruteSSH.exe", "home")) {
        ns.brutessh(hostName);
    }

    if (!server.ftpPortOpen && ns.fileExists("FTPCrack.exe", "home")) {
        ns.ftpcrack(hostName);
    }

    if (!server.httpPortOpen && ns.fileExists("HTTPWorm.exe", "home")) {
        ns.httpworm(hostName);
    }

    if (!server.smtpPortOpen && ns.fileExists("relaySMTP.exe", "home")) {
        ns.relaysmtp(hostName);
    }

    if (!server.sqlPortOpen && ns.fileExists("SQLInject.exe", "home")) {
        ns.sqlinject(hostName);
    }

    server = ns.getServer(hostName);
    if (server.openPortCount >= server.numOpenPortsRequired) {
        ns.nuke(hostName);
    }
}

function serverIsHackable(hostName) {
    const server = ns.getServer(hostName);
    return server.hasAdminRights && ns.getHackingLevel() >= server.requiredHackingSkill;
}

function canExecuteOnServer(hostName) {
    const server = ns.getServer(hostName);
    return server.hasAdminRights;
}

function serverValueSort(h1, h2) {
    const s1 = ns.getServer(h1);
    const s2 = ns.getServer(h2);

    if (s1.moneyMax > s2.moneyMax) return -1;
    if (s1.moneyMax < s2.moneyMax) return 1;
    return 0;
}

/** @param {NS} _ns **/
export async function main(_ns) {
    ns = _ns;

    const hostSet = new Set(["home"]);
    let hostQueue = ["home"];
    let currentHost;
    while ((currentHost = hostQueue.shift())) {
        //ns.tprint("Crawling " + currentHost)
        let newHosts = ns.scan(currentHost);

        for (const newHost of newHosts) {
            if (!hostSet.has(newHost)) {
                hostQueue.push(newHost);
                hostSet.add(newHost);
            }
        }
    }

    let hostNames = Array.from(hostSet);
    for (const hostName of hostNames) {
        softenServer(hostName);
    }
}
