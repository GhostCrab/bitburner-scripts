/** @param {NS} ns **/
function softenServer(ns, hostName) {
	let server = ns.getServer(hostName)

	if (server.hasAdminRights) {
		return
	}

	if (!server.sshPortOpen && ns.fileExists("BruteSSH.exe", "home")) {
		ns.brutessh(hostName)
	}

	if (!server.ftpPortOpen && ns.fileExists("FTPCrack.exe", "home")) {
		ns.ftpcrack(hostName)
	}

	if (!server.httpPortOpen && ns.fileExists("HTTPWorm.exe", "home")) {
		ns.httpworm(hostName)
	}

	if (!server.smtpPortOpen && ns.fileExists("relaySMTP.exe", "home")) {
		ns.relaysmtp(hostName)
	}

	if (!server.sqlPortOpen && ns.fileExists("SQLInject.exe", "home")) {
		ns.sqlinject(hostName)
	}

	server = ns.getServer(hostName)
	if (server.openPortCount >= server.numOpenPortsRequired) {
		ns.nuke(hostName)
	}
}

function serverIsHackable(ns, hostName) {
	const server = ns.getServer(hostName)
	return server.hasAdminRights && (ns.getHackingLevel() >= server.requiredHackingSkill) && server.moneyMax > 1 && server.hostname !== 'NO SERVER'
}

function canExecuteOnServer(ns, hostName) {
	const server = ns.getServer(hostName)
	return server.hasAdminRights && server.maxRam > 0 && !server.purchasedByPlayer
}

function serverValueSort(ns, h1, h2) {
	const s1 = ns.getServer(h1)
	const s2 = ns.getServer(h2)

	if (s1.moneyMax > s2.moneyMax) return -1
	if (s1.moneyMax < s2.moneyMax) return 1
	return 0
}


export async function main(ns) {
	const hostSet = new Set(["home"])
	let hostQueue = ["home"]
	let currentHost
	while (currentHost = hostQueue.shift()) {
		//ns.tprint("Crawling " + currentHost)
		let newHosts = ns.scan(currentHost)

		for (const newHost of newHosts) {
			if (!hostSet.has(newHost)) {
				hostQueue.push(newHost)
				hostSet.add(newHost)
			}
		}
	}

	let hostNames = Array.from(hostSet)
	for (const hostName of hostNames) {
		softenServer(ns, hostName)
	}

	let hackableHosts = hostNames.filter(serverIsHackable.bind(null, ns)).sort(serverValueSort.bind(null, ns))
	let rootHosts = hostNames.filter(canExecuteOnServer.bind(null, ns))
	let hackMeRam = ns.getScriptRam("hack_me.ns", "home")

	let roundRobin = 0
	for (const hostName of rootHosts) {
		if (hostName === "home")
			continue

		let execMaxArgs = ["hack_me.ns", hostName, hackableHosts[roundRobin % hackableHosts.length]]
		ns.tprintf("%s %s %s", "exec_max.ns", "home", execMaxArgs.toString())

		while (ns.getServerMaxRam("home") - ns.getServerUsedRam("home") < ns.getScriptRam("exec_max.ns"))
			await ns.sleep(500)

		ns.exec("exec_max.ns", "home", 1, ...execMaxArgs)
		roundRobin += 1
	}

	let homeServer = ns.getServer("home")
	let homeRam = homeServer.maxRam - 64
	let ramSlice = homeRam / hackableHosts.length
	let hackMeHomeThreads = Math.floor(ramSlice / hackMeRam)

	if (hackMeHomeThreads <= 0)
		return
	for (const hostName of hackableHosts) {
		ns.exec("hack_me.ns", "home", 1, hostName, ramSlice)
	}
}